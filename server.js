require('dotenv').config();
const express = require('express');
const path = require('path');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID;

app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const webRoot = path.join(__dirname, 'webapp');
app.use(express.static(webRoot));

// Health check endpoints
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

app.get('/ping', (req, res) => {
    res.status(200).send('pong');
});

// API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
app.post('/api/orders', async (req, res) => {
    try {
        const orderData = req.body;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        const message = `ÔøΩÔøΩ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\nÔøΩÔøΩ –°—É–º–º–∞: ${orderData.total}‚ÇΩ\nüì¶ –¢–æ–≤–∞—Ä–æ–≤: ${orderData.items.length}\nüöö –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${orderData.deliveryZone}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}\n\nÔøΩÔøΩ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n${orderData.items.map(item => `‚Ä¢ ${item.name} x${item.quantity}`).join('\n')}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        if (TELEGRAM_BOT_TOKEN && TELEGRAM_ADMIN_CHAT_ID) {
            try {
                await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                    chat_id: TELEGRAM_ADMIN_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                });
            } catch (telegramError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError.message);
            }
        }
        
        res.json({ ok: true, orderId: Date.now().toString() });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// Webhook –¥–ª—è Telegram
app.post('/api/telegram/webhook', (req, res) => {
    console.log('Telegram webhook received:', req.body);
    res.json({ ok: true });
});

// Webhook –¥–ª—è –ÆKassa
app.post('/api/yookassa/webhook', (req, res) => {
    console.log('–ÆKassa webhook received:', req.body);
    res.json({ ok: true });
});

// SPA fallback - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–¥—É—Ç –Ω–∞ index.html
app.get(/^\/(?!api).*/, (req, res) => {
    res.sendFile(path.join(webRoot, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑: ${webRoot}`);
    console.log(`ÔøΩÔøΩ Health check: http://localhost:${PORT}/health`);
});

// Keep-alive –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è Railway
setInterval(() => {
    const uptime = process.uptime();
    const memory = process.memoryUsage();
    console.log(`üíì Keep-alive ping: ${new Date().toISOString()}, Uptime: ${Math.floor(uptime)}s, Memory: ${Math.round(memory.heapUsed / 1024 / 1024)}MB`);
}, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('ÔøΩÔøΩ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('ÔøΩÔøΩ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});
