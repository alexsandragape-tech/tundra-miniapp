require('dotenv').config();
const express = require('express');
const path = require('path');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let orders = new Map();
let orderCounter = 125; // –ù–∞—á–∏–Ω–∞–µ–º —Å 125 –∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

app.use(express.json());

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
function createOrder(orderData) {
    orderCounter++;
    const orderId = orderCounter.toString();
    
    const order = {
        id: orderId,
        status: 'new', // new, accepted, preparing, delivering, completed, cancelled
        createdAt: new Date(),
        updatedAt: new Date(),
        ...orderData
    };
    
    orders.set(orderId, order);
    return order;
}

function updateOrderStatus(orderId, newStatus) {
    const order = orders.get(orderId);
    if (order) {
        order.status = newStatus;
        order.updatedAt = new Date();
        orders.set(orderId, order);
        return order;
    }
    return null;
}

function getOrder(orderId) {
    return orders.get(orderId);
}

function getAllOrders() {
    return Array.from(orders.values()).sort((a, b) => b.createdAt - a.createdAt);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const webRoot = path.join(__dirname, 'webapp');
app.use(express.static(webRoot));

// Health check endpoints
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

app.get('/ping', (req, res) => {
    res.status(200).send('pong');
});

// API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
app.post('/api/orders', async (req, res) => {
    try {
        const orderData = req.body;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const order = createOrder(orderData);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        const totalAmount = orderData.totals?.total || 0;
        const itemsCount = orderData.cartItems?.length || 0;
        
        const message = `üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó #${order.id}

üë§ ${orderData.customerName || '–ö–ª–∏–µ–Ω—Ç'}
üìç ${orderData.address.street}, ${orderData.address.house}${orderData.address.apartment ? `, –∫–≤.${orderData.address.apartment}` : ''} (${orderData.deliveryZone === 'moscow' ? '–ú–æ—Å–∫–≤–∞' : '–ú–û'})
üí∞ ${totalAmount}‚ÇΩ (–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã ‚è≥)
üì¶ ${itemsCount} —Ç–æ–≤–∞—Ä–æ–≤

üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
${orderData.cartItems.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚ÇΩ`).join('\n')}

üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.comment || '–Ω–µ—Ç'}

[üü° –ü—Ä–∏–Ω—è—Ç—å] [üî¥ –û—Ç–º–µ–Ω–∏—Ç—å]`;

        // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
        const inlineKeyboard = {
            inline_keyboard: [
                [
                    { text: 'üü° –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${order.id}` },
                    { text: 'üî¥ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${order.id}` }
                ]
            ]
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if (TELEGRAM_BOT_TOKEN && TELEGRAM_ADMIN_CHAT_ID) {
            try {
                await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                    chat_id: TELEGRAM_ADMIN_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML',
                    reply_markup: inlineKeyboard
                });
            } catch (telegramError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError.message);
            }
        }
        
        res.json({ ok: true, orderId: order.id });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
app.get('/api/orders', (req, res) => {
    try {
        const allOrders = getAllOrders();
        res.json({ ok: true, orders: allOrders });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
app.get('/api/orders/:orderId', (req, res) => {
    try {
        const order = getOrder(req.params.orderId);
        if (order) {
            res.json({ ok: true, order });
        } else {
            res.status(404).json({ ok: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
app.put('/api/orders/:orderId/status', (req, res) => {
    try {
        const { status } = req.body;
        const order = updateOrderStatus(req.params.orderId, status);
        
        if (order) {
            res.json({ ok: true, order });
        } else {
            res.status(404).json({ ok: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// Webhook –¥–ª—è Telegram
app.post('/api/telegram/webhook', (req, res) => {
    try {
        const { message, callback_query } = req.body;
        
        if (callback_query) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
            handleCallbackQuery(callback_query);
        } else if (message) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.text);
        }
        
        res.json({ ok: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
async function handleCallbackQuery(callbackQuery) {
    try {
        const { data, message, from } = callbackQuery;
        const [action, orderId] = data.split('_');
        
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${action} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
        
        let order = getOrder(orderId);
        if (!order) {
            console.error(`–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        let newStatus, statusText, statusEmoji;
        
        switch (action) {
            case 'accept':
                newStatus = 'accepted';
                statusText = '–ü—Ä–∏–Ω—è—Ç';
                statusEmoji = 'üü°';
                break;
            case 'cancel':
                newStatus = 'cancelled';
                statusText = '–û—Ç–º–µ–Ω–µ–Ω';
                statusEmoji = 'üî¥';
                break;
            case 'preparing':
                newStatus = 'preparing';
                statusText = '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
                statusEmoji = 'üîµ';
                break;
            case 'delivering':
                newStatus = 'delivering';
                statusText = '–í –¥–æ—Å—Ç–∞–≤–∫–µ';
                statusEmoji = 'üöö';
                break;
            case 'completed':
                newStatus = 'completed';
                statusText = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
                statusEmoji = '‚úÖ';
                break;
            default:
                console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
                return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order = updateOrderStatus(orderId, newStatus);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
        await updateOrderMessage(message.chat.id, message.message_id, order, newStatus);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusText}"`
        });
        
        console.log(`–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newStatus}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–æ–º
async function updateOrderMessage(chatId, messageId, order, newStatus) {
    try {
        const statusEmojis = {
            'new': '‚è≥',
            'accepted': 'üü°',
            'preparing': 'üîµ',
            'delivering': 'üöö',
            'completed': '‚úÖ',
            'cancelled': 'üî¥'
        };
        
        const statusTexts = {
            'new': '–ù–æ–≤—ã–π',
            'accepted': '–ü—Ä–∏–Ω—è—Ç',
            'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
            'delivering': '–í –¥–æ—Å—Ç–∞–≤–∫–µ',
            'completed': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = `üÜï –ó–ê–ö–ê–ó #${order.id} - ${statusEmojis[newStatus]} ${statusTexts[newStatus]}

üë§ ${order.customerName || '–ö–ª–∏–µ–Ω—Ç'}
üìç ${order.address.street}, ${order.address.house}${order.address.apartment ? `, –∫–≤.${order.address.apartment}` : ''} (${order.deliveryZone === 'moscow' ? '–ú–æ—Å–∫–≤–∞' : '–ú–û'})
üí∞ ${order.totals?.total || 0}‚ÇΩ
üì¶ ${order.cartItems?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤

üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
${order.cartItems.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚ÇΩ`).join('\n')}

üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment || '–Ω–µ—Ç'}

[üü° –ü—Ä–∏–Ω—è—Ç—å] [üîµ –ì–æ—Ç–æ–≤–∏—Ç—Å—è] [üöö –î–æ—Å—Ç–∞–≤–∫–µ] [‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω]`;

        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        let inlineKeyboard;
        if (newStatus === 'new') {
            inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: 'üü° –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${order.id}` },
                        { text: 'üî¥ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${order.id}` }
                    ]
                ]
            };
        } else if (newStatus === 'accepted') {
            inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîµ –ì–æ—Ç–æ–≤–∏—Ç—Å—è', callback_data: `preparing_${order.id}` },
                        { text: 'üî¥ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${order.id}` }
                    ]
                ]
            };
        } else if (newStatus === 'preparing') {
            inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: 'üöö –í –¥–æ—Å—Ç–∞–≤–∫—É', callback_data: `delivering_${order.id}` }
                    ]
                ]
            };
        } else if (newStatus === 'delivering') {
            inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `completed_${order.id}` }
                    ]
                ]
            };
        } else {
            // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            inlineKeyboard = { inline_keyboard: [] };
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`, {
            chat_id: chatId,
            message_id: messageId,
            text: message,
            parse_mode: 'HTML',
            reply_markup: inlineKeyboard
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// Webhook –¥–ª—è –ÆKassa
app.post('/api/yookassa/webhook', (req, res) => {
    try {
        const { event, object } = req.body;
        console.log('–ÆKassa webhook received:', { event, object });
        
        if (event === 'payment.succeeded') {
            // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω
            handlePaymentSuccess(object);
        } else if (event === 'payment.canceled') {
            // –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
            handlePaymentCanceled(object);
        }
        
        res.json({ ok: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ÆKassa webhook:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async function handlePaymentSuccess(payment) {
    try {
        const orderId = payment.metadata?.orderId;
        if (!orderId) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω orderId –≤ –ø–ª–∞—Ç–µ–∂–µ');
            return;
        }
        
        const order = getOrder(orderId);
        if (!order) {
            console.error(`–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–æ–ø–ª–∞—á–µ–Ω"
        order.paymentStatus = 'paid';
        order.paymentId = payment.id;
        order.updatedAt = new Date();
        orders.set(orderId, order);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        if (TELEGRAM_BOT_TOKEN && TELEGRAM_ADMIN_CHAT_ID) {
            const message = `üí∞ –ü–õ–ê–¢–ï–ñ –ü–û–õ–£–ß–ï–ù!

üÜï –ó–ê–ö–ê–ó #${orderId}
üí≥ ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id}
üíµ –°—É–º–º–∞: ${payment.amount.value} ${payment.amount.currency}
‚úÖ –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞!`;
            
            await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                chat_id: TELEGRAM_ADMIN_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            });
        }
        
        console.log(`–ü–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async function handlePaymentCanceled(payment) {
    try {
        const orderId = payment.metadata?.orderId;
        if (!orderId) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω orderId –≤ –ø–ª–∞—Ç–µ–∂–µ');
            return;
        }
        
        const order = getOrder(orderId);
        if (!order) {
            console.error(`–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.paymentStatus = 'canceled';
        order.updatedAt = new Date();
        orders.set(orderId, order);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        if (TELEGRAM_BOT_TOKEN && TELEGRAM_ADMIN_CHAT_ID) {
            const message = `‚ùå –ü–õ–ê–¢–ï–ñ –û–¢–ú–ï–ù–ï–ù!

üÜï –ó–ê–ö–ê–ó #${orderId}
üí≥ ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id}
üíµ –°—É–º–º–∞: ${payment.amount.value} ${payment.amount.currency}
‚ùå –°—Ç–∞—Ç—É—Å: –û—Ç–º–µ–Ω–µ–Ω

–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞.`;
            
            await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                chat_id: TELEGRAM_ADMIN_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            });
        }
        
        console.log(`–ü–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} –æ—Ç–º–µ–Ω–µ–Ω`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
    }
}

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
app.post('/api/payments/create', async (req, res) => {
    try {
        const { orderId, amount, description } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        const order = getOrder(orderId);
        if (!order) {
            return res.status(404).json({ ok: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        const paymentData = {
            amount: {
                value: amount.toString(),
                currency: 'RUB'
            },
            capture: true,
            confirmation: {
                type: 'redirect',
                return_url: `${process.env.FRONTEND_URL || 'https://your-domain.com'}/payment-success`
            },
            description: description || `–ó–∞–∫–∞–∑ #${orderId}`,
            metadata: {
                orderId: orderId
            }
        };
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa API
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        const mockPayment = {
            id: `payment_${Date.now()}`,
            status: 'pending',
            confirmation_url: `https://yoomoney.ru/checkout/payments/v2/contract?orderId=${orderId}`,
            ...paymentData
        };
        
        res.json({ ok: true, payment: mockPayment });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// SPA fallback - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–¥—É—Ç –Ω–∞ index.html
app.get(/^\/(?!api).*/, (req, res) => {
    res.sendFile(path.join(webRoot, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑: ${webRoot}`);
    console.log(`üîó Health check: http://localhost:${PORT}/health`);
});

// Keep-alive –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è Railway
setInterval(() => {
    const uptime = process.uptime();
    const memory = process.memoryUsage();
    console.log(`üíì Keep-alive ping: ${new Date().toISOString()}, Uptime: ${Math.floor(uptime)}s, Memory: ${Math.round(memory.heapUsed / 1024 / 1024)}MB`);
}, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});
