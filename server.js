// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const logger = {
    error: (msg, ...args) => console.error('‚ùå', msg, ...args),
    warn: (msg, ...args) => console.warn('‚ö†Ô∏è', msg, ...args),
    info: (msg, ...args) => console.log('‚ÑπÔ∏è', msg, ...args),
    debug: (msg, ...args) => console.log('üîç', msg, ...args)
};

logger.info('üöÄ –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê');
logger.info('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());

require('dotenv').config();
const express = require('express');
const path = require('path');
const axios = require('axios');
const crypto = require('crypto');
const cors = require('cors');
// üí≥ –°–û–ë–°–¢–í–ï–ù–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ÆKASSA API
class YooKassaAPI {
    constructor(shopId, secretKey) {
        this.shopId = shopId;
        this.secretKey = secretKey;
        this.baseURL = 'https://api.yookassa.ru/v3';
        
        logger.info('üí≥ YooKassa API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π
        this.validateKeys();
    }
    
    validateKeys() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Shop ID
        if (!this.shopId || typeof this.shopId !== 'string' || !/^\d+$/.test(this.shopId)) {
            logger.error('‚ùå Shop ID –Ω–µ–≤–µ—Ä–Ω—ã–π');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Secret Key
        if (!this.secretKey || typeof this.secretKey !== 'string' || 
            (!this.secretKey.startsWith('test_') && !this.secretKey.startsWith('live_'))) {
            logger.error('‚ùå Secret Key –Ω–µ–≤–µ—Ä–Ω—ã–π');
            return false;
        }
        
        logger.debug('‚úÖ –§–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
        return true;
    }
    
    async createPayment(paymentData, idempotenceKey) {
        try {
            logger.debug('üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa API');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
            if (!this.shopId || !this.secretKey) {
                throw new Error('–ö–ª—é—á–∏ –ÆKassa –ø—É—Å—Ç—ã–µ!');
            }
            
            const response = await axios.post(`${this.baseURL}/payments`, paymentData, {
                headers: {
                    'Content-Type': 'application/json',
                    'Idempotence-Key': idempotenceKey
                },
                auth: {
                    username: this.shopId,
                    password: this.secretKey
                },
                timeout: 30000
            });
            
            logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', response.data.id);
            return response.data;
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:', error.message);
            
            if (error.response?.status === 401) {
                logger.error('üîç –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –ÆKassa');
            }
            
            throw error;
        }
    }
    
    async getPayment(paymentId) {
        try {
            logger.debug('üí≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ:', paymentId);
            
            const response = await axios.get(`${this.baseURL}/payments/${paymentId}`, {
                auth: {
                    username: this.shopId,
                    password: this.secretKey
                },
                timeout: 30000
            });
            
            logger.debug('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—É—á–µ–Ω–∞');
            return response.data;
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:', error.message);
            throw error;
        }
    }
}
const config = require('./config');
const { initializeDatabase, OrdersDB, PurchaseHistoryDB, AdminProductsDB, CategoriesDB, BotUsersDB } = require('./database');

const app = express();
const PORT = config.PORT;
const TELEGRAM_BOT_TOKEN = config.TELEGRAM_BOT_TOKEN;
const TELEGRAM_ADMIN_CHAT_ID = config.TELEGRAM_ADMIN_CHAT_ID;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ (Railway)
app.set('trust proxy', 1);

// –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

// üí≥ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø YOOKASSA
logger.info('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa...');

let checkout = null;

// üîß –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ÆKASSA
async function initializeYooKassa() {
    try {
        if (!config.YOOKASSA_SHOP_ID || !config.YOOKASSA_SECRET_KEY) {
            throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏ –ÆKassa');
        }
        
        logger.info('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ÆKassa API...');
        checkout = new YooKassaAPI(config.YOOKASSA_SHOP_ID, config.YOOKASSA_SECRET_KEY);
        logger.info('‚úÖ –ÆKassa API –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –ÆKassa
        try {
            const testResponse = await axios.get('https://api.yookassa.ru/v3/me', {
                auth: {
                    username: config.YOOKASSA_SHOP_ID,
                    password: config.YOOKASSA_SECRET_KEY
                },
                timeout: 10000
            });
            
            if (testResponse.data.test) {
                logger.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¢–ï–°–¢–û–í–´–ï –∫–ª—é—á–∏ –ÆKassa');
            } else {
                logger.info('‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –†–ê–ë–û–ß–ò–ï –∫–ª—é—á–∏ –ÆKassa');
            }
        } catch (testError) {
            logger.error('‚ùå –¢–µ—Å—Ç API –ÆKassa –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', testError.response?.status);
        }
        
        logger.info('‚úÖ –ÆKassa –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ÆKassa:', error.message);
        logger.warn('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ –ÆKassa');
    }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let orders = new Map();
let orderCounter = 0; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ –ë–î

// üî• –¢–ê–ô–ú–ï–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–¢–ú–ï–ù–´ –ó–ê–ö–ê–ó–û–í (30 –º–∏–Ω—É—Ç)
let orderTimers = new Map();

// üîß –•–†–ê–ù–ò–õ–ò–©–ï –¢–û–í–ê–†–û–í –î–õ–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
let adminProducts = new Map();

app.use(express.json());

// üîî –ì–õ–û–ë–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï webhook –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
app.use('/api/telegram/webhook', (req, res, next) => {
    logger.info('üîî GLOBAL WEBHOOK MIDDLEWARE: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω', {
        method: req.method,
        url: req.url,
        timestamp: new Date().toISOString(),
        ip: req.ip,
        userAgent: req.headers['user-agent']
    });
    next();
});

// üîß CORS –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, X-Admin-Password');
    
    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});

// üóÑÔ∏è –ü–û–õ–ù–´–ô –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í (–≤—Å–µ 49 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
async function loadFullProductCatalog() {
    return {
        'kolbasy': [
            {
                id: 'chorizo-70',
                name: '–ö–æ–ª–±–∞—Å–∞ –∏–∑ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –æ–ª–µ–Ω–∏–Ω—ã "–ß–æ—Ä–∏–∑–æ"',
                price: 395,
                unit: '/70 –≥—Ä.',
                maxQty: 20,
                image: 'üå≠',
                imageUrl: 'images/products/kolbasy/chorizo-70.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Å–º–µ—Å—å 5 –ø–µ—Ä—Ü–µ–≤, –ø–∞–ø—Ä–∏–∫–∞ –∫–æ–ø—á–µ–Ω–∞—è, –∫–∞—Ä–¥–∞–º–æ–Ω, –ø–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π',
                nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥',
                calories: '510 –∫–∫–∞–ª/2140 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'trufel-70',
                name: '–ö–æ–ª–±–∞—Å–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã "–° –¢—Ä—é—Ñ–µ–ª–µ–º"',
                price: 411,
                unit: '/70 –≥—Ä.',
                maxQty: 20,
                image: 'üå≠',
                imageUrl: 'images/products/kolbasy/trufel-70.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Å–ø–µ—Ü–∏–∏, –ø–µ—Ä–µ—Ü, —Ç—Ä—é—Ñ–µ–ª—å —á–µ—Ä–Ω—ã–π 0,02%, –º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö',
                nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥',
                calories: '510 –∫–∫–∞–ª/2140 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'kedr-70',
                name: '–ö–æ–ª–±–∞—Å–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã "–°–µ–≤–µ—Ä–Ω–∞—è —Å –∫–µ–¥—Ä–æ–≤—ã–º –æ—Ä–µ—Ö–æ–º"',
                price: 405,
                unit: '/70 –≥—Ä.',
                maxQty: 20,
                image: 'üå≠',
                imageUrl: 'images/products/kolbasy/kedr-70.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, –æ—Ä–µ—Ö –∫–µ–¥—Ä–æ–≤—ã–π, —Å–º–µ—Å—å —Å–ø–µ—Ü–∏–π –∏ –ø—Ä—è–Ω–æ—Å—Ç–µ–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è',
                nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 8 –≥',
                calories: '540 –∫–∫–∞–ª/2266 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'osobaya-70',
                name: '–ö–æ–ª–±–∞—Å–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã "–û—Å–æ–±–∞—è"',
                price: 390,
                unit: '/70 –≥—Ä.',
                maxQty: 20,
                image: 'üå≠',
                imageUrl: 'images/products/kolbasy/osobaya-70.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Å–∞—Ö–∞—Ä, —Å–ø–µ—Ü–∏–∏, —á–µ—Å–Ω–æ–∫ –º–æ–ª–æ—Ç—ã–π, –º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö, –ø–µ—Ä–µ—Ü, –∞–Ω—Ç–∏–æ–∫–∏—Å–ª–∏—Ç–µ–ª—å (–∞—Å–∫–æ—Ä–±–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞), —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã (–º–æ–ª–æ—á–Ω–æ–∫–∏—Å–ª—ã–µ –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º—ã)',
                nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥',
                calories: '510 –∫–∫–∞–ª/2140 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'chorizo-170',
                name: '–ö–æ–ª–±–∞—Å–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã "–ß–æ—Ä–∏–∑–æ"',
                price: 860,
                unit: '/170 –≥—Ä.',
                maxQty: 15,
                image: 'üå≠',
                imageUrl: 'images/products/kolbasy/chorizo-170.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Å–º–µ—Å—å 5 –ø–µ—Ä—Ü–µ–≤, –ø–∞–ø—Ä–∏–∫–∞ –∫–æ–ø—á–µ–Ω–∞—è, –∫–∞—Ä–¥–∞–º–æ–Ω, –ø–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π',
                nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥',
                calories: '510 –∫–∫–∞–ª/2140 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'trufel-200',
                name: '–ö–æ–ª–±–∞—Å–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã "–° –¢—Ä—é—Ñ–µ–ª–µ–º"',
                price: 980,
                unit: '/200 –≥—Ä.',
                maxQty: 12,
                image: 'üå≠',
                imageUrl: 'images/products/kolbasy/trufel-200.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Å–ø–µ—Ü–∏–∏, –ø–µ—Ä–µ—Ü, —Ç—Ä—é—Ñ–µ–ª—å —á–µ—Ä–Ω—ã–π 0,02%, –º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö',
                nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥',
                calories: '510 –∫–∫–∞–ª/2140 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'osobaya-170',
                name: '–ö–æ–ª–±–∞—Å–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã "–û—Å–æ–±–∞—è"',
                price: 885,
                unit: '/170 –≥—Ä.',
                maxQty: 12,
                image: 'üå≠',
                imageUrl: 'images/products/kolbasy/osobaya-170.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Å–∞—Ö–∞—Ä, —Å–ø–µ—Ü–∏–∏, —á–µ—Å–Ω–æ–∫ –º–æ–ª–æ—Ç—ã–π, –º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö, –ø–µ—Ä–µ—Ü',
                nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥',
                calories: '510 –∫–∫–∞–ª/2140 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'kedr-160',
                name: '–ö–æ–ª–±–∞—Å–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã "–°–µ–≤–µ—Ä–Ω–∞—è —Å –∫–µ–¥—Ä–æ–≤—ã–º –æ—Ä–µ—Ö–æ–º"',
                price: 910,
                unit: '/160 –≥—Ä.',
                maxQty: 10,
                image: 'üå≠',
                imageUrl: 'images/products/kolbasy/kedr-160.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, –æ—Ä–µ—Ö –∫–µ–¥—Ä–æ–≤—ã–π, —Å–º–µ—Å—å —Å–ø–µ—Ü–∏–π –∏ –ø—Ä—è–Ω–æ—Å—Ç–µ–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è',
                nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 8 –≥',
                calories: '540 –∫–∫–∞–ª/2266 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            }
        ],
        'pashtet': [
            {
                id: 'riyet-olene-griby',
                name: '–†–∏–π–µ—Ç –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã —Å –±–µ–ª—ã–º–∏ –≥—Ä–∏–±–∞–º–∏ –∏ —Ç—Ä—é—Ñ–µ–ª–µ–º',
                price: 378,
                unit: '/85 –≥—Ä.',
                maxQty: 15,
                image: 'ü•´',
                imageUrl: 'images/products/pashtet/riyet-olene-griby.jpg',
                composition: '–º—è—Å–æ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –æ–ª–µ–Ω—è, –≥—Ä–∏–±—ã –±–µ–ª—ã–µ, —Ç—Ä—é—Ñ–µ–ª—å —á–µ—Ä–Ω—ã–π 0,02%, –∂–∏—Ä –æ–ª–µ–Ω–∏–π, –ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π',
                nutrition: '–±–µ–ª–∫–∏ - 17,8 –≥, –∂–∏—Ä—ã - 19,8 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 2,6 –≥',
                calories: '259,8 –∫–∫–∞–ª/1087 –∫–î–∂',
                storage: '90 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'riyet-serdtse',
                name: '–†–∏–π–µ—Ç –∏–∑ —Å–µ—Ä–¥—Ü–∞ –æ–ª–µ–Ω—è —Å —à–∞–º–ø–∏–Ω—å–æ–Ω–∞–º–∏, —è–≥–æ–¥–∞–º–∏, –º–æ–∂–∂–µ–≤–µ–ª—å–Ω–∏–∫–∞ –∏ —Ä–æ–∑–º–∞—Ä–∏–Ω–æ–º',
                price: 360,
                unit: '/85 –≥—Ä.',
                maxQty: 15,
                image: 'ü•´',
                imageUrl: 'images/products/pashtet/riyet-serdtse.jpg',
                composition: '–º—è—Å–æ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –æ–ª–µ–Ω—è, –º–æ—Ä–∫–æ–≤—å, –ª—É–∫, –≤–∏–Ω–æ –±–µ–ª–æ–µ —Å—É—Ö–æ–µ, —Å–æ–ª—å –º–æ—Ä—Å–∫–∞—è, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ, —Å–æ–ª—å, —è–≥–æ–¥—ã –º–æ–∂–∂–µ–≤–µ–ª—å–Ω–∏–∫–∞, –ø–µ—Ä–µ—Ü',
                nutrition: '–±–µ–ª–∫–∏ - 12 –≥, –∂–∏—Ä—ã - 10 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 9 –≥',
                calories: '182 –∫–∫–∞–ª/762 –∫–î–∂',
                storage: '90 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'riyet-utka',
                name: '–†–∏–π–µ—Ç –∏–∑ –ø–æ–ª—è—Ä–Ω–æ–π —É—Ç–∫–∏ —Å —Ç—Ä—é—Ñ–µ–ª–µ–º',
                price: 378,
                unit: '/85 –≥—Ä.',
                maxQty: 15,
                image: 'ü•´',
                imageUrl: 'images/products/pashtet/riyet-utka.jpg',
                composition: '–º—è—Å–æ —É—Ç–∫–∏, –±–µ–ª—ã–µ –≥—Ä–∏–±—ã, –≤–∏–Ω–æ –±–µ–ª–æ–µ —Å—É—Ö–æ–µ, —É—Ç–∏–Ω—ã–π –∂–∏—Ä, —Ç—Ä—é—Ñ–µ–ª—å —á–µ—Ä–Ω—ã–π 0,02%, –ª—É–∫, —Å–æ–ª—å –º–æ—Ä—Å–∫–∞—è, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–±–µ–ª–∫–∏ - 13,3 –≥, –∂–∏—Ä—ã - 45,9 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 2,3 –≥',
                calories: '496 –∫–∫–∞–ª/2077 –∫–î–∂',
                storage: '90 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'riyet-yagnenok',
                name: '–†–∏–π–µ—Ç –∏–∑ —è–≥–Ω–µ–Ω–∫–∞',
                price: 365,
                unit: '/85 –≥—Ä.',
                maxQty: 15,
                image: 'ü•´',
                imageUrl: 'images/products/pashtet/riyet-yagnenok.jpg',
                composition: '–º—è—Å–æ —è–≥–Ω–µ–Ω–∫–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –ª—É–∫, —Å–æ–ª—å –º–æ—Ä—Å–∫–∞—è, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–±–µ–ª–∫–∏ - 15,7 –≥, –∂–∏—Ä—ã - 15,4 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 5,5 –≥',
                calories: '223,4 –∫–∫–∞–ª/935 –∫–î–∂',
                storage: '90 —Å—É—Ç–æ–∫',
                available: true
            }
        ],
        'delikatesy': [
            {
                id: 'hamon-utka',
                name: '–•–∞–º–æ–Ω –∏–∑ —É—Ç–∫–∏ —Å—ã—Ä–æ–≤—è–ª–µ–Ω—ã–π',
                price: 560,
                unit: '/70 –≥—Ä.',
                maxQty: 12,
                image: 'ü•©',
                imageUrl: 'images/products/delikatesy/hamon-utka.jpg',
                composition: '—Ñ–∏–ª–µ —É—Ç–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏ –ø—Ä–µ–º–∏—É–º, —Å–æ–ª—å, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–±–µ–ª–∫–∏ - 18,9 –≥, –∂–∏—Ä—ã - 9 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 1,9 –≥',
                calories: '172 –∫–∫–∞–ª/720,1 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'karpachcho-olene',
                name: '–ö–∞—Ä–ø–∞—á—á–æ –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç',
                price: 495,
                unit: '/70 –≥—Ä.',
                maxQty: 12,
                image: 'ü•©',
                imageUrl: 'images/products/delikatesy/karpachcho-olene.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞ –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç, —Å–ø–µ—Ü–∏–∏, —Å–æ–ª—å',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 6 –≥',
                calories: '160 –∫–∫–∞–ª/620 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'sneki-okorok',
                name: '–°–Ω–µ–∫–∏ –∏–∑ –æ–∫–æ—Ä–æ–∫–∞ –æ–ª–µ–Ω—è —Å—ã—Ä–æ–≤—è–ª–µ–Ω—ã–µ "–¢–∞—ë–∂–Ω—ã–µ —Å –¥—ã–º–∫–æ–º"',
                price: 170,
                unit: '/30 –≥—Ä.',
                maxQty: 12,
                image: 'ü•©',
                imageUrl: 'images/products/delikatesy/sneki-okorok.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞ 1 —Å–æ—Ä—Ç, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, BBQ –ø–∞–ø—Ä–∏–∫–∞, –º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö',
                nutrition: '–±–µ–ª–∫–∏ - 20 –≥, –∂–∏—Ä—ã - 6 –≥',
                calories: '180 –∫–∫–∞–ª/610 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'filey-olene',
                name: '–§–∏–ª–µ–π –æ–ª–µ–Ω—è —Å—ã—Ä–æ–≤—è–ª–µ–Ω—ã–π',
                price: 490,
                unit: '/70 –≥—Ä.',
                maxQty: 12,
                image: 'ü•©',
                imageUrl: 'images/products/delikatesy/filey-olene.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, —Å–∞—Ö–∞—Ä, —ç–∫—Å—Ç—Ä–∞–∫—Ç—ã –ø—Ä—è–Ω–æ—Å—Ç–µ–π (—á–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü, –∫–æ—Ä–∏–∞–Ω–¥—Ä), —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è',
                nutrition: '–ë–µ–ª–∫–∏ - 20,0 –≥, –∂–∏—Ä—ã - 10,0 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 1,5 –≥',
                calories: '260 –∫–∫–∞–ª/1090 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'pastila-filey',
                name: '–ü–∞—Å—Ç–∏–ª–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ —Ñ–∏–ª–µ—è –æ–ª–µ–Ω—è',
                price: 250,
                unit: '/50 –≥—Ä.',
                maxQty: 15,
                image: 'ü•©',
                imageUrl: 'images/products/delikatesy/pastila-filey.jpg',
                composition: '–≤—ã—Ä–µ–∑–∫–∞ –æ–ª–µ–Ω—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç, —Å–∞—Ö–∞—Ä, —Å–æ–µ–≤—ã–π —Å–æ—É—Å, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, –ø–∞–ø—Ä–∏–∫–∞ BBQ, —Å–º–µ—Å—å —Å–ø–µ—Ü–∏–π, –æ—Å—Ç—Ä—ã–π –∫–∞–π–µ–Ω—Å–∫–∏–π –ø–µ—Ä–µ—Ü, –Ω–∏—Ç—Ä–∏—Ç–Ω–æ-–ø–æ—Å–æ–ª–æ—á–Ω–∞—è —Å–º–µ—Å—å',
                nutrition: '–±–µ–ª–∫–∏ - 25 –≥, –∂–∏—Ä—ã ‚Äì 10 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 3 –≥',
                calories: '176 –∫–∫–∞–ª/736 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'chipsy-olene',
                name: '–ß–∏–ø—Å—ã –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã —Å—ã—Ä–æ–≤—è–ª–µ–Ω—ã–µ',
                price: 230,
                unit: '/50 –≥—Ä.',
                maxQty: 15,
                image: 'ü•©',
                imageUrl: 'images/products/delikatesy/chipsy-olene.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞ 1 —Å–æ—Ä—Ç, —Å–æ–ª—å, —Å–æ—É—Å –≤–æ—Ä—á–µ—Å—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∏, —Å–∞—Ö–∞—Ä',
                nutrition: '–±–µ–ª–∫–∏ - 18,0 –≥, –∂–∏—Ä—ã - 7,0 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 12,0 –≥',
                calories: '140 –∫–∫–∞–ª/590 –∫–î–∂',
                storage: '180 —Å—É—Ç–æ–∫',
                available: true
            }
        ],
        'gotovye': [
            {
                id: 'koreyka-yagody',
                name: '–ö–æ—Ä–µ–π–∫–∞ –æ–ª–µ–Ω—è –∑–∞–ø–µ—á—ë–Ω–Ω–∞—è –≤ —Å–µ–≤–µ—Ä–Ω—ã—Ö —è–≥–æ–¥–∞—Ö',
                price: 4880,
                unit: '/–∫–≥',
                maxQty: 5,
                image: 'üî•',
                imageUrl: 'images/products/gotovye/koreyka-yagody.jpg',
                composition: '–∫–æ—Ä–µ–π–∫–∞ –æ–ª–µ–Ω—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç, –º–∞—Ä–∏–Ω–∞–¥ –∏–∑ –°–µ–≤–µ—Ä–Ω—ã—Ö —è–≥–æ–¥ (–±—Ä—É—Å–Ω–∏–∫–∞, –º–æ—Ä–æ—à–∫–∞), —Å–ø–µ—Ü–∏–∏ (—Ä–æ–∑–º–∞—Ä–∏–Ω, —Å–º–µ—Å—å –ø–µ—Ä—Ü–µ–≤), —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 11 –≥',
                calories: '260 –∫–∫–∞–ª/1190 –∫–î–∂',
                storage: '20 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'koreyka-bbq',
                name: '–ö–æ—Ä–µ–π–∫–∞ –æ–ª–µ–Ω—è –∑–∞–ø–µ—á—ë–Ω–Ω–∞—è "BBQ"',
                price: 4880,
                unit: '/–∫–≥',
                maxQty: 5,
                image: 'üî•',
                imageUrl: 'images/products/gotovye/koreyka-bbq.jpg',
                composition: '–∫–æ—Ä–µ–π–∫–∞ –æ–ª–µ–Ω—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç, –ü–∞–ø—Ä–∏–∫–∞ BBQ, —Å–æ—É—Å –≤–æ—Ä—á–µ—Å—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∏, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, –Ω–∏—Ç—Ä–∏—Ç–Ω–æ-–ø–æ—Å–æ–ª–æ—á–Ω–∞—è —Å–º–µ—Å—å',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 11 –≥',
                calories: '260 –∫–∫–∞–ª/1190 –∫–î–∂',
                storage: '20 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'okorok-vino',
                name: '–û–∫–æ—Ä–æ–∫ –æ–ª–µ–Ω—è —Ç–æ–º–ª–µ–Ω—ã–π —Å –≤–∏–Ω–æ–º –∏ –ø—Ä—è–Ω—ã–º–∏ —Ç—Ä–∞–≤–∞–º–∏',
                price: 4480,
                unit: '/–∫–≥',
                maxQty: 5,
                image: 'üî•',
                imageUrl: 'images/products/gotovye/okorok-vino.jpg',
                composition: '–æ–∫–æ—Ä–æ–∫ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –æ–ª–µ–Ω—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç, —Å–∞—Ö–∞—Ä, —Å–æ–µ–≤—ã–π —Å–æ—É—Å, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Ç–∏–º—å—è–Ω, —Ä–æ–∑–º–∞—Ä–∏–Ω',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 6 –≥',
                calories: '160 –∫–∫–∞–ª/620 –∫–î–∂',
                storage: '20 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'okorok-trufel',
                name: '–û–∫–æ—Ä–æ–∫ –æ–ª–µ–Ω—è —Ç–æ–º–ª–µ–Ω—ã–π —Å —Ç—Ä—é—Ñ–µ–ª–µ–º',
                price: 4600,
                unit: '/–∫–≥',
                maxQty: 5,
                image: 'üî•',
                imageUrl: 'images/products/gotovye/okorok-trufel.jpg',
                composition: '–æ–∫–æ—Ä–æ–∫ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –æ–ª–µ–Ω—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç, –º–∞—Ä–∏–Ω–∞–¥ (—Å–æ—É—Å –≤–æ—Ä—á–µ—Å—Ç–µ—Ä, Guinness), —Ç—Ä—é—Ñ–µ–ª—å —á–µ—Ä–Ω—ã–π 0,02%, —Å–º–µ—Å—å —Å–ø–µ—Ü–∏–π (—Ä–æ–∑–º–∞—Ä–∏–Ω, –º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö, –∞–Ω–∏—Å), —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 6 –≥',
                calories: '160 –∫–∫–∞–ª/620 –∫–î–∂',
                storage: '20 —Å—É—Ç–æ–∫',
                available: true
            },
            {
                id: 'pastrami-trufel',
                name: '–ü–∞—Å—Ç—Ä–∞–º–∏ –∏–∑ –æ–∫–æ—Ä–æ–∫–∞ –æ–ª–µ–Ω—è —Å —Ç—Ä—é—Ñ–µ–ª–µ–º',
                price: 4630,
                unit: '/–∫–≥',
                maxQty: 5,
                image: 'üî•',
                imageUrl: 'images/products/gotovye/pastrami-trufel.jpg',
                composition: '–æ–∫–æ—Ä–æ–∫ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –æ–ª–µ–Ω—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç, —Å–º–µ—Å—å —Å–ø–µ—Ü–∏–π (—Ç–∏–º—å—è–Ω, —Ä–æ–∑–º–∞—Ä–∏–Ω, –∫–æ—Ä–∏–∞–Ω–¥—Ä), –º–∞—Ä–∏–Ω–∞–¥ (–≤–∏–Ω–æ –∫—Ä–∞—Å–Ω–æ–µ —Å—É—Ö–æ–µ, –º—ë–¥), —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 6 –≥',
                calories: '160 –∫–∫–∞–ª/620 –∫–î–∂',
                storage: '20 —Å—É—Ç–æ–∫',
                available: true
            }
        ],
        'zamorozhennye': [
            {
                id: 'pelmeni-severnye',
                name: '–ü–µ–ª—å–º–µ–Ω–∏ ¬´–°–µ–≤–µ—Ä–Ω—ã–µ¬ª —Å —Ç—Ä—é—Ñ–µ–ª–µ–º',
                price: 758,
                unit: '/500 –≥—Ä.',
                maxQty: 8,
                image: '‚ùÑÔ∏è',
                imageUrl: 'images/products/zamorozhennye/pelmeni-severnye.jpg',
                composition: '—Ñ–∞—Ä—à - –æ–ª–µ–Ω–∏–Ω–∞, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü, —Ç—Ä—é—Ñ–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ, –¢–µ—Å—Ç–æ - –º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è –≤/—Å, –≤–æ–¥–∞, —Å–æ–ª—å, —è–∏—á–Ω—ã–π –º–µ–ª–∞–Ω–∂, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ',
                nutrition: '–±–µ–ª–∫–∏ - 16 –≥, –∂–∏—Ä—ã - 12 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 28 –≥',
                calories: '220 –∫–∫–∞–ª/921 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pelmeni-taymyrskie',
                name: '–ü–µ–ª—å–º–µ–Ω–∏ ¬´–¢–∞–π–º—ã—Ä—Å–∫–∏–µ¬ª',
                price: 758,
                unit: '/500 –≥—Ä.',
                maxQty: 8,
                image: '‚ùÑÔ∏è',
                imageUrl: 'images/products/zamorozhennye/pelmeni-taymyrskie.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, –ª—É–∫, –≤–æ–¥–∞, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è, –ø–µ—Ä–µ—Ü —á—ë—Ä–Ω—ã–π –º–æ–ª–æ—Ç—ã–π. –¢–µ—Å—Ç–æ ‚Äì –º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è –≤/—Å, –≤–æ–¥–∞, —Å–æ–ª—å, —è–∏—á–Ω—ã–π –º–µ–ª–∞–Ω–∂, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 6 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 28 –≥',
                calories: '220 –∫–∫–∞–ª/921 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pelmeni-los-griby',
                name: '–ü–µ–ª—å–º–µ–Ω–∏ —Å –º—è—Å–æ–º –ª–æ—Å—è –∏ –≥—Ä–∏–±–∞–º–∏',
                price: 780,
                unit: '/500 –≥—Ä.',
                maxQty: 8,
                image: '‚ùÑÔ∏è',
                imageUrl: 'images/products/zamorozhennye/pelmeni-los-griby.jpg',
                composition: '–º—è—Å–æ –ª–æ—Å—è, –≥–æ–≤—è–∂–∏–π –∂–∏—Ä, –ª—É–∫, –≤–æ–¥–∞, –ø–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π –º–æ–ª–æ—Ç—ã–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è, –≥—Ä–∏–±—ã —à–∞–º–ø–∏–Ω—å–æ–Ω—ã. –¢–µ—Å—Ç–æ: –º—É–∫–∞ –≤/—Å, –≤–æ–¥–∞, —è–∏—á–Ω—ã–π –º–µ–ª–∞–Ω–∂, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ',
                nutrition: '–±–µ–ª–∫–∏ - 16 –≥, –∂–∏—Ä—ã - 12 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 28 –≥',
                calories: '220 –∫–∫–∞–ª/921 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pelmeni-chernye',
                name: '–ü–µ–ª—å–º–µ–Ω–∏ —á—ë—Ä–Ω—ã–µ –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã —Å —Ç—Ä—é—Ñ–µ–ª–µ–º (—Ä—É—á–Ω–∞—è –ª–µ–ø–∫–∞)',
                price: 960,
                unit: '/500 –≥—Ä.',
                maxQty: 6,
                image: '‚ùÑÔ∏è',
                imageUrl: 'images/products/zamorozhennye/pelmeni-chernye.jpg',
                composition: '—Ñ–∞—Ä—à - –æ–ª–µ–Ω–∏–Ω–∞, –º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ, –µ–∂–µ–≤–∏–∫–∞, —Å–æ–ª—å, –º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö, –æ—Ä–µ–≥–∞–Ω–æ, —Ç—Ä—é—Ñ–µ–ª—å -0,02%, –¢–µ—Å—Ç–æ ‚Äì –º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è –≤/—Å, –≤–æ–¥–∞, —Å–æ–ª—å, —è–∏—á–Ω—ã–π –º–µ–ª–∞–Ω–∂, —á–µ—Ä–Ω–∏–ª–∞ –∫–∞—Ä–∞–∫–∞—Ç–∏—Ü—ã',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 6 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 28 –≥',
                calories: '220 –∫–∫–∞–ª/921 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            }
        ],
        'polufabrikaty': [
            {
                id: 'okorok-olene',
                name: '–û–∫–æ—Ä–æ–∫ –æ–ª–µ–Ω—è',
                price: 1970,
                unit: '/–∫–≥',
                maxQty: 6,
                image: 'ü•ì',
                imageUrl: 'images/products/polufabrikaty/okorok-olene.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞ –æ–∫–æ—Ä–æ–∫ –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç',
                nutrition: '–±–µ–ª–∫–∏ - 22 –≥, –∂–∏—Ä—ã - 11 –≥',
                calories: '260 –∫–∫–∞–ª/1190 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'vyrezka-olene',
                name: '–í—ã—Ä–µ–∑–∫–∞ –æ–ª–µ–Ω—è',
                price: 3160,
                unit: '/–∫–≥',
                maxQty: 4,
                image: 'ü•ì',
                imageUrl: 'images/products/polufabrikaty/vyrezka-olene.jpg',
                composition: '–≤—ã—Ä–µ–∑–∫–∞ –æ–ª–µ–Ω—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç',
                nutrition: '–ë–µ–ª–∫–∏ - 22 –≥, –ñ–∏—Ä—ã - 11 –≥',
                calories: '260 –∫–∫–∞–ª/1190 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'koreyka-kost',
                name: '–ö–æ—Ä–µ–π–∫–∞ –æ–ª–µ–Ω—è –Ω–∞ –∫–æ—Å—Ç–∏',
                price: 3310,
                unit: '/–∫–≥',
                maxQty: 4,
                image: 'ü•ì',
                imageUrl: 'images/products/polufabrikaty/koreyka-kost.jpg',
                composition: '–∫–æ—Ä–µ–π–∫–∞ –æ–ª–µ–Ω—è –≤—ã—Å—à–∏–π —Å–æ—Ä—Ç',
                nutrition: '–ë–µ–ª–∫–∏ - 22 –≥, –ñ–∏—Ä—ã - 11 –≥',
                calories: '260 –∫–∫–∞–ª/1190 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'kupaty-piknik',
                name: '–ö—É–ø–∞—Ç—ã "–ü–∏–∫–Ω–∏–∫"',
                price: 1268,
                unit: '/–∫–≥',
                maxQty: 8,
                image: 'ü•ì',
                imageUrl: 'images/products/polufabrikaty/kupaty-piknik.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, —à–ø–∏–∫, —á–µ—Å–Ω–æ–∫, —Å–∞—Ö–∞—Ä, —ç–∫—Å—Ç—Ä–∞–∫—Ç—ã –ø—Ä—è–Ω–æ—Å—Ç–µ–π, –∫–æ—Ä–∏–∞–Ω–¥—Ä, —á–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è',
                nutrition: '–±–µ–ª–∫–∏ - 15,0 –≥, –∂–∏—Ä—ã - 21,0 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 1,5 –≥',
                calories: '260 –∫–∫–∞–ª/1090 –∫–î–∂',
                storage: '12 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'kupaty-tundra',
                name: '–ö—É–ø–∞—Ç—ã "–¢—É–Ω–¥—Ä–∞"',
                price: 1268,
                unit: '/–∫–≥',
                maxQty: 8,
                image: 'ü•ì',
                imageUrl: 'images/products/polufabrikaty/kupaty-tundra.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞, —à–ø–∏–∫, –ª—É–∫, —Å–∞—Ö–∞—Ä, —ç–∫—Å—Ç—Ä–∞–∫—Ç—ã –ø—Ä—è–Ω–æ—Å—Ç–µ–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è',
                nutrition: '–±–µ–ª–∫–∏ - 15 –≥, –∂–∏—Ä—ã - 21 –≥, —É–≥–ª–µ–≤–æ–¥—ã - 1 –≥',
                calories: '250 –∫–∫–∞–ª/1050 –∫–î–∂',
                storage: '12 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'kotleti-burger',
                name: '–ö–æ—Ç–ª–µ—Ç—ã –¥–ª—è –±—É—Ä–≥–µ—Ä–∞ –∏–∑ –º—è—Å–∞ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –æ–ª–µ–Ω—è',
                price: 290,
                unit: '/300 –≥—Ä. (2 —à—Ç—É–∫–∏)',
                maxQty: 10,
                image: 'ü•ì',
                imageUrl: 'images/products/polufabrikaty/kotleti-burger.jpg',
                composition: '–º—è—Å–æ —Å–µ–≤–µ—Ä–Ω–æ–≥–æ –æ–ª–µ–Ω—è —Ä—É–±–ª–µ–Ω–Ω–æ–µ, –∂–∏—Ä –æ–ª–µ–Ω–∏–π',
                nutrition: '–ë–µ–ª–∫–∏ - 17 –≥, –ñ–∏—Ä—ã - 12 –≥',
                calories: '270 –∫–∫–∞–ª/980 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'lopatka-olene',
                name: '–õ–æ–ø–∞—Ç–∫–∞ –æ–ª–µ–Ω—è –±–µ–∑ –∫–æ—Å—Ç–∏',
                price: 1770,
                unit: '/–∫–≥',
                maxQty: 6,
                image: 'ü•ì',
                imageUrl: 'images/products/polufabrikaty/lopatka-olene.jpg',
                composition: '–æ–ª–µ–Ω–∏–Ω–∞ –ª–æ–ø–∞—Ç–æ—á–Ω–∞—è —á–∞—Å—Ç—å –±–µ–∑ –∫–æ—Å—Ç–∏',
                nutrition: '–ë–µ–ª–∫–∏ - 19 –≥, –ñ–∏—Ä—ã - 4 –≥',
                calories: '112 –∫–∫–∞–ª/780 –∫–î–∂',
                storage: '10 –º–µ—Å—è—Ü–µ–≤',
                available: true
            }
        ],
        'pirogi-sytnye': [
            {
                id: 'pirog-ohotnichiy',
                name: '–ü–∏—Ä–æ–≥ —Å –æ–ª–µ–Ω–∏–Ω–æ–π –æ—Ö–æ—Ç–Ω–∏—á–∏–π',
                price: 880,
                unit: '/550 –≥—Ä.',
                maxQty: 8,
                image: 'ü•ß',
                imageUrl: 'images/products/pirogi-sytnye/pirog-ohotnichiy.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –æ–ª–µ–Ω–∏–Ω–∞ –≤/—Å, —Ç–æ–º–∞—Ç—ã –≤—è–ª–µ–Ω—ã–µ, –º–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ, –ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π, –º–æ—Ä–∫–æ–≤—å, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–ë–µ–ª–∫–∏ 11.55 –≥, –ñ–∏—Ä—ã 9.32 –≥, –£–≥–ª–µ–≤–æ–¥—ã 25.24 –≥',
                calories: '232.8 –∫–∫–∞–ª/974.1 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-brusnika',
                name: '–ü–∏—Ä–æ–≥ —Å –æ–ª–µ–Ω–∏–Ω–æ–π –∏ –±—Ä—É—Å–Ω–∏–∫–æ–π',
                price: 880,
                unit: '/550 –≥—Ä.',
                maxQty: 8,
                image: 'ü•ß',
                imageUrl: 'images/products/pirogi-sytnye/pirog-brusnika.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –æ–ª–µ–Ω–∏–Ω–∞ –≤/—Å, –±—Ä—É—Å–Ω–∏–∫–∞, —Å–æ–µ–≤—ã–π —Å–æ—É—Å, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–ë–µ–ª–∫–∏ 14.02 –≥, –ñ–∏—Ä—ã 9.12 –≥, –£–≥–ª–µ–≤–æ–¥—ã 23.42 –≥',
                calories: '233.2 –∫–∫–∞–ª/917.6 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-griby-trufel',
                name: '–ü–∏—Ä–æ–≥ —Å –æ–ª–µ–Ω–∏–Ω–æ–π, –≥—Ä–∏–±–∞–º–∏ –∏ —Ç—Ä—é—Ñ–µ–ª–µ–º',
                price: 880,
                unit: '/550 –≥—Ä.',
                maxQty: 8,
                image: 'ü•ß',
                imageUrl: 'images/products/pirogi-sytnye/pirog-griby-trufel.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –æ–ª–µ–Ω–∏–Ω–∞ –≤/—Å, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã —Å–≤–µ–∂–∏–µ, —Ç—Ä—é—Ñ–µ–ª—å–Ω–∞—è –ø–∞—Å—Ç–∞, –º–∞—Å–ª–æ –æ–ª–∏–≤–∫–æ–≤–æ–µ, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ, –ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–ë–µ–ª–∫–∏ 13.02 –≥, –ñ–∏—Ä—ã 9.31 –≥, –£–≥–ª–µ–≤–æ–¥—ã 25.42 –≥',
                calories: '235.2 –∫–∫–∞–ª/921.4 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-gribnoy',
                name: '–ü–∏—Ä–æ–≥ —Å –≥—Ä–∏–±–Ω—ã–º –∂—é–ª—å–µ–Ω–æ–º',
                price: 964,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'ü•ß',
                imageUrl: 'images/products/pirogi-sytnye/pirog-gribnoy.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã —Å–≤–µ–∂–∏–µ, —Å–ª–∏–≤–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–ë–µ–ª–∫–∏ 8.8 –≥, –ñ–∏—Ä—ã 8.9 –≥, –£–≥–ª–µ–≤–æ–¥—ã 22.6 –≥',
                calories: '241.2 –∫–∫–∞–ª/1009.68 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-kuritsa-griby',
                name: '–ü–∏—Ä–æ–≥ —Å –∫—É—Ä–∏—Ü–µ–π –∏ –≥—Ä–∏–±–∞–º–∏',
                price: 980,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'ü•ß',
                imageUrl: 'images/products/pirogi-sytnye/pirog-kuritsa-griby.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã —Å–≤–µ–∂–∏–µ, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–ë–µ–ª–∫–∏ 11.4 –≥, –ñ–∏—Ä—ã 2.8 –≥, –£–≥–ª–µ–≤–æ–¥—ã 24.5 –≥',
                calories: '255.3 –∫–∫–∞–ª/1085 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-kartofel-griby',
                name: '–ü–∏—Ä–æ–≥ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º –∏ –≥—Ä–∏–±–∞–º–∏',
                price: 922,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'ü•ß',
                imageUrl: 'images/products/pirogi-sytnye/pirog-kartofel-griby.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã —Å–≤–µ–∂–∏–µ, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–ë–µ–ª–∫–∏ 4.6 –≥, –ñ–∏—Ä—ã 7.8 –≥, –£–≥–ª–µ–≤–æ–¥—ã 18.4 –≥',
                calories: '154.8 –∫–∫–∞–ª/904 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-krasnaya-ryba',
                name: '–ü–∏—Ä–æ–≥ —Å –∫—Ä–∞—Å–Ω–æ–π —Ä—ã–±–æ–π',
                price: 2460,
                unit: '/700 –≥—Ä.',
                maxQty: 4,
                image: 'ü•ß',
                imageUrl: 'images/products/pirogi-sytnye/pirog-krasnaya-ryba.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, —Å–µ–º–≥–∞ (–ª–æ—Å–æ—Å—å), —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π, —Å–ø–µ—Ü–∏–∏',
                nutrition: '–ë–µ–ª–∫–∏ 14.9 –≥, –ñ–∏—Ä—ã 13 –≥, –£–≥–ª–µ–≤–æ–¥—ã 24.6 –≥',
                calories: '274.7 –∫–∫–∞–ª/1150.4 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            }
        ],
        'pirogi-sladkie': [
            {
                id: 'pirog-yabloko-smorodina',
                name: '–ü–∏—Ä–æ–≥ —Å —è–±–ª–æ–∫–æ–º –∏ —á–µ—Ä–Ω–æ–π —Å–º–æ—Ä–æ–¥–∏–Ω–æ–π',
                price: 860,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'üßÅ',
                imageUrl: 'images/products/pirogi-sladkie/pirog-yabloko-smorodina.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, —è–±–ª–æ–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ, —á–µ—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ',
                nutrition: '–ë–µ–ª–∫–∏ 6.2 –≥, –ñ–∏—Ä—ã 5.4 –≥, –£–≥–ª–µ–≤–æ–¥—ã 52.8 –≥',
                calories: '251.4 –∫–∫–∞–ª/1163.3 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-vishnya',
                name: '–ü–∏—Ä–æ–≥ —Å –≤–∏—à–Ω–µ–π',
                price: 885,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'üßÅ',
                imageUrl: 'images/products/pirogi-sladkie/pirog-vishnya.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –≤–∏—à–Ω—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ',
                nutrition: '–ë–µ–ª–∫–∏ 6.5 –≥, –ñ–∏—Ä—ã 5.8 –≥, –£–≥–ª–µ–≤–æ–¥—ã 52.4 –≥',
                calories: '285.4 –∫–∫–∞–ª/1195.4 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-tvorog-klubnika',
                name: '–ü–∏—Ä–æ–≥ —Å —Ç–≤–æ—Ä–æ–≥–æ–º –∏ –∫–ª—É–±–Ω–∏–∫–æ–π',
                price: 874,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'üßÅ',
                imageUrl: 'images/products/pirogi-sladkie/pirog-tvorog-klubnika.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –∫–ª—É–±–Ω–∏–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, –∫—Ä–µ–º –≤–∞–Ω–∏–ª—å–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π –∑–∞–≤–∞—Ä–Ω–æ–π, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ',
                nutrition: '–ë–µ–ª–∫–∏ 8.3 –≥, –ñ–∏—Ä—ã 7.1 –≥, –£–≥–ª–µ–≤–æ–¥—ã 38.4 –≥',
                calories: '285.6 –∫–∫–∞–ª/1049.2 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-tvorog-chernika',
                name: '–ü–∏—Ä–æ–≥ —Å —Ç–≤–æ—Ä–æ–≥–æ–º –∏ —á–µ—Ä–Ω–∏–∫–æ–π',
                price: 878,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'üßÅ',
                imageUrl: 'images/products/pirogi-sladkie/pirog-tvorog-chernika.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, —á–µ—Ä–Ω–∏–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, –∫—Ä–µ–º –≤–∞–Ω–∏–ª—å–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π –∑–∞–≤–∞—Ä–Ω–æ–π —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ',
                nutrition: '–ë–µ–ª–∫–∏ 8.2 –≥, –ñ–∏—Ä—ã 6.8 –≥, –£–≥–ª–µ–≤–æ–¥—ã 37.8 –≥',
                calories: '258.6 –∫–∫–∞–ª/1049.2 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-tvorog-malina',
                name: '–ü–∏—Ä–æ–≥ —Å —Ç–≤–æ—Ä–æ–≥–æ–º –∏ –º–∞–ª–∏–Ω–æ–π',
                price: 880,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'üßÅ',
                imageUrl: 'images/products/pirogi-sladkie/pirog-tvorog-malina.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –º–∞–ª–∏–Ω–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, –∫—Ä–µ–º –≤–∞–Ω–∏–ª—å–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π –∑–∞–≤–∞—Ä–Ω–æ–π, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ',
                nutrition: '–ë–µ–ª–∫–∏ 8.4 –≥, –ñ–∏—Ä—ã 7.2 –≥, –£–≥–ª–µ–≤–æ–¥—ã 38.1 –≥',
                calories: '250.8 –∫–∫–∞–ª/1050 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-chernika',
                name: '–ü–∏—Ä–æ–≥ —Å —á–µ—Ä–Ω–∏–∫–æ–π',
                price: 885,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'üßÅ',
                imageUrl: 'images/products/pirogi-sladkie/pirog-chernika.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, —á–µ—Ä–Ω–∏–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ',
                nutrition: '–ë–µ–ª–∫–∏ 2.7 –≥, –ñ–∏—Ä—ã 9.9 –≥, –£–≥–ª–µ–≤–æ–¥—ã 33.4 –≥',
                calories: '245.8 –∫–∫–∞–ª/1026.18 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-yabloko-brusnika',
                name: '–ü–∏—Ä–æ–≥ —Å —è–±–ª–æ–∫–æ–º –∏ –±—Ä—É—Å–Ω–∏–∫–æ–π',
                price: 868,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'üßÅ',
                imageUrl: 'images/products/pirogi-sladkie/pirog-yabloko-brusnika.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, –±—Ä—É—Å–Ω–∏–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, —è–±–ª–æ–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ',
                nutrition: '–ë–µ–ª–∫–∏ 3.5 –≥, –ñ–∏—Ä—ã 4 –≥, –£–≥–ª–µ–≤–æ–¥—ã 35.7 –≥',
                calories: '192.3 –∫–∫–∞–ª/805.25 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            },
            {
                id: 'pirog-yabloko',
                name: '–ü–∏—Ä–æ–≥ —Å —è–±–ª–æ–∫–æ–º',
                price: 860,
                unit: '/700 –≥—Ä.',
                maxQty: 6,
                image: 'üßÅ',
                imageUrl: 'images/products/pirogi-sladkie/pirog-yabloko.jpg',
                composition: '–º—É–∫–∞ –≤/—Å, —è–±–ª–æ–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ, —Å–æ–ª—å, —Å–∞—Ö–∞—Ä, —è–π—Ü–æ, –≤–æ–¥–∞, –º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ, –¥—Ä–æ–∂–∂–∏ —Ö–ª–µ–±–æ–ø–µ–∫–∞—Ä–Ω—ã–µ',
                nutrition: '–ë–µ–ª–∫–∏ 9.2 –≥, –ñ–∏—Ä—ã 5.4 –≥, –£–≥–ª–µ–≤–æ–¥—ã 52.8 –≥',
                calories: '258.4 –∫–∫–∞–ª/1184.3 –∫–î–∂',
                storage: '6 –º–µ—Å—è—Ü–µ–≤',
                available: true
            }
        ],
        
        // üÜï –ù–û–í–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò (–ü–£–°–¢–´–ï –ú–ê–°–°–ò–í–´)
        'sousy-marinad': [],
        'napitki': [],
        'deserty': [],
        'konditerka': []
        // ‚úÖ –ì–û–¢–û–í–û! –í–°–ï 12 –ö–ê–¢–ï–ì–û–†–ò–ô, 49 –¢–û–í–ê–†–û–í!
    };
}

// üìû –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê –î–õ–Ø YOOKASSA
function formatPhoneForYooKassa(phone) {
    if (!phone) return '+79000000000';
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    let cleanPhone = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (cleanPhone.startsWith('8')) {
        cleanPhone = '7' + cleanPhone.substring(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º +
    if (cleanPhone.startsWith('7') && cleanPhone.length === 11) {
        return '+' + cleanPhone;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –∏–º–µ–µ—Ç 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º +7
    if (cleanPhone.startsWith('7') && cleanPhone.length === 10) {
        return '+7' + cleanPhone;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
    logger.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
    return '+79000000000';
}

// üí≥ –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ê –í YOOKASSA
async function createYooKassaPayment(orderId, amount, description, customerInfo) {
    try {
        const formattedPhone = formatPhoneForYooKassa(customerInfo.phone);
        logger.debug('üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –ÆKassa —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
            amount: amount.toFixed(2) + ' RUB',
            description: description,
            customer: customerInfo.customerName,
            originalPhone: customerInfo.phone,
            formattedPhone: formattedPhone
        });
        
        const paymentData = {
            amount: {
                value: amount.toFixed(2),
                currency: 'RUB'
            },
            confirmation: {
                type: 'redirect',
                return_url: `https://tundra-miniapp-production.up.railway.app/payment/success?order=${orderId}`
            },
            capture: true,
            description: description,
            receipt: {
                customer: {
                    email: customerInfo.email || 'customer@example.com',
                    phone: formattedPhone
                },
                items: [
                    {
                        description: description,
                        quantity: '1',
                        amount: {
                            value: amount.toFixed(2),
                            currency: 'RUB'
                        },
                        vat_code: 1, // –ù–î–° 20%
                        payment_mode: 'full_payment',
                        payment_subject: 'commodity'
                    }
                ]
            },
            metadata: {
                orderId: orderId,
                customerName: customerInfo.customerName || '–ö–ª–∏–µ–Ω—Ç',
                phone: customerInfo.phone || ''
            },
            // –î–æ–±–∞–≤–ª—è–µ–º webhook URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            webhook_url: 'https://tundra-miniapp-production.up.railway.app/webhook/yookassa'
        };
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        const idempotenceKey = crypto.randomUUID();
        logger.debug('üîë Idempotence Key:', idempotenceKey);
        logger.debug('üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è YooKassa:', JSON.stringify(paymentData, null, 2));
        
        const payment = await checkout.createPayment(paymentData, idempotenceKey);

        logger.info(`‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa: ${payment.id} –Ω–∞ —Å—É–º–º—É ${amount}‚ÇΩ`);
        logger.debug(`üîó URL –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${payment.confirmation?.confirmation_url}`);
        return payment;
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:', error.message);
        if (error.response) {
            logger.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ YooKassa:', {
                status: error.response.status,
                statusText: error.response.statusText,
                data: error.response.data
            });
        }
        throw error;
    }
}

// üî¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ß–ï–¢–ß–ò–ö–ê –ó–ê–ö–ê–ó–û–í –ò–ó –ë–î
async function initializeOrderCounter() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
        const result = await OrdersDB.getMaxOrderId();
        if (result && result.max_id) {
            orderCounter = parseInt(result.max_id);
            logger.info(`üî¢ –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${orderCounter}`);
        } else {
            orderCounter = 0;
            logger.info('üî¢ –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: 0 (–Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î)');
        }
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', error.message);
        orderCounter = 0; // Fallback
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –ü–ï–†–ï–ú–ï–©–ï–ù–´ –í–´–®–ï - –ü–ï–†–ï–î API –ú–ê–†–®–†–£–¢–ê–ú–ò

function updateOrderStatus(orderId, newStatus) {
    const order = orders.get(orderId);
    if (order) {
        order.status = newStatus;
        order.updatedAt = new Date();
        orders.set(orderId, order);
        return order;
    }
    return null;
}

async function getOrder(orderId) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
    let order = orders.get(orderId);
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (!order) {
        try {
            const dbOrder = await OrdersDB.getById(orderId);
            if (dbOrder) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º
                order = {
                    id: dbOrder.order_id,
                    status: dbOrder.status,
                    paymentStatus: dbOrder.payment_status,
                    totals: {
                        total: parseFloat(dbOrder.total_amount || 0)
                    },
                    items: (() => {
                        try {
                            return typeof dbOrder.items === 'string' ? JSON.parse(dbOrder.items) : (dbOrder.items || []);
                        } catch (e) {
                            logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ items –≤ getOrder:', e.message);
                            return [];
                        }
                    })(),
                    address: (() => {
                        try {
                            return typeof dbOrder.address === 'string' ? JSON.parse(dbOrder.address) : (dbOrder.address || {});
                        } catch (e) {
                            logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ address –≤ getOrder:', e.message);
                            return {};
                        }
                    })(),
                    phone: dbOrder.phone,
                    customerName: dbOrder.user_name,
                    createdAt: dbOrder.created_at,
                    payment_id: dbOrder.payment_id,
                    telegramUserId: dbOrder.user_id // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id —ç—Ç–æ telegramUserId
                };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                orders.set(orderId, order);
                logger.info(`üì¶ –ó–∞–∫–∞–∑ ${orderId} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î –≤ –ø–∞–º—è—Ç—å`);
            }
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑ –ë–î:`, error.message);
        }
    }
    
    return order;
}

function getAllOrders() {
    return Array.from(orders.values()).sort((a, b) => b.createdAt - a.createdAt);
}

// üî• –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–¢–ú–ï–ù–´ –ó–ê–ö–ê–ó–ê
async function autoExpireOrder(orderId) {
    let order = orders.get(orderId);
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (!order) {
        try {
            const dbOrder = await OrdersDB.getById(orderId);
            if (dbOrder) {
                order = {
                    id: dbOrder.order_id,
                    status: dbOrder.status,
                    paymentStatus: dbOrder.payment_status,
                    totals: {
                        total: parseFloat(dbOrder.total_amount || 0)
                    }
                };
            }
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑ –ë–î –¥–ª—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã:`, error.message);
        }
    }
    
    if (!order) {
        logger.warn(`‚ö†Ô∏è –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã`);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω
    if (order.paymentStatus === 'paid') {
        logger.debug(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –æ—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞`);
        clearOrderTimer(orderId);
        return;
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
    order.status = 'expired';
    order.paymentStatus = 'expired';
    order.updatedAt = new Date();
    orders.set(orderId, order);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
        await OrdersDB.update(orderId, { 
            status: 'expired',
            payment_status: 'expired'
        });
        logger.info(`üíæ –ó–∞–∫–∞–∑ ${orderId} –æ—Ç–º–µ–Ω–µ–Ω –≤ –ë–î`);
    } catch (dbError) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ ${orderId} –≤ –ë–î:`, dbError.message);
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    clearOrderTimer(orderId);
    
    logger.info(`‚è∞ –ó–∞–∫–∞–∑ ${orderId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)`);
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
function clearOrderTimer(orderId) {
    const timer = orderTimers.get(orderId);
    if (timer) {
        clearTimeout(timer);
        orderTimers.delete(orderId);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
function cancelOrderTimer(orderId) {
    clearOrderTimer(orderId);
    logger.debug(`üî• –¢–∞–π–º–µ—Ä –∑–∞–∫–∞–∑–∞ ${orderId} –æ—Ç–º–µ–Ω–µ–Ω (–∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω)`);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–ü–û–õ–ù–û–°–¢–¨–Æ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô)
const webRoot = path.join(__dirname, 'webapp');
console.log('üîç WebRoot –ø—É—Ç—å:', webRoot);
console.log('üîç –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ admin.html:', require('fs').existsSync(path.join(webRoot, 'admin.html')));
app.use(express.static(webRoot));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    if (req.path.startsWith('/api/')) {
        console.log('üîç API:', req.method, req.path);
    }
    next();
});

// CORS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(cors());

// üîß API –ú–ê–†–®–†–£–¢–´ - –ü–ï–†–ï–î –í–°–ï–ú–ò –û–°–¢–ê–õ–¨–ù–´–ú–ò
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
app.get('/api/admin/products', requireAdminAuth, async (req, res) => {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    res.set({
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
    });
    try {
        console.log('üîç API GET /api/admin/products: ENDPOINT –í–´–ó–í–ê–ù!');
        console.log('üîç API: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
        
        // üóÑÔ∏è –ó–ê–ì–†–£–ñ–ê–ï–ú –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
        let products = await AdminProductsDB.loadAll();
        
        console.log('üîç API: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î:', Object.keys(products).length);
        
        // üîÑ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–û–õ–¨–ö–û –ï–°–õ–ò –ë–î –ü–û–õ–ù–û–°–¢–¨–Æ –ü–£–°–¢–ê (–ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö)
        if (Object.keys(products).length === 0) {
            console.log('üîÑ –ë–î –ø—É—Å—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤...');
            logger.info('üîÑ –ë–î –ø—É—Å—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤...');
            
            // –ü–æ–ª–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ 49 —Ç–æ–≤–∞—Ä–æ–≤)
            const fullProducts = await loadFullProductCatalog();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
            try {
                await AdminProductsDB.saveAll(fullProducts);
                console.log('‚úÖ –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –ü–ï–†–í–´–ô –†–ê–ó');
                logger.info('‚úÖ –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –ü–ï–†–í–´–ô –†–ê–ó');
                products = fullProducts;
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                Object.entries(fullProducts).forEach(([categoryId, categoryProducts]) => {
                    adminProducts.set(categoryId, categoryProducts);
                });
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
                logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:', error.message);
                products = fullProducts; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ fallback
            }
        } else {
            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ë–î (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏');
            logger.info('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏');
        }
        
        res.json({ ok: true, products });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîß API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∞–¥–º–∏–Ω)
app.put('/api/admin/categories', requireAdminAuth, async (req, res) => {
    try {
        console.log('üîç API PUT /api/admin/categories: ENDPOINT –í–´–ó–í–ê–ù!');
        const { products, categories } = req.body;
        
        if (!products || !categories) {
            return res.status(400).json({ 
                ok: false, 
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' 
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await AdminProductsDB.saveAll(products);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î –ø–æ–∑–∂–µ)
        global.categoryNames = categories;
        
        logger.info('‚úÖ –¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ API');
        logger.info('üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);
        
        res.json({ 
            ok: true, 
            message: '–¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
            categoriesCount: Object.keys(categories).length,
            productsCount: Object.values(products).reduce((sum, cat) => sum + cat.length, 0)
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        res.status(500).json({ 
            ok: false, 
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + error.message 
        });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
app.put('/api/admin/products', (req, res, next) => {
    console.log('üîç API PUT /api/admin/products: –ú–ê–†–®–†–£–¢ –í–´–ó–í–ê–ù!');
    console.log('üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏:', req.headers);
    console.log('üîç Query:', req.query);
    next();
}, requireAdminAuth, validateAdminData, async (req, res) => {
    try {
        console.log('üîç API PUT /api/admin/products: ENDPOINT –í–´–ó–í–ê–ù!');
        console.log('üîç API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - ENDPOINT –í–´–ó–í–ê–ù!');
        console.log('üîç API: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
        const { products } = req.body;
        
        // üóÑÔ∏è –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
        await AdminProductsDB.saveAll(products);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        adminProducts.clear();
        Object.entries(products).forEach(([categoryId, categoryProducts]) => {
            adminProducts.set(categoryId, categoryProducts);
        });
        
        res.json({ ok: true, message: '–¢–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ' });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîß API –î–õ–Ø –û–°–ù–û–í–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø - –ü–ï–†–ï–î –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨–Æ
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø—É–±–ª–∏—á–Ω—ã–π API)
app.get('/api/products', async (req, res) => {
    try {
        console.log('üîç API: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.set({
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        });
        
        // üóÑÔ∏è –ó–ê–ì–†–£–ñ–ê–ï–ú –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
        let allProducts = await AdminProductsDB.loadAll();
        
        // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º
        if (Object.keys(allProducts).length === 0) {
            const fullProducts = await loadFullProductCatalog();
            await AdminProductsDB.saveAll(fullProducts);
            allProducts = fullProducts;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        const productsObj = {};
        let totalAvailable = 0;
        for (const [categoryId, categoryProducts] of Object.entries(allProducts)) {
            const availableProducts = categoryProducts.filter(product => product.available !== false);
            if (availableProducts.length > 0) {
                productsObj[categoryId] = availableProducts;
                totalAvailable += availableProducts.length;
            }
        }
        
        console.log(`üì¶ API: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${totalAvailable} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤`);
        
        res.json({ ok: true, products: productsObj });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîß API –î–õ–Ø –ó–ê–ö–ê–ó–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –ü–ï–†–ï–î SPA FALLBACK
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ –∑–∞–∫–∞–∑—ã –∫—Ä–æ–º–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)
app.get('/api/user-orders/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const orders = await OrdersDB.getByUserId(userId);
        
        const paidOrders = orders.filter(order => 
            order.payment_status === 'paid' || 
            order.status === 'completed' || 
            order.status === 'delivered' ||
            order.status === 'accepted' ||
            (order.payment_id && order.payment_id !== '')
        );
        
        const formattedOrders = paidOrders.map(order => ({
            order_id: order.order_id,
            amount: order.total_amount || order.totalAmount || 0,
            purchase_date: order.created_at || order.createdAt,
            items: order.items || [],
            status: order.status,
            payment_status: order.payment_status
        }));
        
        res.json({ ok: true, orders: formattedOrders });
    } catch (error) {
        res.status(500).json({ ok: false, error: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
app.get('/api/user-purchases/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const orders = await OrdersDB.getByUserId(userId);
        
        const paidOrders = orders.filter(order => 
            order.payment_status === 'paid' || 
            order.status === 'completed' || 
            order.status === 'delivered' ||
            order.status === 'accepted' ||
            (order.payment_id && order.payment_id !== '')
        );
        
        const totalPurchases = paidOrders.length;
        const totalSpent = paidOrders.reduce((sum, order) => {
            return sum + (order.total_amount || order.totalAmount || 0);
        }, 0);
        
        let loyaltyLevel, currentDiscount, nextLevelTarget, nextLevelProgress;
        
        if (totalSpent < 10000) {
            loyaltyLevel = 0;
            currentDiscount = 0;
            nextLevelTarget = 10000;
            nextLevelProgress = totalSpent;
        } else if (totalSpent < 25000) {
            loyaltyLevel = 1;
            currentDiscount = 3;
            nextLevelTarget = 25000;
            nextLevelProgress = totalSpent - 10000;
        } else if (totalSpent < 50000) {
            loyaltyLevel = 2;
            currentDiscount = 5;
            nextLevelTarget = 50000;
            nextLevelProgress = totalSpent - 25000;
        } else {
            loyaltyLevel = 3;
            currentDiscount = 10;
            nextLevelTarget = 50000;
            nextLevelProgress = 25000;
        }
        
        const stats = {
            totalPurchases,
            totalSpent,
            loyaltyLevel,
            currentDiscount,
            nextLevelTarget,
            nextLevelProgress
        };
        
        res.json({
            ok: true,
            purchases: paidOrders,
            stats: stats
        });
    } catch (error) {
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîß API –î–õ–Ø –î–ï–¢–ê–õ–ï–ô –ó–ê–ö–ê–ó–ê - –ü–ï–†–ï–î SPA FALLBACK
// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
app.get('/api/orders/:orderId', async (req, res) => {
    try {
        const { orderId } = req.params;
        logger.info('üîç API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ' + orderId);
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        logger.info('üîç API: –ò—â–µ–º –∑–∞–∫–∞–∑ ' + orderId + ' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        let order = await OrdersDB.getById(orderId);
        
        if (order) {
            logger.info('‚úÖ API: –ó–∞–∫–∞–∑ ' + orderId + ' –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', {
                status: order.status,
                payment_status: order.payment_status,
                total_amount: order.total_amount,
                payment_id: order.payment_id,
                items_type: typeof order.items,
                address_type: typeof order.address,
                items_value: order.items,
                address_value: order.address
            });
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –¥–∞–∂–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î
            if (order.payment_id && order.payment_status === 'pending') {
                logger.info('üîç API: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ' + orderId);
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ checkout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                    if (!checkout) {
                        logger.error('‚ùå API: checkout –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                        return;
                    }
                    const payment = await checkout.getPayment(order.payment_id);
                    logger.info('üîç API: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', {
                        id: payment.id,
                        status: payment.status,
                        paid: payment.paid
                    });
                    
                    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
                    if (payment.status === 'succeeded' && payment.paid) {
                        logger.info('‚úÖ API: –ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ' + orderId);
                        await OrdersDB.update(orderId, {
                            status: 'accepted',
                            payment_status: 'paid',
                            payment_id: payment.id,
                            total_amount: parseFloat(payment.amount.value)
                        });
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                        order.status = 'accepted';
                        order.payment_status = 'paid';
                        order.total_amount = parseFloat(payment.amount.value);
                        
                        logger.info('‚úÖ API: –ó–∞–∫–∞–∑ ' + orderId + ' –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram
                        try {
                            // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
                            let addressText = '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
                            try {
                                const addressData = typeof order.address === 'string' ? JSON.parse(order.address) : (order.address || {});
                                if (addressData.street && addressData.house) {
                                    addressText = [
                                        addressData.street,
                                        addressData.house,
                                        addressData.apartment && `–∫–≤. ${addressData.apartment}`,
                                        addressData.floor && `—ç—Ç. ${addressData.floor}`,
                                        addressData.entrance && `–ø–æ–¥. ${addressData.entrance}`,
                                        addressData.intercom && `–¥–æ–º–æ—Ñ–æ–Ω: ${addressData.intercom}`
                                    ].filter(Boolean).join(', ');
                                }
                            } catch (e) {
                                logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ –≤ API:', e.message);
                            }
                            
                            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
                            let orderItems = '–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                            let itemsArray = [];
                            
                            if (order.items) {
                                if (typeof order.items === 'string') {
                                    try {
                                        itemsArray = JSON.parse(order.items);
                                    } catch (e) {
                                        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ items –≤ API:', e.message);
                                        itemsArray = [];
                                    }
                                } else if (Array.isArray(order.items)) {
                                    itemsArray = order.items;
                                }
                            }
                            
                            if (Array.isArray(itemsArray) && itemsArray.length > 0) {
                                orderItems = itemsArray.map(item => 
                                    `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚ÇΩ`
                                ).join('\n');
                            }
                            
                            const message = 
                                `üí∞ <b>–ó–ê–ö–ê–ó –û–ü–õ–ê–ß–ï–ù!</b>\n\n` +
                                `üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> #${orderId}\n` +
                                `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.user_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                                `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                                `üí∞ <b>–°—É–º–º–∞:</b> ${parseFloat(payment.amount.value)}‚ÇΩ\n` +
                                `üìç <b>–ê–¥—Ä–µ—Å:</b> ${addressText}\n\n` +
                                `üì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n${orderItems}`;
                            
                            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
                            const inlineKeyboard = {
                                inline_keyboard: [
                                    [
                                        { text: 'üü° –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É', callback_data: `accept_${orderId}` },
                                        { text: 'üîµ –ì–æ—Ç–æ–≤–∏—Ç—Å—è', callback_data: `preparing_${orderId}` }
                                    ],
                                    [
                                        { text: 'üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ', callback_data: `delivering_${orderId}` },
                                        { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `completed_${orderId}` }
                                    ]
                                ]
                            };
                            
                            await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                                chat_id: config.TELEGRAM_ADMIN_CHAT_ID,
                                text: message,
                                parse_mode: 'HTML',
                                reply_markup: inlineKeyboard
                            });
                            
                            logger.info('‚úÖ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
                        } catch (telegramError) {
                            logger.error('‚ùå API: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', telegramError.message);
                        }
                    }
                } catch (error) {
                    logger.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error.message);
                }
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º
            order = {
                id: order.id,
                status: order.status,
                paymentStatus: order.payment_status,
                totals: {
                    total: parseFloat(order.total_amount || 0)
                },
                items: (() => {
                    try {
                        return typeof order.items === 'string' ? JSON.parse(order.items) : (order.items || []);
                    } catch (e) {
                        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ items –¥–ª—è –∑–∞–∫–∞–∑–∞ ' + orderId + ':', e.message);
                        return [];
                    }
                })(),
                address: (() => {
                    try {
                        return typeof order.address === 'string' ? JSON.parse(order.address) : (order.address || {});
                    } catch (e) {
                        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ address –¥–ª—è –∑–∞–∫–∞–∑–∞ ' + orderId + ':', e.message);
                        return {};
                    }
                })(),
                phone: order.phone,
                customerName: order.user_name,
                createdAt: order.created_at
            };
        } else {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏ (–¥–ª—è –æ—á–µ–Ω—å –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
            logger.info('üîç API: –ó–∞–∫–∞–∑ ' + orderId + ' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏...');
            order = getOrder(orderId);
            logger.info('üîç API: –ó–∞–∫–∞–∑ ' + orderId + ' –≤ –ø–∞–º—è—Ç–∏:', order ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
            
            // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏, –Ω–æ –Ω–µ –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
            if (order && order.paymentId) {
                logger.info('üîç API: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ ' + orderId);
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ checkout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                    if (!checkout) {
                        logger.error('‚ùå API: checkout –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                        return;
                    }
                    const payment = await checkout.getPayment(order.paymentId);
                    logger.info('üîç API: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', {
                        id: payment.id,
                        status: payment.status,
                        paid: payment.paid
                    });
                    
                    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
                    if (payment.status === 'succeeded' && payment.paid) {
                        logger.info('‚úÖ API: –ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ' + orderId);
                        await OrdersDB.update(orderId, {
                            status: 'accepted',
                            payment_status: 'paid',
                            payment_id: payment.id,
                            total_amount: parseFloat(payment.amount.value)
                        });
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –ø–∞–º—è—Ç–∏
                        order.status = 'accepted';
                        order.paymentStatus = 'paid';
                        orders.set(orderId, order);
                        
                        logger.info('‚úÖ API: –ó–∞–∫–∞–∑ ' + orderId + ' –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ÆKassa');
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                        try {
                            await sendTelegramNotification(order, 'paid');
                            logger.info('‚úÖ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
                        } catch (telegramError) {
                            logger.error('‚ùå API: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', telegramError.message);
                        }
                    }
                } catch (error) {
                    logger.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', error.message);
                }
            }
        }
        
        if (order) {
            logger.info('‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑ ' + orderId + ':', {
                status: order.status,
                paymentStatus: order.paymentStatus,
                total: order.totals?.total
            });
            res.json({ ok: true, order });
        } else {
            logger.warn('‚ùå API: –ó–∞–∫–∞–∑ ' + orderId + ' –Ω–µ –Ω–∞–π–¥–µ–Ω');
            res.status(404).json({ ok: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        logger.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîß –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–ö–ê–ó–ê–ú–ò - –ü–ï–†–ï–î API –ú–ê–†–®–†–£–¢–ê–ú–ò
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
async function createOrder(orderData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ orderCounter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (typeof orderCounter !== 'number' || isNaN(orderCounter)) {
        logger.warn('‚ö†Ô∏è orderCounter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
        await initializeOrderCounter();
    }
    
    orderCounter++;
    const orderId = orderCounter.toString();
    
    
    const order = {
        id: orderId,
        status: 'new', // new, accepted, preparing, delivering, completed, cancelled, expired
        paymentStatus: 'pending', // pending, paid, cancelled, expired
        createdAt: new Date(),
        updatedAt: new Date(),
        expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 –º–∏–Ω—É—Ç
        ...orderData
    };
    
    // üíæ –°–û–•–†–ê–ù–Ø–ï–ú –í –ü–ê–ú–Ø–¢–¨ (–≤ –ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ API-–º–∞—Ä—à—Ä—É—Ç–µ)
    orders.set(orderId, order);
    
    // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ê–ô–ú–ï–† –ê–í–¢–û–û–¢–ú–ï–ù–´ –ù–ê 10 –ú–ò–ù–£–¢
    const timer = setTimeout(async () => {
        await autoExpireOrder(orderId);
    }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
    
    orderTimers.set(orderId, timer);
    
    logger.debug('üî• –ó–∞–∫–∞–∑ ' + orderId + ' —Å–æ–∑–¥–∞–Ω. –ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.');
    
    return order;
}

// üì± –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ö–õ–ò–ï–ù–¢–ê–ú
async function sendClientNotification(order, status, statusText, statusEmoji) {
    if (!config.TELEGRAM_BOT_TOKEN || !order.telegramUserId) {
        logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ telegramUserId');
        return;
    }
    
    try {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        const items = (() => {
            try {
                return typeof order.items === 'string' ? JSON.parse(order.items) : (order.items || order.cartItems || []);
            } catch (e) {
                logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ items –≤ sendClientNotification:', e.message);
                return [];
            }
        })();
        
        const address = (() => {
            try {
                return typeof order.address === 'string' ? JSON.parse(order.address) : (order.address || {});
            } catch (e) {
                logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ address –≤ sendClientNotification:', e.message);
                return {};
            }
        })();
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        const updateTime = new Date().toLocaleString('ru-RU', { 
            timeZone: 'Europe/Moscow',
            hour: '2-digit', 
            minute: '2-digit',
            day: '2-digit',
            month: '2-digit'
        });
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        let clientMessage = '';
        let hasButtons = false;
        let inlineKeyboard = null;
        
        switch (status) {
            case 'accepted':
                clientMessage = `üü° *–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!*\n\n` +
                    `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${order.id}\n` +
                    `üë®‚Äçüç≥ –ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ —É–∂–µ –≥–æ—Ç–æ–≤—è—Ç –≤–∞—à –∑–∞–∫–∞–∑\n` +
                    `‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 30-45 –º–∏–Ω—É—Ç\n\n` +
                    `üìã *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n${items.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${(item.price * item.quantity)}‚ÇΩ`).join('\n')}\n\n` +
                    `üí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* ${order.totals?.total || 0}‚ÇΩ\n` +
                    `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${address.street || ''} ${address.house || ''}\n\n` +
                    `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTime}\n\n` +
                    `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üôè`;
                break;
                
            case 'preparing':
                clientMessage = `üîµ *–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è!*\n\n` +
                    `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${order.id}\n` +
                    `üë®‚Äçüç≥ –ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ –≥–æ—Ç–æ–≤—è—Ç –≤–∞—à–∏ –±–ª—é–¥–∞\n` +
                    `üî• –í—Å–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —Å–≤–µ–∂–∏–º –∏ –≥–æ—Ä—è—á–∏–º!\n\n` +
                    `üìã *–ß—Ç–æ –≥–æ—Ç–æ–≤–∏–º:*\n${items.map(item => `‚Ä¢ ${item.name} x${item.quantity}`).join('\n')}\n\n` +
                    `‚è±Ô∏è *–û—Å—Ç–∞–ª–æ—Å—å:* ~15-25 –º–∏–Ω—É—Ç\n` +
                    `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${address.street || ''} ${address.house || ''}\n\n` +
                    `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTime}\n\n` +
                    `–°–∫–æ—Ä–æ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ! üòã`;
                break;
                
            case 'delivering':
                clientMessage = `üöö *–í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏!*\n\n` +
                    `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${order.id}\n` +
                    `üõµ –ö—É—Ä—å–µ—Ä –≤—ã–µ—Ö–∞–ª –∫ –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º\n` +
                    `üì± –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∑–∞ 5-10 –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è\n\n` +
                    `üìã *–ö –≤–∞–º –≤–µ–∑—É—Ç:*\n${items.map(item => `‚Ä¢ ${item.name} x${item.quantity}`).join('\n')}\n\n` +
                    `üí∞ *–ö –æ–ø–ª–∞—Ç–µ:* –û–ü–õ–ê–ß–ï–ù–û ‚úÖ\n` +
                    `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${address.street || ''} ${address.house || ''}\n` +
                    `${address.apartment ? `üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${address.apartment}\n` : ''}` +
                    `${address.entrance ? `üö™ –ü–æ–¥—ä–µ–∑–¥: ${address.entrance}\n` : ''}` +
                    `${address.floor ? `üè¢ –≠—Ç–∞–∂: ${address.floor}\n` : ''}` +
                    `${address.intercom ? `üîî –î–æ–º–æ—Ñ–æ–Ω: ${address.intercom}\n` : ''}\n` +
                    `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTime}\n\n` +
                    `–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –∫—É—Ä—å–µ—Ä–∞! üìû`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å API)
                hasButtons = true;
                inlineKeyboard = {
                    inline_keyboard: [
                        [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: `${config.FRONTEND_URL}?order=${order.id}` }]
                    ]
                };
                break;
                
            case 'completed':
                // üî• –í–ê–ñ–ù–û: –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –û–ë–ù–û–í–õ–Ø–ï–ú –õ–û–Ø–õ–¨–ù–û–°–¢–¨
                await updateClientLoyalty(order);
                
                clientMessage = `‚úÖ *–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!*\n\n` +
                    `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${order.id}\n` +
                    `üéâ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n\n` +
                    `üìã *–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:*\n${items.map(item => `‚Ä¢ ${item.name} x${item.quantity}`).join('\n')}\n\n` +
                    `üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${order.totals?.total || 0}‚ÇΩ\n` +
                    `üî• *–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!*\n` +
                    `‚è∞ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${updateTime}\n\n` +
                    `üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!*\n` +
                    `‚≠ê –ë—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –≤—ã –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å\n\n` +
                    `üõí –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ Tundra Gourmet!`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                hasButtons = true;
                inlineKeyboard = {
                    inline_keyboard: [
                        [
                            { text: '‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `rate_${order.id}` },
                            { text: 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', url: config.FRONTEND_URL }
                        ]
                    ]
                };
                break;
                
            case 'cancelled':
                clientMessage = `‚ùå *–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω*\n\n` +
                    `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${order.id}\n` +
                    `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω\n\n` +
                    `üí∞ *–°—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É:* ${order.totals?.total || 0}‚ÇΩ\n` +
                    `üí≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n\n` +
                    `‚è∞ –û—Ç–º–µ–Ω–µ–Ω: ${updateTime}\n\n` +
                    `üôè –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞\n` +
                    `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                hasButtons = true;
                inlineKeyboard = {
                    inline_keyboard: [
                        [
                            { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/tundrasupport' },
                            { text: 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', url: config.FRONTEND_URL }
                        ]
                    ]
                };
                break;
                
            default:
                clientMessage = `üîî *–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è*\n\n` +
                    `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${order.id}\n` +
                    `üìç *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${statusEmoji} ${statusText}\n\n` +
                    `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTime}`;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        const messageData = {
            chat_id: order.telegramUserId,
            text: clientMessage,
            parse_mode: 'Markdown'
        };
        
        if (hasButtons && inlineKeyboard) {
            messageData.reply_markup = inlineKeyboard;
        }
        
        logger.info(`üì± –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–£: chat_id=${order.telegramUserId}, status=${status}`);
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, messageData);
        
        logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${status}`);
        
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:`, error.message);
        if (error.response) {
            logger.error(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Telegram:`, error.response.data);
        }
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ handleCallbackQuery
    }
}

// üî• –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –õ–û–Ø–õ–¨–ù–û–°–¢–ò –ö–õ–ò–ï–ù–¢–ê –ü–†–ò –ó–ê–í–ï–†–®–ï–ù–ò–ò –ó–ê–ö–ê–ó–ê
async function updateClientLoyalty(order) {
    try {
        if (!order.telegramUserId || !order.totals?.total) {
            logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å: –Ω–µ—Ç telegramUserId –∏–ª–∏ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞');
            return;
        }
        
        const userId = order.telegramUserId;
        const orderAmount = order.totals.total;
        
        logger.info(`üî• –õ–û–Ø–õ–¨–ù–û–°–¢–¨: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${orderAmount}‚ÇΩ`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —É—á—Ç–µ–Ω —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        const existingPurchase = await PurchaseHistoryDB.getByOrderId(order.id);
        if (existingPurchase) {
            logger.warn(`‚ö†Ô∏è –õ–û–Ø–õ–¨–ù–û–°–¢–¨: –ó–∞–∫–∞–∑ ${order.id} —É–∂–µ —É—á—Ç–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏`);
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ purchase_history –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        await PurchaseHistoryDB.add({
            orderId: order.id,
            userId: userId,
            amount: orderAmount,
            purchaseDate: new Date()
        });
        
        logger.info(`‚úÖ –õ–û–Ø–õ–¨–ù–û–°–¢–¨: –ó–∞–∫–∞–∑ ${order.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏`);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userStats = await PurchaseHistoryDB.getUserStats(userId);
        
        if (userStats) {
            logger.info(`üìä –õ–û–Ø–õ–¨–ù–û–°–¢–¨: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
                totalSpent: userStats.totalSpent,
                totalPurchases: userStats.totalPurchases,
                currentDiscount: userStats.currentDiscount
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            const loyaltyUpdateData = {
                action: 'update_loyalty',
                totalSpent: userStats.totalSpent,
                completedOrders: userStats.totalPurchases,
                currentDiscount: userStats.currentDiscount,
                orderAmount: orderAmount
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                chat_id: userId,
                text: `üî• *–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!*\n\n` +
                    `üí∞ –ó–∞ –∑–∞–∫–∞–∑ ‚Ññ${order.id}: +${orderAmount}‚ÇΩ\n` +
                    `üìä –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${userStats.totalSpent.toLocaleString()}‚ÇΩ\n` +
                    `üõí –ó–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${userStats.totalPurchases}\n` +
                    `üî• –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: ${userStats.currentDiscount}%\n\n` +
                    `_–î–∞–Ω–Ω—ã–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏_`,
                parse_mode: 'Markdown'
            });
            
            logger.info(`‚úÖ –õ–û–Ø–õ–¨–ù–û–°–¢–¨: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        }
        
    } catch (error) {
        logger.error('‚ùå –õ–û–Ø–õ–¨–ù–û–°–¢–¨: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error.message);
        // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    }
}

// üì± –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í TELEGRAM –ê–î–ú–ò–ù–ê–ú
async function sendTelegramNotification(order, type) {
    if (!config.TELEGRAM_BOT_TOKEN || !config.TELEGRAM_ADMIN_CHAT_ID) {
        logger.warn('‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return;
    }
    
    try {
        let message = '';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        let addressObj = {};
        let itemsArray = [];
        
        try {
            addressObj = typeof order.address === 'string' ? JSON.parse(order.address) : (order.address || {});
        } catch (e) {
            logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ address –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:', e.message);
        }
        
        try {
            itemsArray = typeof order.items === 'string' ? JSON.parse(order.items) : (order.items || []);
        } catch (e) {
            logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ items –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:', e.message);
        }
        
        if (type === 'new') {
            message = `üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n` +
                     `üìã –ù–æ–º–µ—Ä: #${order.id}\n` +
                     `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customerName || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                     `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                     `üí∞ –°—É–º–º–∞: ${order.totals?.total || 0}‚ÇΩ\n` +
                     `üìç –ê–¥—Ä–µ—Å: ${addressObj.street ? addressObj.street + ', ' + addressObj.house : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                     `üõí –¢–æ–≤–∞—Ä—ã: ${itemsArray.length > 0 ? itemsArray.map(item => `${item.name} x${item.quantity}`).join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`;
        } else if (type === 'paid') {
            message = `üí∞ <b>–ó–ê–ö–ê–ó –û–ü–õ–ê–ß–ï–ù!</b>\n` +
                     `üìã –ù–æ–º–µ—Ä: #${order.id}\n` +
                     `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customerName || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                     `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                     `üí∞ –°—É–º–º–∞: ${order.totals?.total || 0}‚ÇΩ\n` +
                     `üìç –ê–¥—Ä–µ—Å: ${addressObj.street ? addressObj.street + ', ' + addressObj.house : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                     `üõí –¢–æ–≤–∞—Ä—ã: ${itemsArray.length > 0 ? itemsArray.map(item => `${item.name} x${item.quantity}`).join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`;
        }
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: config.TELEGRAM_ADMIN_CHAT_ID,
            text: message,
            parse_mode: 'HTML'
        });
        
        logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error.message);
        throw error;
    }
}

// üîß MIDDLEWARE –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•
function validateOrderData(req, res, next) {
    const { cartItems, address, phone, customerName, deliveryZone } = req.body;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞:', {
        cartItems: cartItems?.length || 0,
        address: address ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
        phone: phone ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
        customerName: customerName ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
        deliveryZone: deliveryZone || '–Ω–µ—Ç'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!cartItems || !Array.isArray(cartItems) || cartItems.length === 0) {
        logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return res.status(400).json({
            ok: false,
            error: '–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'
        });
    }
    
    if (!address || !address.street || !address.house) {
        logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –ê–¥—Ä–µ—Å –Ω–µ–ø–æ–ª–Ω—ã–π:', address);
        return res.status(400).json({
            ok: false,
            error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'
        });
    }
    
    if (!phone || typeof phone !== 'string' || phone.trim().length < 10) {
        logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π:', phone);
        return res.status(400).json({
            ok: false,
            error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        });
    }
    
    if (!deliveryZone || !['moscow', 'mo'].includes(deliveryZone)) {
        logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è:', deliveryZone);
        return res.status(400).json({
            ok: false,
            error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏'
        });
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    for (const item of cartItems) {
        if (!item.productId || !item.name || !item.price || !item.quantity) {
            logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –¢–æ–≤–∞—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π:', item);
            return res.status(400).json({
                ok: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ'
            });
        }
        
        if (typeof item.price !== 'number' || item.price <= 0) {
            logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è:', item.price);
            return res.status(400).json({
                ok: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞'
            });
        }
        
        if (typeof item.quantity !== 'number' || item.quantity <= 0 || item.quantity > 100) {
            logger.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ:', item.quantity);
            return res.status(400).json({
                ok: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞'
            });
        }
    }
    
    logger.info('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    next();
}

// üîß API –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê - –ü–ï–†–ï–î SPA FALLBACK
// API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
app.post('/api/orders', validateOrderData, async (req, res) => {
    logger.info('üî• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞');
    let order = null;
    
    // –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –±–µ–∑ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
    
    try {
        const orderData = req.body;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = await createOrder(orderData);
        logger.info('‚úÖ –ó–∞–∫–∞–∑ #' + order.id + ' —Å–æ–∑–¥–∞–Ω, —Å—É–º–º–∞: ' + (order.totals?.total || 0) + '‚ÇΩ');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Telegram > —Ñ–æ—Ä–º–∞ > fallback)
        const telegramUser = orderData.telegramUser;
        
        const customerName = telegramUser?.full_name || 
                           telegramUser?.first_name || 
                           orderData.customerName || 
                           '–ö–ª–∏–µ–Ω—Ç';
        
        // üí≥ –°–û–ó–î–ê–ï–ú –ü–õ–ê–¢–ï–ñ –í YOOKASSA
        const totalAmount = order.totals?.total || 0;
        const description = '–ó–∞–∫–∞–∑ #' + order.id + ' - ' + customerName;
        
        if (!config.YOOKASSA_SHOP_ID || !config.YOOKASSA_SECRET_KEY) {
            logger.error('‚ùå –ÆKassa –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            throw new Error('–ÆKassa –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }
        
        if (!checkout) {
            logger.error('‚ùå –ÆKassa –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            throw new Error('–ÆKassa –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        const customerInfo = {
            customerName: customerName,
            phone: order.phone || '',
            telegramUsername: telegramUser?.username || null
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–∫–∞–∑
        order.customerName = customerInfo.customerName;
        order.telegramUsername = customerInfo.telegramUsername;
        order.telegramUserId = telegramUser?.id || null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        const payment = await createYooKassaPayment(order.id, totalAmount, description, customerInfo);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info('üí≥ –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:', {
            paymentId: payment.id,
            status: payment.status,
            confirmation: payment.confirmation,
            confirmationUrl: payment.confirmation?.confirmation_url
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∑–∞–∫–∞–∑–µ
        order.paymentId = payment.id;
        order.paymentUrl = payment.confirmation?.confirmation_url;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –ø–æ–ª—É—á–µ–Ω
        if (!order.paymentUrl) {
            logger.error('‚ùå PaymentUrl –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç –ÆKassa!', {
                payment: payment,
                confirmation: payment.confirmation
            });
        } else {
            logger.info('‚úÖ PaymentUrl –ø–æ–ª—É—á–µ–Ω:', order.paymentUrl);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –ø–∞–º—è—Ç–∏
        orders.set(order.id, order);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await OrdersDB.create({
            orderId: order.id,
            userId: order.telegramUserId || orderData.userId || 'unknown', // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegramUserId –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            userName: customerName,
            phone: order.phone,
            deliveryZone: orderData.deliveryZone || 'moscow',
            address: JSON.stringify(orderData.address),
            items: JSON.stringify(orderData.cartItems),
            totalAmount: totalAmount,
            status: 'new',
            paymentStatus: 'pending',
            paymentId: payment.id,
            paymentUrl: order.paymentUrl
        });
        
        logger.info('‚úÖ –ó–∞–∫–∞–∑ #' + order.id + ' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        logger.info('üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç—É
        res.json({
            ok: true,
            order: {
                id: order.id,
                status: order.status,
                paymentUrl: order.paymentUrl,
                totals: order.totals
            }
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.message);
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if (order && order.id) {
            orders.delete(order.id);
            logger.info('üóëÔ∏è –ó–∞–∫–∞–∑ #' + order.id + ' —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
        }
        
        res.status(500).json({
            ok: false,
            error: error.message
        });
    }
});

// üîê –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –ü–ï–†–í–´–ô –ú–ê–†–®–†–£–¢ (—Ç–æ–ª—å–∫–æ –¥–ª—è /admin, –ù–ï –¥–ª—è /api/admin/*)
app.get('/admin', (req, res) => {
    console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /admin');
    console.log('üîç –ü–æ–ª–Ω—ã–π URL:', req.url);
    console.log('üîç Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', req.query);
    const adminPassword = config.ADMIN_PASSWORD;
    const providedPassword = req.query.password;
    console.log('üîç –ü–∞—Ä–æ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:', adminPassword);
    console.log('üîç –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', providedPassword);
    
    if (providedPassword !== adminPassword) {
        res.status(401).send(`
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            background: linear-gradient(135deg, #0b5c56, #2C5530);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        .login-container {
            background: rgba(255,255,255,0.1);
            padding: 40px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            text-align: center;
            max-width: 400px;
            width: 90%;
        }
        .login-icon { font-size: 60px; margin-bottom: 20px; }
        .login-title { font-size: 28px; font-weight: 700; margin-bottom: 10px; }
        .login-subtitle { opacity: 0.9; margin-bottom: 30px; }
        .login-form { margin-top: 30px; }
        .login-input {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            margin-bottom: 20px;
            background: rgba(255,255,255,0.9);
            color: #2c3e50;
        }
        .login-btn {
            width: 100%;
            background: #D4A574;
            color: white;
            border: none;
            padding: 15px;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .login-btn:hover {
            background: #C1965F;
            transform: translateY(-2px);
        }
        .login-error {
            background: rgba(231, 76, 60, 0.2);
            border: 1px solid #e74c3c;
            color: #e74c3c;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
        }
        .login-help {
            margin-top: 30px;
            font-size: 14px;
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-icon">üîê</div>
        <h1 class="login-title">–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h1>
        <p class="login-subtitle">Tundra Gourmet</p>
        
        <div class="login-error">
            ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
        </div>
        
        <form class="login-form" method="GET">
            <input type="password" name="password" class="login-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required>
            <button type="submit" class="login-btn">–í–æ–π—Ç–∏</button>
        </form>
        
        <div class="login-help">
            üí° –ï—Å–ª–∏ –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
        </div>
    </div>
</body>
</html>
        `);
    } else {
        res.sendFile(path.join(webRoot, 'admin.html'));
    }
});

// Health check endpoints
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// üõ°Ô∏è –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
app.use((err, req, res, next) => {
    logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err.message);
    logger.error('‚ùå Stack trace:', err.stack);
    
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    const isDevelopment = process.env.NODE_ENV === 'development';
    
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: isDevelopment ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
        timestamp: new Date().toISOString()
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
    res.status(404).json({
        error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        path: req.path,
        timestamp: new Date().toISOString()
    });
});

app.get('/ping', (req, res) => {
    res.status(200).send('pong');
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ÆKassa
app.get('/test-yookassa', async (req, res) => {
    try {
        logger.info('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ÆKassa API...');
        
        if (!config.YOOKASSA_SHOP_ID || !config.YOOKASSA_SECRET_KEY) {
            return res.status(500).json({ 
                ok: false, 
                error: '–ö–ª—é—á–∏ –ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
                shopId: config.YOOKASSA_SHOP_ID,
                secretKey: config.YOOKASSA_SECRET_KEY ? '–ï–°–¢–¨' : '–ù–ï–¢'
            });
        }
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        const meResponse = await axios.get('https://api.yookassa.ru/v3/me', {
            auth: {
                username: config.YOOKASSA_SHOP_ID,
                password: config.YOOKASSA_SECRET_KEY
            },
            timeout: 10000
        });
        
        logger.info('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
        
        // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        const testPaymentData = {
            amount: {
                value: "1.00",
                currency: "RUB"
            },
            confirmation: {
                type: "redirect",
                return_url: "https://tundra-miniapp-production.up.railway.app"
            },
            description: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
            metadata: {
                test: "true"
            }
        };
        
        const testIdempotenceKey = crypto.randomUUID();
        const paymentResponse = await axios.post('https://api.yookassa.ru/v3/payments', testPaymentData, {
            headers: {
                'Content-Type': 'application/json',
                'Idempotence-Key': testIdempotenceKey
            },
            auth: {
                username: config.YOOKASSA_SHOP_ID,
                password: config.YOOKASSA_SECRET_KEY
            },
            timeout: 30000
        });
        
        logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', paymentResponse.data.id);
        
        res.json({
            ok: true,
            message: '–ÆKassa —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
            accountInfo: meResponse.data,
            testPayment: {
                id: paymentResponse.data.id,
                status: paymentResponse.data.status,
                confirmationUrl: paymentResponse.data.confirmation?.confirmation_url
            }
        });
        
    } catch (error) {
        logger.error('‚ùå –¢–µ—Å—Ç –ÆKassa –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error.message);
        
        res.status(500).json({
            ok: false,
            error: error.message,
            details: error.response?.data || null,
            status: error.response?.status || null,
            shopId: config.YOOKASSA_SHOP_ID,
            secretKeyLength: config.YOOKASSA_SECRET_KEY?.length || 0
        });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook'–∞
app.get('/test-webhook', (req, res) => {
    res.json({
        ok: true,
        message: 'Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω',
        webhookUrl: `${config.BASE_URL}/webhook/yookassa`,
        timestamp: new Date().toISOString()
    });
});

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook'–∞ (GET –∑–∞–ø—Ä–æ—Å)
app.get('/webhook/yookassa', (req, res) => {
    logger.info('üß™ –¢–ï–°–¢ WEBHOOK: –ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook');
    res.json({
        ok: true,
        message: 'Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç',
        method: 'GET',
        timestamp: new Date().toISOString()
    });
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
app.get('/debug/orders', async (req, res) => {
    try {
        logger.info('üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –ë–î
        const orders = await OrdersDB.getAll();
        
        logger.info('üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î:', orders.length);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formattedOrders = orders.map(order => ({
            id: order.order_id,
            status: order.status,
            payment_status: order.payment_status,
            payment_id: order.payment_id,
            total_amount: order.total_amount,
            created_at: order.created_at,
            user_name: order.user_name,
            phone: order.phone
        }));
        
        res.json({
            ok: true,
            count: orders.length,
            orders: formattedOrders,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error.message);
        res.json({ ok: false, error: error.message });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
app.get('/test-payment/:orderId', async (req, res) => {
    const { orderId } = req.params;
    logger.info('üß™ –¢–ï–°–¢: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', orderId);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
        const orderData = await OrdersDB.getById(orderId);
        if (!orderData) {
            return res.json({ ok: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        logger.info('üß™ –¢–ï–°–¢: –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', {
            id: orderData.order_id,
            status: orderData.status,
            payment_status: orderData.payment_status,
            payment_id: orderData.payment_id
        });
        
        if (!orderData.payment_id) {
            return res.json({ ok: false, error: '–£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç payment_id' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
        if (!checkout) {
            logger.error('‚ùå –¢–ï–°–¢: checkout –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return res.status(500).json({ error: 'checkout –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
        }
        const payment = await checkout.getPayment(orderData.payment_id);
        logger.info('üß™ –¢–ï–°–¢: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', {
            id: payment.id,
            status: payment.status,
            paid: payment.paid,
            amount: payment.amount
        });
        
        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        if (payment.status === 'succeeded' && payment.paid) {
            logger.info('üß™ –¢–ï–°–¢: –ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑');
            
            await OrdersDB.update(orderId, {
                status: 'accepted',
                payment_status: 'paid',
                payment_id: payment.id,
                total_amount: parseFloat(payment.amount.value)
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            try {
                const orderForNotification = {
                    id: orderId,
                    customerName: orderData.user_name,
                    phone: orderData.phone,
                    totals: { total: parseFloat(payment.amount.value) },
                    address: orderData.address,
                    items: orderData.items
                };
                
                await sendTelegramNotification(orderForNotification, 'paid');
                logger.info('üß™ –¢–ï–°–¢: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            } catch (telegramError) {
                logger.error('üß™ –¢–ï–°–¢: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', telegramError.message);
            }
            
            res.json({
                ok: true,
                message: '–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                order: {
                    id: orderId,
                    status: 'accepted',
                    paymentStatus: 'paid',
                    total: parseFloat(payment.amount.value)
                }
            });
        } else {
            res.json({
                ok: true,
                message: '–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω',
                payment: {
                    id: payment.id,
                    status: payment.status,
                    paid: payment.paid
                }
            });
        }
    } catch (error) {
        logger.error('üß™ –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞:', error.message);
        res.json({ ok: false, error: error.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
app.get('/payment/success', async (req, res) => {
    const { order } = req.query;
    logger.info('üéâ –í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:', order);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if (order) {
        try {
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞:', order);
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
            const orderData = await OrdersDB.getById(order);
            if (orderData && orderData.payment_id) {
                logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', orderData.payment_id);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
                if (!checkout) {
                    logger.error('‚ùå checkout –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                    return;
                }
                const payment = await checkout.getPayment(orderData.payment_id);
                logger.info('üîç –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', {
                    id: payment.id,
                    status: payment.status,
                    paid: payment.paid
                });
                
                // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
                if (payment.status === 'succeeded' && payment.paid) {
                    logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑:', order);
                    
                    await OrdersDB.update(order, {
                        status: 'accepted',
                        payment_status: 'paid',
                        payment_id: payment.id,
                        total_amount: parseFloat(payment.amount.value)
                    });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    try {
                        const orderForNotification = {
                            id: order,
                            customerName: orderData.user_name,
                            phone: orderData.phone,
                            totals: { total: parseFloat(payment.amount.value) },
                            address: orderData.address,
                            items: orderData.items
                        };
                        
                        await sendTelegramNotification(orderForNotification, 'paid');
                        logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
                    } catch (telegramError) {
                        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', telegramError.message);
                    }
                }
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error.message);
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    text-align: center; 
                    padding: 50px; 
                    background: #f5f5f5;
                }
                .success { 
                    background: white; 
                    padding: 30px; 
                    border-radius: 10px; 
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    max-width: 400px;
                    margin: 0 auto;
                }
                .icon { font-size: 48px; margin-bottom: 20px; }
                .title { font-size: 24px; margin-bottom: 10px; color: #2e7d32; }
                .message { color: #666; margin-bottom: 30px; }
                .button { 
                    background: #1976d2; 
                    color: white; 
                    padding: 12px 24px; 
                    border: none; 
                    border-radius: 5px; 
                    cursor: pointer; 
                    font-size: 16px;
                    text-decoration: none;
                    display: inline-block;
                }
                .button:hover { background: #1565c0; }
            </style>
        </head>
        <body>
            <div class="success">
                <div class="icon">‚úÖ</div>
                <div class="title">–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</div>
                <div class="message">–í–∞—à –∑–∞–∫–∞–∑ #${order || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} –æ–ø–ª–∞—á–µ–Ω</div>
                <button onclick="goBack()" class="button">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω</button>
            </div>
            <script>
                function goBack() {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º order
                    const appUrl = 'https://tundra-miniapp-production.up.railway.app/?order=${order || ''}';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram WebApp
                    if (window.Telegram && window.Telegram.WebApp) {
                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º order
                        window.Telegram.WebApp.openLink(appUrl);
                    } else {
                        // –û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        window.location.href = appUrl;
                    }
                }
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(goBack, 3000);
            </script>
        </body>
        </html>
    `);
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook'–∞
app.get('/test-webhook', (req, res) => {
    res.json({
        ok: true,
        message: 'Webhook –¥–æ—Å—Ç—É–ø–µ–Ω',
        url: 'https://tundra-miniapp-production.up.railway.app/webhook/yookassa',
        timestamp: new Date().toISOString()
    });
});

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa
app.post('/webhook/yookassa', express.raw({type: 'application/json'}), async (req, res) => {
    try {
        logger.info('üîî WEBHOOK: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆKassa');
        logger.info('üîî WEBHOOK: IP –∞–¥—Ä–µ—Å:', req.ip);
        logger.info('üîî WEBHOOK: User-Agent:', req.headers['user-agent']);
        logger.info('üîî WEBHOOK: Content-Type:', req.headers['content-type']);
        
        let notification;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ä—Å–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if (typeof req.body === 'string') {
            notification = JSON.parse(req.body);
        } else if (Buffer.isBuffer(req.body)) {
            notification = JSON.parse(req.body.toString());
        } else if (typeof req.body === 'object' && req.body !== null) {
            // –ï—Å–ª–∏ —É–∂–µ –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            notification = req.body;
        } else {
            throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${typeof req.body}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (YooKassa –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç type: 'notification' –∏ event: 'payment.succeeded')
        if (notification.type === 'notification' && notification.event === 'payment.succeeded') {
            const payment = notification.object;
            logger.info('‚úÖ WEBHOOK: –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω:', payment.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (payment.metadata && payment.metadata.orderId) {
                const orderId = payment.metadata.orderId;
                logger.info('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:', orderId);
                
                try {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ò —Å—É–º–º—É
                    const paymentAmount = parseFloat(payment.amount.value);
                    
                    // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–£–ú–ú–´
                    logger.info(`üí∞ WEBHOOK: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç YooKassa:`, {
                        raw_amount: payment.amount,
                        value: payment.amount.value,
                        currency: payment.amount.currency,
                        parsed_amount: paymentAmount,
                        type: typeof paymentAmount
                    });
                    
                    await OrdersDB.update(orderId, { 
                        status: 'accepted',
                        payment_status: 'paid',
                        payment_id: payment.id,
                        total_amount: paymentAmount
                    });
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
                    const order = await OrdersDB.getById(orderId);
                    if (order) {
                        logger.info(`üîç WEBHOOK: –ó–∞–∫–∞–∑ ${orderId} –∏–∑ –ë–î:`, {
                            user_id: order.user_id,
                            user_name: order.user_name,
                            total_amount: order.total_amount
                        });
                        
                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ purchase_history –¥–ª—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
                        logger.info(`üìù WEBHOOK: –ü—Ä–æ–≤–µ—Ä—è–µ–º user_id –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, {
                            user_id: order.user_id,
                            user_id_type: typeof order.user_id,
                            user_id_length: order.user_id?.length
                        });
                        
                        if (order.user_id && order.user_id !== 'unknown') {
                            logger.info(`üìù WEBHOOK: –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ purchase_history –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${order.user_id}`);
                            
                            try {
                                // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
                                logger.info('=== YOOKASSA WEBHOOK DEBUG ===');
                                logger.info('üìù WEBHOOK: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', JSON.stringify(payment, null, 2));
                                logger.info('üìù WEBHOOK: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ amount:', JSON.stringify(payment.amount, null, 2));
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Å—É–º–º–µ
                                const amountPath = payment.amount?.value ?? 'PATH_NOT_FOUND';
                                logger.info(`üìù WEBHOOK: Amount path check: ${amountPath}`);
                                
                                // –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
                                const totalAmount = parseFloat(amountPath);
                                logger.info(`üìù WEBHOOK: Before save to DB - amount: ${totalAmount}`);
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –≤–∞–ª–∏–¥–Ω–∞
                                if (isNaN(totalAmount) || totalAmount <= 0) {
                                    logger.error(`‚ùå WEBHOOK: –ù–ï–í–ï–†–ù–ê–Ø –°–£–ú–ú–ê! –°—ã—Ä–∞—è: ${amountPath}, –ü–∞—Ä—Å–∏–Ω–≥: ${totalAmount}`);
                                }
                                logger.info('============================');
                                
                                const purchaseRecord = await PurchaseHistoryDB.create({
                                    order_id: orderId,
                                    user_id: order.user_id,
                                    customer_name: order.user_name || '–ö–ª–∏–µ–Ω—Ç',
                                    phone: order.phone || '',
                                    total_amount: order.total_amount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∏–∑ –∑–∞–∫–∞–∑–∞, –∞ –Ω–µ –∏–∑ –ø–ª–∞—Ç–µ–∂–∞
                                    items_count: Array.isArray(order.items) ? order.items.length : JSON.parse(order.items || '[]').length,
                                    items_data: typeof order.items === 'string' ? order.items : JSON.stringify(order.items),
                                    payment_id: payment.id,
                                    delivery_zone: order.delivery_zone || 'moscow',
                                    address_data: order.address || '{}'
                                });
                                
                                logger.info('‚úÖ WEBHOOK: –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫:', {
                                    id: purchaseRecord.id,
                                    user_id: purchaseRecord.user_id,
                                    amount_in_db: purchaseRecord.amount,
                                    total_amount_from_order: order.total_amount,
                                    payment_amount: totalAmount
                                });
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                                if (purchaseRecord.amount !== order.total_amount) {
                                    logger.error(`‚ùå WEBHOOK: –°–£–ú–ú–ê –ù–ï –°–û–í–ü–ê–î–ê–ï–¢! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${order.total_amount}, –í –ë–î: ${purchaseRecord.amount}`);
                                }
                            } catch (purchaseError) {
                                logger.error('‚ùå WEBHOOK: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ purchase_history:', purchaseError.message);
                            }
                        } else {
                            logger.warn(`‚ö†Ô∏è WEBHOOK: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ purchase_history - user_id: ${order.user_id}`);
                        }
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç)
                        logger.debug('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –≤ webhook:', {
                            hasToken: !!config.TELEGRAM_BOT_TOKEN,
                            tokenLength: config.TELEGRAM_BOT_TOKEN?.length || 0,
                            hasChatId: !!config.TELEGRAM_ADMIN_CHAT_ID,
                            chatId: config.TELEGRAM_ADMIN_CHAT_ID
                        });
                        
                        if (config.TELEGRAM_BOT_TOKEN && config.TELEGRAM_ADMIN_CHAT_ID) {
                            try {
                                // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
                                const addressData = typeof order.address === 'string' ? JSON.parse(order.address) : order.address;
                                
                                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                                const fullAddress = [
                                    addressData.street,
                                    addressData.house,
                                    addressData.apartment && `–∫–≤. ${addressData.apartment}`,
                                    addressData.floor && `—ç—Ç. ${addressData.floor}`,
                                    addressData.entrance && `–ø–æ–¥. ${addressData.entrance}`,
                                    addressData.intercom && `–¥–æ–º–æ—Ñ–æ–Ω: ${addressData.intercom}`
                                ].filter(Boolean).join(', ');
                                
                                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
                                let orderItems = '–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                                let itemsArray = [];
                                
                                if (order.items) {
                                    if (typeof order.items === 'string') {
                                        try {
                                            itemsArray = JSON.parse(order.items);
                                        } catch (e) {
                                            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ order.items:', e.message);
                                            itemsArray = [];
                                        }
                                    } else if (Array.isArray(order.items)) {
                                        itemsArray = order.items;
                                    }
                                }
                                
                                if (Array.isArray(itemsArray) && itemsArray.length > 0) {
                                    orderItems = itemsArray.map(item => 
                                        `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚ÇΩ`
                                    ).join('\n');
                                }
                                
                                const message = 
                                    `üéâ <b>–ó–ê–ö–ê–ó –û–ü–õ–ê–ß–ï–ù!</b>\n` +
                                    `üìã –ù–æ–º–µ—Ä: #${orderId}\n` +
                                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.user_name}\n` +
                                    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}\n` +
                                    `üí∞ –°—É–º–º–∞: ${payment.amount.value} ${payment.amount.currency}\n` +
                                    `üí≥ ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id}\n` +
                                    `üìç –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.delivery_zone}\n` +
                                    `üè† –ê–¥—Ä–µ—Å: ${fullAddress}\n` +
                                    `üì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n${orderItems}` +
                                    (order.comment ? `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}` : '');
                                
                                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
                                const inlineKeyboard = {
                                    inline_keyboard: [
                                        [
                                            { text: 'üü° –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É', callback_data: `accept_${orderId}` },
                                            { text: 'üîµ –ì–æ—Ç–æ–≤–∏—Ç—Å—è', callback_data: `preparing_${orderId}` }
                                        ],
                                        [
                                            { text: 'üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ', callback_data: `delivering_${orderId}` },
                                            { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `completed_${orderId}` }
                                        ]
                                    ]
                                };
                                
                                await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                                    chat_id: config.TELEGRAM_ADMIN_CHAT_ID,
                                    text: message,
                                    parse_mode: 'HTML',
                                    reply_markup: inlineKeyboard
                                });
                                
                                logger.info('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—á–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
                            } catch (telegramError) {
                                logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError.message);
                                if (telegramError.response?.status === 401) {
                                    logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
                                } else if (telegramError.response?.status === 400) {
                                    logger.error('‚ùå –û—à–∏–±–∫–∞ Telegram: –Ω–µ–≤–µ—Ä–Ω—ã–π Chat ID');
                                }
                            }
                        } else {
                            logger.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                            logger.warn(`   –¢–æ–∫–µ–Ω: ${config.TELEGRAM_BOT_TOKEN ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
                            logger.warn(`   Chat ID: ${config.TELEGRAM_ADMIN_CHAT_ID ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
                        }
                    }
                } catch (dbError) {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:', dbError.message);
                }
            }
        } else if (notification.type === 'notification' && notification.event === 'payment.canceled') {
            const payment = notification.object;
            logger.info('‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω:', payment.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            if (payment.metadata && payment.metadata.orderId) {
                await OrdersDB.update(payment.metadata.orderId, { 
                    status: 'canceled',
                    paymentId: payment.id
                });
                logger.info('üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω"');
            }
        } else {
            logger.warn('‚ö†Ô∏è WEBHOOK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
                type: notification.type,
                event: notification.event,
                fullNotification: notification
            });
        }
        
        logger.info('‚úÖ WEBHOOK: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        logger.info('‚úÖ WEBHOOK: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç 200 OK');
        res.status(200).send('OK');
    } catch (error) {
        logger.error('‚ùå WEBHOOK: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error.message);
        logger.error('‚ùå WEBHOOK: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        logger.error('‚ùå WEBHOOK: req.body —Ç–∏–ø:', typeof req.body);
        logger.error('‚ùå WEBHOOK: req.body —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', req.body);
        res.status(500).send('Error');
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
app.get('/test-webhook', (req, res) => {
    logger.info('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ webhook endpoint');
    res.json({
        message: 'Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç',
        timestamp: new Date().toISOString(),
        url: '/webhook/yookassa'
    });
});

// API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ü–ï–†–ï–ú–ï–©–ï–ù –í–´–®–ï - –ü–ï–†–ï–î SPA FALLBACK


// üîÑ –§–£–ù–ö–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –û–ü–õ–ê–ß–ï–ù–ù–´–• –ó–ê–ö–ê–ó–û–í –° –õ–û–Ø–õ–¨–ù–û–°–¢–¨–Æ
async function syncPaidOrdersToLoyalty(userId) {
    try {
        console.log('üîç –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + userId);
        logger.info('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        const orders = await OrdersDB.getByUserId(userId);
        logger.info('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ù–∞–π–¥–µ–Ω–æ ' + orders.length + ' –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î');
        console.log('üîç –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –í—Å–µ –∑–∞–∫–∞–∑—ã:', orders.map(o => ({
            order_id: o.order_id,
            payment_status: o.payment_status,
            status: o.status,
            payment_id: o.payment_id,
            total_amount: o.total_amount
        })));
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ purchase_history
        const existingPurchases = await PurchaseHistoryDB.getByUserId(userId);
        const existingOrderIds = new Set(existingPurchases.map(p => p.order_id));
        logger.info('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –£–∂–µ –µ—Å—Ç—å ' + existingOrderIds.size + ' –∑–∞–ø–∏—Å–µ–π –≤ purchase_history');
        
        let addedCount = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
        for (const order of orders) {
            console.log('üîç –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ó–∞–∫–∞–∑ ' + order.order_id + ':', {
                payment_status: order.payment_status,
                status: order.status,
                total_amount: order.total_amount
            });
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ purchase_history
            if (existingOrderIds.has(order.order_id)) {
                console.log('üîç –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ó–∞–∫–∞–∑ ' + order.order_id + ' —É–∂–µ –µ—Å—Ç—å –≤ purchase_history');
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è)
            const isPaid = order.payment_status === 'paid' || 
                          order.status === 'completed' || 
                          order.status === 'delivered' ||
                          order.status === 'accepted' ||
                          (order.payment_id && order.payment_id !== '');
            
            if (isPaid) {
                logger.info('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ ' + order.order_id + ' –≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å');
                logger.info('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', {
                    order_id: order.order_id,
                    total_amount: order.total_amount,
                    totalAmount: order.totalAmount,
                    payment_status: order.payment_status,
                    status: order.status
                });
                
                try {
                    await PurchaseHistoryDB.create({
                        order_id: order.order_id,
                        user_id: order.user_id,
                        customer_name: order.user_name || '–ö–ª–∏–µ–Ω—Ç',
                        phone: order.phone || '',
                        total_amount: order.total_amount || order.totalAmount || 0,
                        items_count: Array.isArray(order.items) ? order.items.length : JSON.parse(order.items || '[]').length,
                        items_data: typeof order.items === 'string' ? order.items : JSON.stringify(order.items),
                        payment_id: order.payment_id || '',
                        delivery_zone: order.delivery_zone || 'moscow',
                        address_data: order.address || '{}'
                    });
                    
                    addedCount++;
                    logger.info('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ó–∞–∫–∞–∑ ' + order.order_id + ' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å');
                } catch (error) {
                    logger.error('‚ùå –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ' + order.order_id + ':', error.message);
                }
            } else {
                console.log('üîç –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ó–∞–∫–∞–∑ ' + order.order_id + ' –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - payment_status: ' + order.payment_status + ', status: ' + order.status + ', payment_id: ' + order.payment_id);
            }
        }
        
        logger.info('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–æ ' + addedCount + ' –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å');
        console.log('üîç –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ö–û–ù–ï–¶ - –¥–æ–±–∞–≤–ª–µ–Ω–æ ' + addedCount + ' –∑–∞–ø–∏—Å–µ–π');
        return addedCount;
    } catch (error) {
        logger.error('‚ùå –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error.message);
        console.log('üîç –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–®–ò–ë–ö–ê - ' + error.message);
        return 0;
    }
}

// üîç ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¢–ê–ë–õ–ò–¶–´ PURCHASE_HISTORY
app.get('/api/check-db', async (req, res) => {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const purchases = await PurchaseHistoryDB.getByUserId('7303614654');
        
        logger.info('üîç –ü–†–û–í–ï–†–ö–ê –ë–î: –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ PurchaseHistoryDB:', purchases);
        
        res.json({
            ok: true,
            count: purchases.length,
            records: purchases.slice(0, 5).map(row => ({
                order_id: row.order_id,
                totalAmount: row.totalAmount,
                purchase_date: row.purchase_date
            }))
        });
    } catch (error) {
        logger.error('‚ùå –ü–†–û–í–ï–†–ö–ê –ë–î: –û—à–∏–±–∫–∞:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîç ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ù–ê–°–¢–†–û–ï–ö WEBHOOK
app.get('/api/check-webhook', async (req, res) => {
    try {
        const webhookUrl = `${config.BASE_URL}/webhook/yookassa`;
        
        res.json({
            ok: true,
            webhookUrl,
            message: `Webhook URL –¥–ª—è YooKassa: ${webhookUrl}`,
            instructions: [
                '1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç YooKassa',
                '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ‚Üí "Webhook"',
                `3. –£–∫–∞–∂–∏—Ç–µ URL: ${webhookUrl}`,
                '4. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è: payment.succeeded, payment.canceled',
                '5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
            ]
        });
    } catch (error) {
        logger.error('‚ùå –ü–†–û–í–ï–†–ö–ê WEBHOOK: –û—à–∏–±–∫–∞:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üóëÔ∏è ENDPOINT –î–õ–Ø –û–ß–ò–°–¢–ö–ò –ë–î (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê!)
app.post('/api/admin/clear-database', async (req, res) => {
    try {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        const { adminKey } = req.body;
        if (adminKey !== 'meatbot_admin_2024') {
            return res.status(403).json({ ok: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }
        
        logger.info('üóëÔ∏è –ê–î–ú–ò–ù: –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ (–ù–ï —Ç–æ–≤–∞—Ä—ã!)
        const tables = ['purchase_history', 'orders'];
        const results = {};
        
        for (const table of tables) {
            const result = await pool.query(`DELETE FROM ${table}`);
            results[table] = result.rowCount;
            logger.info(`üóëÔ∏è –ê–î–ú–ò–ù: –¢–∞–±–ª–∏—Ü–∞ ${table} –æ—á–∏—â–µ–Ω–∞: ${result.rowCount} –∑–∞–ø–∏—Å–µ–π`);
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        await pool.query("SELECT setval('orders_id_seq', 1, false)");
        await pool.query("SELECT setval('purchase_history_id_seq', 1, false)");
        
        logger.info('üóëÔ∏è –ê–î–ú–ò–ù: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
        res.json({
            ok: true,
            message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞',
            deleted: results
        });
        
    } catch (error) {
        logger.error('‚ùå –ê–î–ú–ò–ù: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîç ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò WEBHOOK –õ–û–ì–û–í
app.get('/api/webhook-logs', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ purchase_history
        const purchases = await PurchaseHistoryDB.getByUserId('7303614654');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        const orders = await OrdersDB.getByUserId('7303614654');
        const paidOrders = orders.filter(order => order.payment_status === 'paid' || order.status === 'completed');
        
        // üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–£–ú–ú–´ –í PURCHASE_HISTORY
        const totalSpent = purchases.reduce((sum, purchase) => sum + (purchase.totalAmount || 0), 0);
        const totalSpentFromAmount = purchases.reduce((sum, purchase) => sum + (purchase.amount || 0), 0);
        
        res.json({
            ok: true,
            webhookUrl: `${config.BASE_URL}/webhook/yookassa`,
            purchaseHistoryCount: purchases.length,
            totalOrders: orders.length,
            paidOrders: paidOrders.length,
            totalSpentFromTotalAmount: totalSpent,
            totalSpentFromAmount: totalSpentFromAmount,
            purchaseHistoryDetails: purchases.slice(0, 5).map(p => ({
                order_id: p.order_id,
                totalAmount: p.totalAmount,
                amount: p.amount,
                purchase_date: p.purchase_date
            })),
            paidOrdersList: paidOrders.map(order => ({
                order_id: order.order_id,
                payment_status: order.payment_status,
                status: order.status,
                total_amount: order.total_amount,
                created_at: order.created_at
            })),
            message: purchases.length === 0 ? '‚ùå Webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞–ø–∏—Å–µ–π –≤ purchase_history –Ω–µ—Ç.' : '‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å.'
        });
    } catch (error) {
        logger.error('‚ùå –ü–†–û–í–ï–†–ö–ê WEBHOOK –õ–û–ì–û–í: –û—à–∏–±–∫–∞:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîÑ ENDPOINT –î–õ–Ø –†–£–ß–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –õ–û–Ø–õ–¨–ù–û–°–¢–ò
app.post('/api/sync-loyalty/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        logger.info(`üîÑ –†–£–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        const addedCount = await syncPaidOrdersToLoyalty(userId);
        
        res.json({
            ok: true,
            userId,
            addedCount,
            message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å`
        });
    } catch (error) {
        logger.error('‚ùå –†–£–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—à–∏–±–∫–∞:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–ê–ù–ù–´–• –í –ë–î
app.get('/debug-purchases/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        logger.info(`üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const purchases = await PurchaseHistoryDB.getByUserId(userId);
        
        logger.info(`üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ ${purchases.length} –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ PurchaseHistoryDB`);
        purchases.slice(0, 5).forEach((row, index) => {
            logger.info(`üîç DEBUG: –ó–∞–ø–∏—Å—å ${index + 1}:`, {
                order_id: row.order_id,
                totalAmount: row.totalAmount,
                purchase_date: row.purchase_date,
                payment_id: row.payment_id
            });
        });
        
        res.json({
            ok: true,
            userId,
            count: purchases.length,
            records: purchases.slice(0, 5)
        });
    } catch (error) {
        logger.error('‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});


// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
app.get('/api/purchases/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        logger.info(`üîç API: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        
        // üîÑ –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–ú –ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –û–ü–õ–ê–ß–ï–ù–ù–´–ï –ó–ê–ö–ê–ó–´
        await syncPaidOrdersToLoyalty(userId);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏–∑ –ë–î
        const purchases = await PurchaseHistoryDB.getByUserId(userId);
        logger.info(`üîç API: –ù–∞–π–¥–µ–Ω–æ ${purchases.length} –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫
        if (purchases.length > 0) {
            logger.info(`üîç API: –î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫:`, purchases.map(p => ({
                order_id: p.order_id,
                totalAmount: p.totalAmount,
                amount: p.amount,
                purchase_date: p.purchase_date
            })));
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        const totalPurchases = purchases.length;
        const totalSpent = purchases.reduce((sum, purchase) => {
            const amount = purchase.totalAmount || purchase.amount || 0;
            logger.info(`üí∞ API: –ü–æ–∫—É–ø–∫–∞ ${purchase.order_id}: totalAmount=${purchase.totalAmount}, amount=${purchase.amount}, –∏—Å–ø–æ–ª—å–∑—É–µ–º=${amount}`);
            return sum + amount;
        }, 0);
        logger.info(`üí∞ API: –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–∞: ${totalSpent}‚ÇΩ, –ø–æ–∫—É–ø–æ–∫: ${totalPurchases}`);
        
        // üèÜ –õ–û–ì–ò–ö–ê –ö–ê–†–¢–´ –õ–û–Ø–õ–¨–ù–û–°–¢–ò –ü–û –£–†–û–í–ù–Ø–ú
        let loyaltyLevel, currentDiscount, nextLevelTarget, nextLevelProgress;
        
        if (totalSpent < 10000) {
            // üíú 0‚ÇΩ - 9,999‚ÇΩ ‚Üí 0% —Å–∫–∏–¥–∫–∞
            loyaltyLevel = 0;
            currentDiscount = 0;
            nextLevelTarget = 10000;
            nextLevelProgress = (totalSpent / 10000) * 100;
        } else if (totalSpent < 25000) {
            // ‚≠ê 10,000‚ÇΩ - 24,999‚ÇΩ ‚Üí 3% —Å–∫–∏–¥–∫–∞
            loyaltyLevel = 1;
            currentDiscount = 3;
            nextLevelTarget = 25000;
            nextLevelProgress = ((totalSpent - 10000) / (25000 - 10000)) * 100;
        } else if (totalSpent < 50000) {
            // ‚≠ê 25,000‚ÇΩ - 49,999‚ÇΩ ‚Üí 5% —Å–∫–∏–¥–∫–∞
            loyaltyLevel = 2;
            currentDiscount = 5;
            nextLevelTarget = 50000;
            nextLevelProgress = ((totalSpent - 25000) / (50000 - 25000)) * 100;
        } else {
            // ‚≠ê 50,000‚ÇΩ+ ‚Üí 10% —Å–∫–∏–¥–∫–∞
            loyaltyLevel = 3;
            currentDiscount = 10;
            nextLevelTarget = null; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            nextLevelProgress = 100;
        }
        
        res.json({
            ok: true,
            purchases,
            stats: {
                totalPurchases,
                totalSpent,
                loyaltyLevel,
                currentDiscount,
                nextLevelProgress: Math.round(nextLevelProgress),
                nextLevelTarget,
                levelName: loyaltyLevel === 0 ? "–ù–æ–≤–∏—á–æ–∫" : 
                          loyaltyLevel === 1 ? "–ë—Ä–æ–Ω–∑–∞" :
                          loyaltyLevel === 2 ? "–°–µ—Ä–µ–±—Ä–æ" : "–ó–æ–ª–æ—Ç–æ"
            }
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
app.get('/api/orders', (req, res) => {
    try {
        const allOrders = getAllOrders();
        res.json({ ok: true, orders: allOrders });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
app.get('/api/admin/categories', requireAdminAuth, async (req, res) => {
    try {
        const categories = await CategoriesDB.getStats();
        res.json({ ok: true, categories });
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// API –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
app.put('/api/admin/categories/:categoryId/visibility', requireAdminAuth, async (req, res) => {
    try {
        const { categoryId } = req.params;
        const isVisible = await CategoriesDB.toggleVisibility(categoryId);
        
        if (isVisible !== null) {
            logger.info(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId} ${isVisible ? '–ø–æ–∫–∞–∑–∞–Ω–∞' : '—Å–∫—Ä—ã—Ç–∞'}`);
            res.json({ ok: true, isVisible, message: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${isVisible ? '–ø–æ–∫–∞–∑–∞–Ω–∞' : '—Å–∫—Ä—ã—Ç–∞'}` });
        } else {
            res.status(404).json({ ok: false, error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
app.get('/api/categories/visible', async (req, res) => {
    try {
        const categories = await CategoriesDB.getVisible();
        res.json({ ok: true, categories });
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîç API –î–õ–Ø –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –†–ê–°–°–´–õ–ö–£
app.post('/api/debug/add-user', requireAdminAuth, async (req, res) => {
    try {
        const { telegram_user_id, first_name } = req.body;
        
        if (!telegram_user_id) {
            return res.status(400).json({ ok: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω telegram_user_id' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        const userData = {
            id: telegram_user_id,
            first_name: first_name || '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            last_name: '',
            username: '',
            language_code: 'ru',
            is_bot: false
        };
        
        const savedUser = await BotUsersDB.upsert(userData);
        
        res.json({
            ok: true,
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É',
            user: savedUser
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîç API –î–õ–Ø –¢–ï–°–¢–û–í–û–ô –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø
app.post('/api/debug/test-broadcast', requireAdminAuth, async (req, res) => {
    try {
        const { message_text } = req.body;
        
        if (!message_text) {
            return res.status(400).json({ ok: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' });
        }
        
        logger.info('üß™ –¢–ï–°–¢ –†–ê–°–°–´–õ–ö–ò: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        const testMessage = {
            text: message_text,
            from: {
                first_name: '–¢–µ—Å—Ç'
            }
        };
        
        await handleGroupMessage(testMessage);
        
        res.json({
            ok: true,
            message: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞'
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîç API –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê WEBHOOK TELEGRAM
app.get('/api/debug/webhook-info', requireAdminAuth, async (req, res) => {
    try {
        if (!config.TELEGRAM_BOT_TOKEN) {
            return res.status(400).json({ ok: false, error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        const webhookInfoResponse = await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/getWebhookInfo`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        const botInfoResponse = await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/getMe`);
        
        res.json({
            ok: true,
            webhook: webhookInfoResponse.data.result,
            bot: botInfoResponse.data.result,
            expected_webhook_url: 'https://tundra-miniapp-production.up.railway.app/api/telegram/webhook',
            broadcast_chat_id: config.TELEGRAM_BROADCAST_CHAT_ID
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîç API –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í –ë–û–¢–ê –í –ì–†–£–ü–ü–ï
app.get('/api/debug/bot-permissions', requireAdminAuth, async (req, res) => {
    try {
        if (!config.TELEGRAM_BOT_TOKEN || !config.TELEGRAM_BROADCAST_CHAT_ID) {
            return res.status(400).json({ 
                ok: false, 
                error: 'TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_BROADCAST_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' 
            });
        }
        
        let broadcastChatId = config.TELEGRAM_BROADCAST_CHAT_ID.toString();
        if (!broadcastChatId.startsWith('-')) {
            broadcastChatId = '-' + broadcastChatId;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø–µ –∏ –∫–∞–∫–∏–µ —É –Ω–µ–≥–æ –ø—Ä–∞–≤–∞
            const chatMemberResponse = await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/getChatMember`, {
                chat_id: broadcastChatId,
                user_id: (await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/getMe`)).data.result.id
            });
            
            const chatInfoResponse = await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/getChat`, {
                chat_id: broadcastChatId
            });
            
            res.json({
                ok: true,
                chat_id: broadcastChatId,
                bot_status: chatMemberResponse.data.result,
                chat_info: chatInfoResponse.data.result,
                message: chatMemberResponse.data.result.status === 'administrator' ? 
                    '‚úÖ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ' : 
                    `‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${chatMemberResponse.data.result.status}`
            });
            
        } catch (apiError) {
            if (apiError.response?.data?.error_code === 400) {
                return res.json({
                    ok: false,
                    error: '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    chat_id: broadcastChatId,
                    suggestion: '–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –¥–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
                });
            }
            throw apiError;
        }
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// üîç –û–¢–õ–ê–î–û–ß–ù–´–ô API –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –†–ê–°–°–´–õ–ö–ò
app.get('/api/debug/broadcast', requireAdminAuth, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const configStatus = {
            TELEGRAM_BOT_TOKEN: config.TELEGRAM_BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TELEGRAM_BROADCAST_CHAT_ID: config.TELEGRAM_BROADCAST_CHAT_ID ? `‚úÖ ${config.TELEGRAM_BROADCAST_CHAT_ID}` : '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TELEGRAM_ADMIN_CHAT_ID: config.TELEGRAM_ADMIN_CHAT_ID ? `‚úÖ ${config.TELEGRAM_ADMIN_CHAT_ID}` : '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        };
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userStats = await BotUsersDB.getStats();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        const allUsers = await getSubscribedUsers();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ orders –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const ordersQuery = `
            SELECT DISTINCT telegram_user_id, COUNT(*) as orders_count
            FROM orders 
            WHERE telegram_user_id IS NOT NULL 
            AND telegram_user_id != ''
            AND status != 'cancelled'
            GROUP BY telegram_user_id
            ORDER BY orders_count DESC
        `;
        const ordersResult = await pool.query(ordersQuery);
        
        res.json({
            ok: true,
            config: configStatus,
            userStats,
            broadcastUsers: {
                total: allUsers.length,
                users: allUsers.slice(0, 10) // –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            },
            ordersUsers: {
                total: ordersResult.rows.length,
                users: ordersResult.rows.slice(0, 10)
            },
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ü–ï–†–ï–ú–ï–©–ï–ù –í–´–®–ï - –ü–ï–†–ï–î SPA FALLBACK

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
app.put('/api/orders/:orderId/status', (req, res) => {
    try {
        const { status } = req.body;
        const orderId = req.params.orderId;
        
        // üî• –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–¢–ê–¢–£–°–´
        if (status === 'cancelled' || status === 'expired') {
            // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ—Ç–º–µ–Ω–µ –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            clearOrderTimer(orderId);
        }
        
        const order = updateOrderStatus(orderId, status);
        
        if (order) {
            logger.info(`üìù –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}`);
            res.json({ ok: true, order });
        } else {
            res.status(404).json({ ok: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram webhook'–∞
app.get('/test-telegram-webhook', (req, res) => {
    res.json({
        ok: true,
        message: 'Telegram webhook –¥–æ—Å—Ç—É–ø–µ–Ω',
        url: 'https://tundra-miniapp-production.up.railway.app/api/telegram/webhook',
        timestamp: new Date().toISOString()
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–∞ Telegram
app.get('/setup-telegram-webhook', async (req, res) => {
    try {
        if (!config.TELEGRAM_BOT_TOKEN) {
            return res.status(500).json({ error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
        }
        
        const webhookUrl = 'https://tundra-miniapp-production.up.railway.app/api/telegram/webhook';
        
        const response = await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/setWebhook`, {
            url: webhookUrl
        });
        
        res.json({
            ok: true,
            message: 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
            webhookUrl: webhookUrl,
            telegramResponse: response.data
        });
    } catch (error) {
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook',
            details: error.message
        });
    }
});

// Webhook –¥–ª—è Telegram
app.post('/api/telegram/webhook', async (req, res) => {
    try {
        logger.info('üîî TELEGRAM WEBHOOK: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram');
        logger.info('üîî TELEGRAM WEBHOOK: req.body:', JSON.stringify(req.body, null, 2));
        logger.info('üîî TELEGRAM WEBHOOK: req.headers:', JSON.stringify(req.headers, null, 2));
        
        const { message, callback_query } = req.body;
        
        if (callback_query) {
            logger.info('üîî TELEGRAM WEBHOOK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query:', callback_query.data);
            logger.info('üîî TELEGRAM WEBHOOK: callback_query –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(callback_query, null, 2));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (callback_query.from && callback_query.from.id) {
                try {
                    await BotUsersDB.upsert(callback_query.from);
                    logger.debug(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${callback_query.from.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î (callback)`);
                } catch (error) {
                    logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${callback_query.from.id}:`, error.message);
                }
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
            await handleCallbackQuery(callback_query);
            logger.info('üîî TELEGRAM WEBHOOK: callback_query –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } else if (message) {
            logger.info('üîî TELEGRAM WEBHOOK: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.text);
            logger.info('üîî TELEGRAM WEBHOOK: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ message:', JSON.stringify(message, null, 2));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            let broadcastChatId = config.TELEGRAM_BROADCAST_CHAT_ID?.toString();
            let adminChatId = config.TELEGRAM_ADMIN_CHAT_ID?.toString();
            const messageChatId = message.chat.id.toString();
            
            logger.info('üîî TELEGRAM WEBHOOK: CONFIG DUMP:', {
                TELEGRAM_BROADCAST_CHAT_ID: config.TELEGRAM_BROADCAST_CHAT_ID,
                TELEGRAM_ADMIN_CHAT_ID: config.TELEGRAM_ADMIN_CHAT_ID,
                broadcastChatId_before: broadcastChatId,
                adminChatId_before: adminChatId,
                messageChatId: messageChatId
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–≥—Ä—É–ø–ø—ã –≤ Telegram –∏–º–µ—é—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID)
            if (broadcastChatId && !broadcastChatId.startsWith('-')) {
                broadcastChatId = '-' + broadcastChatId;
            }
            if (adminChatId && !adminChatId.startsWith('-')) {
                adminChatId = '-' + adminChatId;
            }
            
            logger.info(`üîç –ü–†–û–í–ï–†–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${messageChatId}`);
            logger.info(`üì¢ –†–∞—Å—Å—ã–ª–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞: ${broadcastChatId}`);
            logger.info(`üìã –ê–¥–º–∏–Ω –≥—Ä—É–ø–ø–∞ –∑–∞–∫–∞–∑–æ–≤: ${adminChatId}`);
            
            logger.info('üîî TELEGRAM WEBHOOK: –°–†–ê–í–ù–ï–ù–ò–ï ID:', {
                messageChatId: messageChatId,
                broadcastChatId: broadcastChatId,
                isEqual: messageChatId === broadcastChatId,
                messageType: typeof messageChatId,
                broadcastType: typeof broadcastChatId
            });
            
            if (broadcastChatId && messageChatId === broadcastChatId) {
                logger.info('üì¢ –†–ê–°–°–´–õ–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤');
                await handleGroupMessage(message);
            } else if (adminChatId && messageChatId === adminChatId) {
                logger.info('üìã –ê–î–ú–ò–ù: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º)');
                // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            } else {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                logger.debug(`üí¨ –õ–ò–ß–ù–û–ï: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${messageChatId}:`, message.text);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if (message.from && message.from.id) {
                    try {
                        await BotUsersDB.upsert(message.from);
                        logger.debug(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.from.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î`);
                    } catch (error) {
                        logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${message.from.id}:`, error.message);
                    }
                }
            }
        } else {
            logger.warn('üîî TELEGRAM WEBHOOK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö:', Object.keys(req.body));
            logger.warn('üîî TELEGRAM WEBHOOK: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));
        }
        
        res.status(200).json({ ok: true });
    } catch (error) {
        logger.error('‚ùå TELEGRAM WEBHOOK: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error.message);
        logger.error('‚ùå TELEGRAM WEBHOOK: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π webhook –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/api/telegram/webhook', (req, res) => {
    logger.info('üîî GET WEBHOOK TEST: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É webhook');
    res.json({ 
        ok: true, 
        message: 'Telegram webhook –¥–æ—Å—Ç—É–ø–µ–Ω',
        timestamp: new Date().toISOString()
    });
});

// –¢–ï–°–¢–û–í–´–ô endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.post('/api/test-webhook', (req, res) => {
    logger.info('üîî TEST WEBHOOK: –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω', {
        body: req.body,
        headers: req.headers
    });
    res.json({
        ok: true,
        message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!',
        received: req.body
    });
});

// üì¢ –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –ê–î–ú–ò–ù-–ì–†–£–ü–ü–´ –î–õ–Ø –†–ê–°–°–´–õ–ö–ò
async function handleGroupMessage(message) {
    try {
        const messageText = message.text;
        const senderName = message.from?.first_name || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
        
        logger.info(`üì¢ –†–ê–°–°–´–õ–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderName}: "${messageText}"`);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (messageText?.startsWith('/') || messageText?.startsWith('üÜî') || messageText?.startsWith('üì¶')) {
            logger.info('üì¢ –†–ê–°–°–´–õ–ö–ê: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        const subscribedUsers = await getSubscribedUsers();
        
        if (subscribedUsers.length === 0) {
            logger.info('üì¢ –†–ê–°–°–´–õ–ö–ê: –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }
        
        logger.info(`üì¢ –†–ê–°–°–´–õ–ö–ê: –ù–∞–π–¥–µ–Ω–æ ${subscribedUsers.length} –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        const broadcastMessage = `üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Tundra Gourmet*\n\n${messageText}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        let successCount = 0;
        let errorCount = 0;
        
        for (const user of subscribedUsers) {
            try {
                await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                    chat_id: user.telegram_user_id,
                    text: broadcastMessage,
                    parse_mode: 'Markdown'
                });
                successCount++;
                logger.debug(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_user_id}`);
            } catch (error) {
                errorCount++;
                logger.warn(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_user_id}:`, error.response?.data?.description || error.message);
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        const reportMessage = `üìä *–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ*\n\n` +
            `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"\n` +
            `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
            `‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n` +
            `üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscribedUsers.length}`;
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: config.TELEGRAM_BROADCAST_CHAT_ID,
            text: reportMessage,
            parse_mode: 'Markdown'
        });
        
        logger.info(`üì¢ –†–ê–°–°–´–õ–ö–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
        
    } catch (error) {
        logger.error('‚ùå –†–ê–°–°–´–õ–ö–ê: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        try {
            await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                chat_id: config.TELEGRAM_BROADCAST_CHAT_ID,
                text: `‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–û—à–∏–±–∫–∞: ${error.message}`,
                parse_mode: 'Markdown'
            });
        } catch (reportError) {
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ:', reportError.message);
        }
    }
}

// üìã –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –î–õ–Ø –†–ê–°–°–´–õ–ö–ò
async function getSubscribedUsers() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–∫—Ç–æ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–∏—Å–∞–ª –±–æ—Ç—É)
        const users = await BotUsersDB.getAllActiveUsers();
        
        logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${users.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏`);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ bot_users, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ orders
        if (users.length === 0) {
            logger.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ bot_users –ø—É—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ –∑–∞–∫–∞–∑–æ–≤');
            
            const fallbackQuery = `
                SELECT DISTINCT telegram_user_id 
                FROM orders 
                WHERE telegram_user_id IS NOT NULL 
                AND telegram_user_id != ''
                AND status != 'cancelled'
            `;
            const fallbackResult = await pool.query(fallbackQuery);
            const fallbackUsers = fallbackResult.rows.map(row => ({
                telegram_user_id: row.telegram_user_id
            }));
            
            logger.info(`üìã Fallback: –ù–∞–π–¥–µ–Ω–æ ${fallbackUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞–∫–∞–∑–æ–≤`);
            return fallbackUsers;
        }
        
        return users;
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:', error.message);
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∑–∞–∫–∞–∑–æ–≤
        try {
            const fallbackQuery = `
                SELECT DISTINCT telegram_user_id 
                FROM orders 
                WHERE telegram_user_id IS NOT NULL 
                AND telegram_user_id != ''
                AND status != 'cancelled'
            `;
            const fallbackResult = await pool.query(fallbackQuery);
            const fallbackUsers = fallbackResult.rows.map(row => ({
                telegram_user_id: row.telegram_user_id
            }));
            
            logger.warn(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback: ${fallbackUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞–∫–∞–∑–æ–≤`);
            return fallbackUsers;
        } catch (fallbackError) {
            logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', fallbackError.message);
            return [];
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
async function handleCallbackQuery(callbackQuery) {
    try {
        const { data, message, from } = callbackQuery;
        const parts = data.split('_');
        const action = parts[0];
        const orderId = parts[1];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if (action === 'rating') {
            await handleRatingSubmission(callbackQuery, orderId, parts[2]);
            return;
        } else if (action === 'cancel' && parts[1] === 'rating') {
            await handleRatingCancel(callbackQuery, parts[2]);
            return;
        }
        
        logger.debug(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${action} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
        
        let order = await getOrder(orderId);
        if (!order) {
            logger.error(`–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        let newStatus, statusText, statusEmoji;
        
        switch (action) {
            case 'accept':
                newStatus = 'accepted';
                statusText = '–ü—Ä–∏–Ω—è—Ç';
                statusEmoji = 'üü°';
                break;
            case 'cancel':
                newStatus = 'cancelled';
                statusText = '–û—Ç–º–µ–Ω–µ–Ω';
                statusEmoji = 'üî¥';
                break;
            case 'preparing':
                newStatus = 'preparing';
                statusText = '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
                statusEmoji = 'üîµ';
                break;
            case 'delivering':
                newStatus = 'delivering';
                statusText = '–í –¥–æ—Å—Ç–∞–≤–∫–µ';
                statusEmoji = 'üöö';
                break;
            case 'completed':
            case 'complete':
                newStatus = 'completed';
                statusText = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
                statusEmoji = '‚úÖ';
                break;
            case 'rate':
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
                await handleOrderRating(callbackQuery, orderId);
                return;
            default:
                logger.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
                return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ø–∞–º—è—Ç–∏
        order = updateOrderStatus(orderId, newStatus);
        
        // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
        try {
            await OrdersDB.update(orderId, { 
                status: newStatus
            });
            logger.info(`üíæ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: ${newStatus}`);
        } catch (dbError) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î:`, dbError.message);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
        await updateOrderMessage(message.chat.id, message.message_id, order, newStatus);
        
        // üí∞ –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ó–í–†–ê–¢–ê –°–†–ï–î–°–¢–í –ü–†–ò –û–¢–ú–ï–ù–ï
        if (newStatus === 'cancelled' && order.payment_id) {
            try {
                logger.info(`üí∏ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}, payment_id: ${order.payment_id}`);
                
                // –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ –ÆKassa API
                const refundData = {
                    amount: {
                        value: order.totals?.total?.toString() || '0',
                        currency: 'RUB'
                    },
                    payment_id: order.payment_id
                };
                
                const refundResponse = await axios.post('https://api.yookassa.ru/v3/refunds', refundData, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Idempotence-Key': crypto.randomUUID()
                    },
                    auth: {
                        username: config.YOOKASSA_SHOP_ID,
                        password: config.YOOKASSA_SECRET_KEY
                    },
                    timeout: 30000
                });
                
                logger.info(`‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${refundResponse.data.id}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
                await OrdersDB.update(orderId, { 
                    payment_status: 'refunded',
                    refund_id: refundResponse.data.id
                });
                
            } catch (refundError) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤:`, refundError.message);
                if (refundError.response) {
                    logger.error(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:`, refundError.response.data);
                }
            }
        }
        
        // üì± –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–£
        logger.info(`üì± –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø: telegramUserId=${order.telegramUserId}, token=${!!config.TELEGRAM_BOT_TOKEN}`);
        
        if (order.telegramUserId && config.TELEGRAM_BOT_TOKEN) {
            try {
                await sendClientNotification(order, newStatus, statusText, statusEmoji);
                logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:`, error.message);
                if (error.response) {
                    logger.error(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Telegram:`, error.response.data);
                }
            }
        } else {
            logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É: telegramUserId=${order.telegramUserId}, token=${!!config.TELEGRAM_BOT_TOKEN}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusText}"`
        });
        
        logger.info(`–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newStatus}`);
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error.message);
    }
}

// üåü –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–¶–ï–ù–ö–ò –ó–ê–ö–ê–ó–ê –ö–õ–ò–ï–ù–¢–û–ú
async function handleOrderRating(callbackQuery, orderId) {
    try {
        const { from } = callbackQuery;
        
        logger.info(`‚≠ê –ö–ª–∏–µ–Ω—Ç ${from.id} —Ö–æ—á–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ${orderId}`);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        const ratingKeyboard = {
            inline_keyboard: [
                [
                    { text: '‚≠ê', callback_data: `rating_${orderId}_1` },
                    { text: '‚≠ê‚≠ê', callback_data: `rating_${orderId}_2` },
                    { text: '‚≠ê‚≠ê‚≠ê', callback_data: `rating_${orderId}_3` }
                ],
                [
                    { text: '‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: `rating_${orderId}_4` },
                    { text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: `rating_${orderId}_5` }
                ],
                [
                    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_rating_${orderId}` }
                ]
            ]
        };
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: from.id,
            text: `‚≠ê *–û—Ü–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ ‚Ññ${orderId}*\n\n–ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –¥–æ—Å—Ç–∞–≤–∫–∞?\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:`,
            parse_mode: 'Markdown',
            reply_markup: ratingKeyboard
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –∫–Ω–æ–ø–∫—É
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ ‚≠ê'
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É:', error.message);
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –æ—Ü–µ–Ω–∫–∏'
        });
    }
}

// üåü –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–ü–†–ê–í–ö–ò –û–¶–ï–ù–ö–ò
async function handleRatingSubmission(callbackQuery, orderId, rating) {
    try {
        const { from } = callbackQuery;
        const ratingValue = parseInt(rating);
        
        if (isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏');
        }
        
        logger.info(`‚≠ê –ü–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ ${ratingValue} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${from.id}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ ratings)
        try {
            // –≠—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ü–µ–Ω–æ–∫
            logger.info(`üíæ –û—Ü–µ–Ω–∫–∞ ${ratingValue} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
        } catch (dbError) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –≤ –ë–î:', dbError.message);
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
        let responseMessage = '';
        let responseEmoji = '';
        
        if (ratingValue >= 4) {
            responseEmoji = 'üéâ';
            responseMessage = `${responseEmoji} *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É!*\n\n` +
                `‚≠ê –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${rating} –∑–≤–µ–∑–¥${ratingValue === 1 ? '—É' : ratingValue > 4 ? '' : '—ã'} –∑–∞–∫–∞–∑—É ‚Ññ${orderId}\n\n` +
                `üôè –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!\n` +
                `üõí –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ Tundra Gourmet`;
        } else if (ratingValue === 3) {
            responseEmoji = 'üòä';
            responseMessage = `${responseEmoji} *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!*\n\n` +
                `‚≠ê –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${rating} –∑–≤–µ–∑–¥—ã –∑–∞–∫–∞–∑—É ‚Ññ${orderId}\n\n` +
                `üîß –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞\n` +
                `üõí –ù–∞–¥–µ–µ–º—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å–µ –±—É–¥–µ—Ç –µ—â–µ –ª—É—á—à–µ!`;
        } else {
            responseEmoji = 'üòî';
            responseMessage = `${responseEmoji} *–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É*\n\n` +
                `‚≠ê –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${rating} –∑–≤–µ–∑–¥${ratingValue === 1 ? '—É' : '—ã'} –∑–∞–∫–∞–∑—É ‚Ññ${orderId}\n\n` +
                `üôè –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n` +
                `üìû –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n` +
                `üîß –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–º –Ω–µ–¥–æ—á–µ—Ç—ã`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
        let inlineKeyboard = null;
        if (ratingValue <= 2) {
            // –î–ª—è –Ω–∏–∑–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫ - –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            inlineKeyboard = {
                inline_keyboard: [
                    [{ text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', url: 'https://t.me/tundrasupport' }],
                    [{ text: 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', url: config.FRONTEND_URL }]
                ]
            };
        } else {
            // –î–ª—è —Ö–æ—Ä–æ—à–∏—Ö –æ—Ü–µ–Ω–æ–∫ - –∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            inlineKeyboard = {
                inline_keyboard: [
                    [{ text: 'üõí –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', url: config.FRONTEND_URL }]
                ]
            };
        }
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: from.id,
            text: responseMessage,
            parse_mode: 'Markdown',
            reply_markup: inlineKeyboard
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏
        if (config.TELEGRAM_ADMIN_CHAT_ID) {
            const adminMessage = `üìä *–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–∫–∞–∑–∞*\n\n` +
                `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${orderId}\n` +
                `‚≠ê –û—Ü–µ–Ω–∫–∞: ${rating} –∏–∑ 5\n` +
                `üë§ –ö–ª–∏–µ–Ω—Ç: ${from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${from.last_name || ''}\n` +
                `üÜî ID: ${from.id}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;
            
            try {
                await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                    chat_id: config.TELEGRAM_ADMIN_CHAT_ID,
                    text: adminMessage,
                    parse_mode: 'Markdown'
                });
            } catch (adminError) {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ü–µ–Ω–∫–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É:', adminError.message);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: ${rating} ‚≠ê`
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏:', error.message);
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏'
        });
    }
}

// üåü –§–£–ù–ö–¶–ò–Ø –û–¢–ú–ï–ù–´ –û–¶–ï–ù–ö–ò
async function handleRatingCancel(callbackQuery, orderId) {
    try {
        const { from } = callbackQuery;
        
        logger.info(`‚ùå –ö–ª–∏–µ–Ω—Ç ${from.id} –æ—Ç–º–µ–Ω–∏–ª –æ—Ü–µ–Ω–∫—É –∑–∞–∫–∞–∑–∞ ${orderId}`);
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: from.id,
            text: `‚ùå –û—Ü–µ–Ω–∫–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId} –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è üòä`,
            parse_mode: 'Markdown'
        });
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: '–û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ü–µ–Ω–∫–∏:', error.message);
        
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            callback_query_id: callbackQuery.id,
            text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ'
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–æ–º
async function updateOrderMessage(chatId, messageId, order, newStatus) {
    try {
        const statusEmojis = {
            'new': '‚è≥',
            'accepted': 'üü°',
            'preparing': 'üîµ',
            'delivering': 'üöö',
            'completed': '‚úÖ',
            'cancelled': 'üî¥'
        };
        
        const statusTexts = {
            'new': '–ù–æ–≤—ã–π',
            'accepted': '–ü—Ä–∏–Ω—è—Ç',
            'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
            'delivering': '–í –¥–æ—Å—Ç–∞–≤–∫–µ',
            'completed': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const items = order.items || order.cartItems || [];
        const address = order.address || {};
        
        const message = `üÜï –ó–ê–ö–ê–ó #${order.id} - ${statusEmojis[newStatus]} ${statusTexts[newStatus]}

üë§ ${order.customerName || '–ö–ª–∏–µ–Ω—Ç'}
üìç ${address.street || '–ù–µ —É–∫–∞–∑–∞–Ω'}, ${address.house || '–ù–µ —É–∫–∞–∑–∞–Ω'}${address.apartment ? `, –∫–≤.${address.apartment}` : ''} (${order.deliveryZone === 'moscow' ? '–ú–æ—Å–∫–≤–∞' : '–ú–û'})
üí∞ ${order.totals?.total || 0}‚ÇΩ
üì¶ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤

üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
${items.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚ÇΩ`).join('\n')}

üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment || '–Ω–µ—Ç'}

[üü° –ü—Ä–∏–Ω—è—Ç—å] [üîµ –ì–æ—Ç–æ–≤–∏—Ç—Å—è] [üöö –î–æ—Å—Ç–∞–≤–∫–µ] [‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω]`;

        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        let inlineKeyboard;
        if (newStatus === 'new' || newStatus === 'paid') {
            // –î–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: 'üü° –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É', callback_data: `accept_${order.id}` },
                        { text: 'üîµ –ì–æ—Ç–æ–≤–∏—Ç—Å—è', callback_data: `preparing_${order.id}` }
                    ],
                    [
                        { text: 'üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ', callback_data: `delivering_${order.id}` },
                        { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `completed_${order.id}` }
                    ]
                ]
            };
        } else if (newStatus === 'accepted') {
            // –î–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
            inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîµ –ì–æ—Ç–æ–≤–∏—Ç—Å—è', callback_data: `preparing_${order.id}` },
                        { text: 'üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ', callback_data: `delivering_${order.id}` }
                    ],
                    [
                        { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `completed_${order.id}` }
                    ]
                ]
            };
        } else if (newStatus === 'preparing') {
            // –î–ª—è –≥–æ—Ç–æ–≤—è—â–∏—Ö—Å—è –∑–∞–∫–∞–∑–æ–≤ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç" –∏ "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"
            inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: 'üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ', callback_data: `delivering_${order.id}` },
                        { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `completed_${order.id}` }
                    ]
                ]
            };
        } else if (newStatus === 'delivering') {
            // –î–ª—è –¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `completed_${order.id}` }
                    ]
                ]
            };
        } else {
            // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            inlineKeyboard = { inline_keyboard: [] };
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/editMessageText`, {
            chat_id: chatId,
            message_id: messageId,
            text: message,
            parse_mode: 'HTML',
            reply_markup: inlineKeyboard
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
}

// Webhook –¥–ª—è –ÆKassa - –£–î–ê–õ–ï–ù (–¥—É–±–ª–∏—Ä—É–µ—Ç /webhook/yookassa)

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π - –£–î–ê–õ–ï–ù–´ (–ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π webhook)

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa - –£–î–ê–õ–ï–ù (–¥—É–±–ª–∏—Ä—É–µ—Ç /api/orders)

// üîß MIDDLEWARE –î–õ–Ø –ó–ê–©–ò–¢–´ –ê–î–ú–ò–ù API
function requireAdminAuth(req, res, next) {
    console.log('üîç requireAdminAuth: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - MIDDLEWARE –í–´–ó–í–ê–ù!');
    console.log('üîç requireAdminAuth: URL:', req.url);
    console.log('üîç requireAdminAuth: –ú–µ—Ç–æ–¥:', req.method);
    console.log('üîç requireAdminAuth: –ó–∞–≥–æ–ª–æ–≤–∫–∏:', req.headers['x-admin-password']);
    console.log('üîç requireAdminAuth: Query:', req.query.password);
    const providedPassword = req.headers['x-admin-password'] || req.query.password;
    const adminPassword = config.ADMIN_PASSWORD;
    
    if (providedPassword !== adminPassword) {
        console.log('‚ùå requireAdminAuth: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        return res.status(401).json({ 
            ok: false, 
            error: 'Unauthorized. Admin password required.' 
        });
    }
    
    console.log('‚úÖ requireAdminAuth: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    next();
}

// üîß MIDDLEWARE –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•
// –§—É–Ω–∫—Ü–∏—è validateOrderData –ü–ï–†–ï–ú–ï–©–ï–ù–ê –í–´–®–ï - –ü–ï–†–ï–î API –ú–ê–†–®–†–£–¢–ê–ú–ò

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
function validateAdminData(req, res, next) {
    const { products } = req.body;
    
    if (!products || typeof products !== 'object') {
        return res.status(400).json({ 
            ok: false, 
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤' 
        });
    }
    
    next();
}

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID —Ç–æ–≤–∞—Ä–∞
function validateProductId(req, res, next) {
    const { productId } = req.params;
    
    if (!productId || typeof productId !== 'string' || productId.trim().length === 0) {
        return res.status(400).json({ 
            ok: false, 
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞' 
        });
    }
    
    next();
}

// üîß API –î–õ–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
app.get('/api/admin/orders', requireAdminAuth, async (req, res) => {
    try {
        const orders = await OrdersDB.getAll();
        logger.info(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏`);
        res.json({ ok: true, orders });
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ –∑–∞–∫–∞–∑—ã –∫—Ä–æ–º–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)
app.get('/api/orders/user/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        // –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –ë–µ—Ä–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã orders
        const orders = await OrdersDB.getByUserId(userId);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        const paidOrders = orders.filter(order => 
            order.payment_status === 'paid' || 
            order.status === 'completed' || 
            order.status === 'delivered' ||
            order.status === 'accepted' ||
            (order.payment_id && order.payment_id !== '')
        );
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const formattedOrders = paidOrders.map(order => ({
            order_id: order.order_id,
            amount: order.total_amount || order.totalAmount || 0,
            purchase_date: order.created_at || order.createdAt,
            items: order.items || [],
            status: order.status,
            payment_status: order.payment_status
        }));
        
        res.json({ ok: true, orders: formattedOrders });
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// –î–£–ë–õ–ò–†–£–Æ–©–ò–ï ENDPOINTS –ü–ï–†–ï–ú–ï–©–ï–ù–´ –í–´–®–ï - –ü–ï–†–ï–î SPA FALLBACK

// –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è endpoint —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π /api/orders/:orderId –≤—ã—à–µ
// –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è API –º–∞—Ä—à—Ä—É—Ç —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã—à–µ

// –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è PUT –º–∞—Ä—à—Ä—É—Ç —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã—à–µ

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
app.patch('/api/admin/products/:categoryId/:productId/toggle', requireAdminAuth, validateProductId, async (req, res) => {
    try {
        console.log('üîç API: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
        console.log('üîç API: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', req.params);
        const { categoryId, productId } = req.params;
        
        // üóÑÔ∏è –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï –¢–û–í–ê–†–´ –ò–ó –ë–î
        let allProducts = await AdminProductsDB.loadAll();
        
        // –ï—Å–ª–∏ –≤ –ë–î –ø—É—Å—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å
        if (Object.keys(allProducts).length === 0) {
            allProducts = Object.fromEntries(adminProducts);
        }
        
        const categoryProducts = allProducts[categoryId];
        if (!categoryProducts) {
            return res.status(404).json({ ok: false, error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        const product = categoryProducts.find(p => p.id === productId);
        if (!product) {
            return res.status(404).json({ ok: false, error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        product.available = !product.available;
        
        // üíæ –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –¢–û–í–ê–†–´ –û–ë–†–ê–¢–ù–û –í –ë–î
        await AdminProductsDB.saveAll(allProducts);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        if (adminProducts.has(categoryId)) {
            const localProducts = adminProducts.get(categoryId);
            const localProduct = localProducts.find(p => p.id === productId);
            if (localProduct) {
                localProduct.available = product.available;
            }
        }
        
        logger.info(`üîß –¢–æ–≤–∞—Ä ${productId} ${product.available ? '–ø–æ–∫–∞–∑–∞–Ω' : '—Å–∫—Ä—ã—Ç'} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
        res.json({ ok: true, product, available: product.available });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error.message);
        res.status(500).json({ ok: false, error: error.message });
    }
});

// SPA fallback - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–ù–ï –¥–ª—è API)
app.get('*', (req, res) => {
    // –ò—Å–∫–ª—é—á–∞–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
    if (req.path.startsWith('/api/')) {
        console.log('üîç SPA fallback: API –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞–¥–∞—Ç—å —Å—é–¥–∞:', req.path);
        return res.status(404).json({ 
            error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω', 
            path: req.path,
            timestamp: new Date().toISOString()
        });
    }
    
    console.log('üîç SPA fallback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å:', req.path);
    res.sendFile(path.join(webRoot, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
async function startServer() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        await initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î
        await initializeOrderCounter();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ÆKassa
        await initializeYooKassa();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ checkout –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!checkout) {
            throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ÆKassa API');
        }
        logger.info('‚úÖ –ÆKassa API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        
        // üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM WEBHOOK
        if (config.TELEGRAM_BOT_TOKEN) {
            try {
                const webhookUrl = 'https://tundra-miniapp-production.up.railway.app/api/telegram/webhook';
                logger.info('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram webhook...');
                
                const response = await axios.post(`https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/setWebhook`, {
                    url: webhookUrl
                });
                
                if (response.data.ok) {
                    logger.info('‚úÖ Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                } else {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', response.data);
                }
            } catch (error) {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook:', error.message);
            }
        } else {
            logger.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
        try {
            const dbProducts = await AdminProductsDB.loadAll();
            if (Object.keys(dbProducts).length > 0) {
                logger.info('‚úÖ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Map –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º
                adminProducts.clear();
                for (const [categoryId, products] of Object.entries(dbProducts)) {
                    adminProducts.set(categoryId, products);
                }
            }
        } catch (error) {
            logger.warn('‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –∏–∑ –ë–î –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.listen(PORT, async () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑: ${webRoot}`);
            console.log(`üîó Health check: http://localhost:${PORT}/health`);
            console.log(`üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);
            console.log(`üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/admin?password=TundraAdmin2024!`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram:');
            
            // –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
            logger.info('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
            logger.info(`   RAW process.env.TELEGRAM_BOT_TOKEN: ${process.env.TELEGRAM_BOT_TOKEN ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
            logger.info(`   RAW process.env.TELEGRAM_ADMIN_CHAT_ID: ${process.env.TELEGRAM_ADMIN_CHAT_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
            logger.info(`   RAW process.env.TELEGRAM_BROADCAST_CHAT_ID: ${process.env.TELEGRAM_BROADCAST_CHAT_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
            
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ config –æ–±—ä–µ–∫—Ç–∞:');
            logger.info(`   config.TELEGRAM_BOT_TOKEN: ${config.TELEGRAM_BOT_TOKEN ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
            logger.info(`   config.TELEGRAM_ADMIN_CHAT_ID: ${config.TELEGRAM_ADMIN_CHAT_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
            logger.info(`   config.TELEGRAM_BROADCAST_CHAT_ID: ${config.TELEGRAM_BROADCAST_CHAT_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
            
            logger.info('üîç –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:');
            logger.info(`   –¢–æ–∫–µ–Ω –±–æ—Ç–∞: ${config.TELEGRAM_BOT_TOKEN ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
            logger.info(`   üìã –ê–¥–º–∏–Ω –≥—Ä—É–ø–ø–∞ (–∑–∞–∫–∞–∑—ã): ${config.TELEGRAM_ADMIN_CHAT_ID ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
            logger.info(`   üì¢ –†–∞—Å—Å—ã–ª–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞: ${config.TELEGRAM_BROADCAST_CHAT_ID ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
            
            if (config.TELEGRAM_BOT_TOKEN && config.TELEGRAM_ADMIN_CHAT_ID && config.TELEGRAM_BROADCAST_CHAT_ID) {
                logger.info('‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
            } else {
                logger.warn('‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
                logger.warn(`   üìã –ó–∞–∫–∞–∑—ã –±—É–¥—É—Ç ${config.TELEGRAM_ADMIN_CHAT_ID ? '–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è' : '–ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è'}`);
                logger.warn(`   üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç ${config.TELEGRAM_BROADCAST_CHAT_ID ? '—Ä–∞–±–æ—Ç–∞—Ç—å' : '–ù–ï —Ä–∞–±–æ—Ç–∞—Ç—å'}`);
            }
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
function cleanup() {
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤
    let clearedTimers = 0;
    for (const [orderId, timer] of orderTimers.entries()) {
        clearTimeout(timer);
        clearedTimers++;
    }
    orderTimers.clear();
    
    if (clearedTimers > 0) {
        logger.info(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${clearedTimers} —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤`);
    }
    
    logger.info('‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
}

// Graceful shutdown —Å –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤
process.on('SIGTERM', () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    cleanup();
    process.exit(0);
});

process.on('SIGINT', () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    cleanup();
    process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('üí• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('üí• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

/*
            border-radius: 12px;
            font-size: 16px;
            margin-bottom: 20px;
            background: rgba(255,255,255,0.9);
            color: #2c3e50;
        }
        .login-btn {
            width: 100%;
            background: #D4A574;
            color: #1A1F2E;
            border: none;
            padding: 15px;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .login-btn:hover { background: #c19660; transform: translateY(-2px); }
        .error-msg {
            background: rgba(231, 76, 60, 0.2);
            color: #ff6b6b;
            padding: 15px;
            border-radius: 12px;
            margin-bottom: 20px;
            border: 1px solid rgba(231, 76, 60, 0.3);
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-icon">üîê</div>
        <div class="login-title">–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</div>
        <div class="login-subtitle">Tundra Gourmet</div>
        
        <div class="error-msg">‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</div>
        
        <form class="login-form" method="GET">
            <input type="password" 
                   name="password" 
                   class="login-input" 
                   placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" 
                   required 
                   autofocus>
            <button type="submit" class="login-btn">üöÄ –í–æ–π—Ç–∏</button>
        </form>
        
        <div style="margin-top: 30px; font-size: 14px; opacity: 0.7;">
            üí° –ï—Å–ª–∏ –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
        </div>
    </div>
</body>
</html>
            `);
*/

// –í—Ç–æ—Ä–æ–π SPA fallback —É–¥–∞–ª–µ–Ω - –¥—É–±–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π

// üõ°Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ü–ï–†–ï–•–í–ê–ß–ï–ù–ù–´–• –û–®–ò–ë–û–ö
process.on('uncaughtException', (error) => {
    console.error('üí• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('üí• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// Keep-alive –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è Railway
setInterval(() => {
    const uptime = process.uptime();
    const memory = process.memoryUsage();
    logger.debug(`üíì Keep-alive: Uptime: ${Math.floor(uptime)}s, Memory: ${Math.round(memory.heapUsed / 1024 / 1024)}MB`);
}, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// üßπ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–ê–ú–Ø–¢–ò
setInterval(async () => {
    try {
        logger.debug('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏...');
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –ø–∞–º—è—Ç–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        const now = Date.now();
        const oneDayAgo = now - (24 * 60 * 60 * 1000);
        
        let cleanedOrders = 0;
        for (const [orderId, order] of orders.entries()) {
            if (order.createdAt && new Date(order.createdAt).getTime() < oneDayAgo) {
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
                clearOrderTimer(orderId);
                orders.delete(orderId);
                cleanedOrders++;
            }
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –ë–î (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        try {
            const deletedCount = await OrdersDB.cleanupOldOrders();
            if (cleanedOrders > 0 || deletedCount > 0) {
                logger.info(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${cleanedOrders} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏, ${deletedCount} –∏–∑ –ë–î`);
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î:', error.message);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (cleanedOrders > 0) {
            const memory = process.memoryUsage();
            logger.info(`üìä –ü–∞–º—è—Ç—å: ${Math.round(memory.heapUsed / 1024 / 1024)}MB, –ó–∞–∫–∞–∑–æ–≤: ${orders.size}, –¢–∞–π–º–µ—Ä–æ–≤: ${orderTimers.size}`);
        }
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏:', error.message);
    }
}, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å


// Graceful shutdown —Å –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤
process.on('SIGTERM', () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    cleanup();
    process.exit(0);
});

process.on('SIGINT', () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    cleanup();
    process.exit(0);
});

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
function cleanup() {
    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤
    let clearedTimers = 0;
    for (const [orderId, timer] of orderTimers.entries()) {
        clearTimeout(timer);
        clearedTimers++;
    }
    orderTimers.clear();
    
    if (clearedTimers > 0) {
        logger.info(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${clearedTimers} —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤`);
    }
    
    logger.info('‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
}
