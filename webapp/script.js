// Telegram Web App MainButton and BackButton logic
let tg = window.Telegram?.WebApp;

function updateMainButton(screenId) {
    if (!tg) return;

    tg.MainButton.hide();
    tg.BackButton.hide();

    switch (screenId) {
        case 'main-screen':
            // No MainButton on main screen
            break;
        case 'category-screen':
            tg.BackButton.show();
            break;
        case 'product-detail-screen':
            tg.BackButton.show();
            // MainButton for "Add to Cart" will be handled by the product detail screen itself
            break;
        case 'cart-screen':
            const cartItems = Object.values(cart).filter(item => item.quantity > 0);
            const { subtotal } = calculateCartTotal();
            const minOrderAmount = 3500;
            if (cartItems.length > 0 && subtotal >= minOrderAmount) {
                tg.MainButton.setText('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
                tg.MainButton.show();
                tg.MainButton.onClick(proceedToOrder);
            }
            tg.BackButton.show();
            break;
        case 'order-form-screen':
            tg.MainButton.setText('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ');
            tg.MainButton.show();
            tg.MainButton.onClick(() => document.getElementById('orderForm').requestSubmit());
            tg.BackButton.show();
            break;
        case 'profile-screen':
        case 'my-orders-screen':
            tg.BackButton.show();
            break;
        case 'order-success-screen':
            // No MainButton on success screen
            break;
    }
}

// Override showScreen to update Telegram buttons
const originalShowScreen = window.showScreen;
window.showScreen = function(screenId) {
    originalShowScreen(screenId);
    updateMainButton(screenId);
};

// Initial setup for Telegram buttons
document.addEventListener('DOMContentLoaded', () => {
    if (tg) {
        tg.ready();
        tg.expand();
        tg.onEvent('themeChanged', () => {
            document.body.style.backgroundColor = tg.themeParams.bg_color;
            document.body.style.color = tg.themeParams.text_color;
        });
        tg.BackButton.onClick(() => {
            const currentScreen = document.querySelector('.screen.active').id;
            if (currentScreen === 'category-screen') {
                showMain();
            } else if (currentScreen === 'product-detail-screen') {
                goBackFromProduct();
            } else if (currentScreen === 'cart-screen') {
                showMain();
            } else if (currentScreen === 'order-form-screen') {
                showCart();
            } else if (currentScreen === 'profile-screen') {
                showMain();
            } else if (currentScreen === 'my-orders-screen') {
                showProfile();
            }
        });
    }
    updateMainButton(document.querySelector('.screen.active').id);
});

// –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ (Railway)
const API_BASE = 'https://nodejs-production-64ed.up.railway.app';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentCategory = null;
let currentProduct = null;
let cart = JSON.parse(localStorage.getItem('tundra_cart') || '{}');
let userProfile = JSON.parse(localStorage.getItem('tundra_profile') || '{"totalSpent": 5700, "notificationsEnabled": true}');
let orderCounter = parseInt(localStorage.getItem('tundra_order_counter') || '125');

// –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categories = [
    {
        id: 'kolbasy',
        name: '–ö–æ–ª–±–∞—Å—ã',
        desc: '–°—ã—Ä–æ–≤—è–ª–µ–Ω—ã–µ –¥–µ–ª–∏–∫–∞—Ç–µ—Å—ã –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã',
        icon: 'ÔøΩÔøΩ',
        count: 8
    },
    {
        id: 'pashtet',
        name: '–ü–∞—à—Ç–µ—Ç—ã',
        desc: '–†–∏–π–µ—Ç—ã —Å —Ç—Ä—é—Ñ–µ–ª–µ–º –∏ –≥—Ä–∏–±–∞–º–∏',
        icon: 'ÔøΩÔøΩ',
        count: 4
    },
    {
        id: 'delikatesy',
        name: '–î–µ–ª–∏–∫–∞—Ç–µ—Å—ã',
        desc: '–ö–∞—Ä–ø–∞—á—á–æ, —Ö–∞–º–æ–Ω, —Å–Ω–µ–∫–∏ –ø—Ä–µ–º–∏—É–º',
        icon: 'ÔøΩÔøΩ',
        count: 6
    },
    {
        id: 'gotovye',
        name: '–ì–æ—Ç–æ–≤—ã–µ –¥–µ–ª–∏–∫–∞—Ç–µ—Å—ã',
        desc: '–ó–∞–ø–µ—á—ë–Ω–Ω—ã–µ –∫–æ—Ä–µ–π–∫–∏ –∏ –æ–∫–æ—Ä–æ–∫',
        icon: 'ÔøΩÔøΩ',
        count: 5
    },
    {
        id: 'zamorozhennye',
        name: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ',
        desc: '–ü–µ–ª—å–º–µ–Ω–∏ —Å –æ–ª–µ–Ω–∏–Ω–æ–π –∏ —Ç—Ä—é—Ñ–µ–ª–µ–º',
        icon: '‚ùÑÔ∏è',
        count: 4
    },
    {
        id: 'polufabrikaty',
        name: '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã',
        desc: '–ú—è—Å–æ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
        icon: 'ÔøΩÔøΩ',
        count: 7
    },
    {
        id: 'pirogi-sytnye',
        name: '–ü–∏—Ä–æ–≥–∏ —Å—ã—Ç–Ω—ã–µ',
        desc: '–° –æ–ª–µ–Ω–∏–Ω–æ–π, –≥—Ä–∏–±–∞–º–∏, —Ç—Ä—é—Ñ–µ–ª–µ–º',
        icon: 'ÔøΩÔøΩ',
        count: 7
    },
    {
        id: 'pirogi-sladkie',
        name: '–ü–∏—Ä–æ–≥–∏ —Å–ª–∞–¥–∫–∏–µ',
        desc: '–° —è–≥–æ–¥–∞–º–∏ –∏ —Ç–≤–æ—Ä–æ–≥–æ–º',
        icon: 'ÔøΩÔøΩ',
        count: 8
    }
];

// –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
const products = {
    'kolbasy': [
        {
            id: 'chorizo-70',
            name: '–ö–æ–ª–±–∞—Å–∞ –∏–∑ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –æ–ª–µ–Ω–∏–Ω—ã "–ß–æ—Ä–∏–∑–æ"',
            price: 395,
            unit: '/70 –≥—Ä.',
            maxQty: 20,
            image: 'üå≠',
            composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Å–º–µ—Å—å 5 –ø–µ—Ä—Ü–µ–≤, –ø–∞–ø—Ä–∏–∫–∞ –∫–æ–ø—á–µ–Ω–∞—è, –∫–∞—Ä–¥–∞–º–æ–Ω, –ø–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π',
            nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥',
            calories: '510 –∫–∫–∞–ª/2140 –∫–î–∂',
            storage: '180 —Å—É—Ç–æ–∫'
        },
        {
            id: 'trufel-70',
            name: '–ö–æ–ª–±–∞—Å–∞ —Å—ã—Ä–æ–≤—è–ª–µ–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã "–° –¢—Ä—é—Ñ–µ–ª–µ–º"',
            price: 411,
            unit: '/70 –≥—Ä.',
            maxQty: 20,
            image: 'üå≠',
            composition: '–æ–ª–µ–Ω–∏–Ω–∞, –∂–∏—Ä –≥–æ–≤—è–∂–∏–π, —Å–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –ø–∏—â–µ–≤–∞—è, —Ç—Ä—é—Ñ–µ–ª—å —á–µ—Ä–Ω—ã–π, –ø–∞–ø—Ä–∏–∫–∞ –∫–æ–ø—á–µ–Ω–∞—è, –∫–∞—Ä–¥–∞–º–æ–Ω, –ø–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π',
            nutrition: '–±–µ–ª–æ–∫ - 15 –≥, –∂–∏—Ä - 20 –≥',
            calories: '510 –∫–∫–∞–ª/2140 –∫–î–∂',
            storage: '180 —Å—É—Ç–æ–∫'
        }
    ],
    'pashtet': [
        {
            id: 'pashtet-olene',
            name: '–ü–∞—à—Ç–µ—Ç –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã —Å —Ç—Ä—é—Ñ–µ–ª–µ–º',
            price: 280,
            unit: '/100 –≥—Ä.',
            maxQty: 15,
            image: 'ü•´',
            composition: '–æ–ª–µ–Ω–∏–Ω–∞, —Ç—Ä—é—Ñ–µ–ª—å —á–µ—Ä–Ω—ã–π, —Å–æ–ª—å, —Å–ø–µ—Ü–∏–∏',
            nutrition: '–±–µ–ª–æ–∫ - 18 –≥, –∂–∏—Ä - 12 –≥',
            calories: '180 –∫–∫–∞–ª/750 –∫–î–∂',
            storage: '90 —Å—É—Ç–æ–∫'
        }
    ],
    'delikatesy': [
        {
            id: 'karpachcho',
            name: '–ö–∞—Ä–ø–∞—á—á–æ –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã',
            price: 450,
            unit: '/80 –≥—Ä.',
            maxQty: 12,
            image: 'ü•©',
            composition: '–æ–ª–µ–Ω–∏–Ω–∞, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ, –ª–∏–º–æ–Ω, —Å–ø–µ—Ü–∏–∏',
            nutrition: '–±–µ–ª–æ–∫ - 22 –≥, –∂–∏—Ä - 8 –≥',
            calories: '160 –∫–∫–∞–ª/670 –∫–î–∂',
            storage: '7 —Å—É—Ç–æ–∫'
        }
    ],
    'gotovye': [
        {
            id: 'koreyka-zapechennaya',
            name: '–ö–æ—Ä–µ–π–∫–∞ –∑–∞–ø–µ—á—ë–Ω–Ω–∞—è –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã',
            price: 680,
            unit: '/200 –≥—Ä.',
            maxQty: 10,
            image: 'üî•',
            composition: '–æ–ª–µ–Ω–∏–Ω–∞, —Å–æ–ª—å, —Å–ø–µ—Ü–∏–∏, —Ç—Ä–∞–≤—ã',
            nutrition: '–±–µ–ª–æ–∫ - 28 –≥, –∂–∏—Ä - 15 –≥',
            calories: '250 –∫–∫–∞–ª/1050 –∫–î–∂',
            storage: '14 —Å—É—Ç–æ–∫'
        }
    ],
    'zamorozhennye': [
        {
            id: 'pelmeni-olene',
            name: '–ü–µ–ª—å–º–µ–Ω–∏ —Å –æ–ª–µ–Ω–∏–Ω–æ–π –∏ —Ç—Ä—é—Ñ–µ–ª–µ–º',
            price: 320,
            unit: '/400 –≥—Ä.',
            maxQty: 8,
            image: '‚ùÑÔ∏è',
            composition: '—Ç–µ—Å—Ç–æ, –æ–ª–µ–Ω–∏–Ω–∞, —Ç—Ä—é—Ñ–µ–ª—å, –ª—É–∫, —Å–ø–µ—Ü–∏–∏',
            nutrition: '–±–µ–ª–æ–∫ - 12 –≥, –∂–∏—Ä - 8 –≥',
            calories: '280 –∫–∫–∞–ª/1170 –∫–î–∂',
            storage: '180 —Å—É—Ç–æ–∫'
        }
    ],
    'polufabrikaty': [
        {
            id: 'myaso-olene',
            name: '–ú—è—Å–æ –æ–ª–µ–Ω–∏–Ω—ã –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
            price: 890,
            unit: '/500 –≥—Ä.',
            maxQty: 6,
            image: 'ü•ì',
            composition: '–æ–ª–µ–Ω–∏–Ω–∞, —Å–æ–ª—å',
            nutrition: '–±–µ–ª–æ–∫ - 25 –≥, –∂–∏—Ä - 5 –≥',
            calories: '140 –∫–∫–∞–ª/590 –∫–î–∂',
            storage: '7 —Å—É—Ç–æ–∫'
        }
    ],
    'pirogi-sytnye': [
        {
            id: 'pirog-olene',
            name: '–ü–∏—Ä–æ–≥ —Å –æ–ª–µ–Ω–∏–Ω–æ–π –∏ –≥—Ä–∏–±–∞–º–∏',
            price: 180,
            unit: '/150 –≥—Ä.',
            maxQty: 15,
            image: 'ü•ß',
            composition: '—Ç–µ—Å—Ç–æ, –æ–ª–µ–Ω–∏–Ω–∞, –≥—Ä–∏–±—ã, –ª—É–∫, —Å–ø–µ—Ü–∏–∏',
            nutrition: '–±–µ–ª–æ–∫ - 8 –≥, –∂–∏—Ä - 12 –≥',
            calories: '220 –∫–∫–∞–ª/920 –∫–î–∂',
            storage: '7 —Å—É—Ç–æ–∫'
        }
    ],
    'pirogi-sladkie': [
        {
            id: 'pirog-yagoda',
            name: '–ü–∏—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏',
            price: 120,
            unit: '/120 –≥—Ä.',
            maxQty: 20,
            image: 'üßÅ',
            composition: '—Ç–µ—Å—Ç–æ, —è–≥–æ–¥—ã, —Å–∞—Ö–∞—Ä, —Ç–≤–æ—Ä–æ–≥',
            nutrition: '–±–µ–ª–æ–∫ - 4 –≥, –∂–∏—Ä - 6 –≥',
            calories: '180 –∫–∫–∞–ª/750 –∫–î–∂',
            storage: '5 —Å—É—Ç–æ–∫'
        }
    ]
};

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Telegram –∫–Ω–æ–ø–∫–∏
    if (typeof updateMainButton === 'function') {
        updateMainButton(screenId);
    }
}

function showMain() {
    showScreen('main-screen');
    updateWorkStatus();
}

function showCategory(categoryId) {
    currentCategory = categoryId;
    const category = categories.find(c => c.id === categoryId);
    document.getElementById('category-title').textContent = category.name;
    
    const productsList = document.getElementById('products-list');
    productsList.innerHTML = '';
    
    products[categoryId].forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        productCard.onclick = () => showProductDetail(categoryId, product.id);
        
        productCard.innerHTML = `
            <div class="product-image">${product.image}</div>
            <div class="product-name">${product.name}</div>
            <div class="product-price">${product.price}‚ÇΩ${product.unit}</div>
            <button class="add-to-cart-btn" onclick="event.stopPropagation(); addToCart('${categoryId}', '${product.id}', 1)">
                –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            </button>
        `;
        
        productsList.appendChild(productCard);
    });
    
    showScreen('category-screen');
}

function showProductDetail(categoryId, productId) {
    currentProduct = { categoryId, productId };
    const product = products[categoryId].find(p => p.id === productId);
    
    document.getElementById('product-detail').innerHTML = `
        <div class="detail-image">${product.image}</div>
        <div class="detail-name">${product.name}</div>
        <div class="detail-price">${product.price}‚ÇΩ${product.unit}</div>
        
        <div class="detail-info">
            <h4>–°–æ—Å—Ç–∞–≤:</h4>
            <p>${product.composition}</p>
            
            <h4>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</h4>
            <p>${product.nutrition}</p>
            
            <h4>–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:</h4>
            <p>${product.calories}</p>
            
            <h4>–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:</h4>
            <p>${product.storage}</p>
        </div>
        
        <div class="quantity-selector">
            <button class="qty-btn" onclick="changeDetailQuantity(-1)" id="qty-minus">-</button>
            <div class="qty-display" id="detail-quantity">1</div>
            <button class="qty-btn" onclick="changeDetailQuantity(1)" id="qty-plus">+</button>
        </div>
        
        <button class="add-to-cart-btn" onclick="addFromDetail()">
            –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
        </button>
    `;

    showScreen('product-detail-screen');
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
function changeDetailQuantity(delta) {
    const qtyEl = document.getElementById('detail-quantity');
    const currentQty = parseInt(qtyEl.textContent);
    const product = products[currentProduct.categoryId].find(p => p.id === currentProduct.productId);

    const newQty = Math.max(1, Math.min(product.maxQty, currentQty + delta));
    qtyEl.textContent = newQty;
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
function addFromDetail() {
    const qty = parseInt(document.getElementById('detail-quantity').textContent);
    addToCart(currentProduct.categoryId, currentProduct.productId, qty);
    showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', 'success');
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
function goBackFromProduct() {
    if (currentCategory) {
        showCategory(currentCategory);
    } else {
        showMain();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(categoryId, productId, quantity) {
    if (!isWorkingHours()) {
        showNotification('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º. –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 21:00', 'warning');
        return;
    }

    const cartKey = `${categoryId}_${productId}`;
    const product = products[categoryId].find(p => p.id === productId);

    if (!cart[cartKey]) {
        cart[cartKey] = {
            categoryId,
            productId,
            name: product.name,
            price: product.price,
            unit: product.unit,
            image: product.image,
            maxQty: product.maxQty,
            quantity: 0
        };
    }

    const newQuantity = cart[cartKey].quantity + quantity;
    if (newQuantity > product.maxQty) {
        showNotification(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.maxQty} —à—Ç.`, 'warning');
        return;
    }

    cart[cartKey].quantity = newQuantity;
    localStorage.setItem('tundra_cart', JSON.stringify(cart));
    updateCartBadge();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
function updateCartBadge() {
    const totalItems = Object.values(cart).reduce((sum, item) => sum + item.quantity, 0);
    document.getElementById('cart-badge').textContent = totalItems;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã
function showCart() {
    const cartContent = document.getElementById('cart-content');
    const cartItems = Object.values(cart).filter(item => item.quantity > 0);

    if (cartItems.length === 0) {
        cartContent.innerHTML = `
            <div class="empty-cart">
                <div class="empty-cart-icon">üõí</div>
                <div class="empty-cart-title">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>
                <div class="empty-cart-desc">–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞</div>
                <button class="go-shopping-btn" onclick="showMain()">
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º
                </button>
            </div>
        `;
    } else {
        let cartHTML = '<div style="padding: 20px;">';

        cartItems.forEach(item => {
            cartHTML += `
                <div class="cart-item">
                    <div class="cart-item-header">
                        <div class="cart-item-image">${item.image}</div>
                        <div class="cart-item-info">
                            <div class="cart-item-name">${item.name}</div>
                            <div class="cart-item-price">${item.price}‚ÇΩ${item.unit}</div>
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <div class="cart-qty-controls">
                            <button class="cart-qty-btn" onclick="changeCartQuantity('${item.categoryId}_${item.productId}', -1)">-</button>
                            <span class="qty-display">${item.quantity}</span>
                            <button class="cart-qty-btn" onclick="changeCartQuantity('${item.categoryId}_${item.productId}', 1)">+</button>
                        </div>
                        <div class="cart-item-total">${item.price * item.quantity}‚ÇΩ</div>
                    </div>
                </div>
            `;
        });

        const { subtotal, delivery, total } = calculateCartTotal();
        
        cartHTML += `
            <div class="cart-summary">
                <div class="summary-row">
                    <span>–¢–æ–≤–∞—Ä—ã:</span>
                    <span>${subtotal}‚ÇΩ</span>
                </div>
                <div class="summary-row">
                    <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                    <span>${delivery}‚ÇΩ</span>
                </div>
                <div class="summary-row summary-total">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span>${total}‚ÇΩ</span>
                </div>
                <button class="checkout-btn" onclick="proceedToOrder()" ${subtotal < 3500 ? 'disabled' : ''}>
                    –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
            </div>
        </div>`;

        cartContent.innerHTML = cartHTML;
    }
    
    showScreen('cart-screen');
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
function changeCartQuantity(cartKey, delta) {
    const item = cart[cartKey];
    if (!item) return;

    const newQuantity = item.quantity + delta;
    if (newQuantity <= 0) {
        delete cart[cartKey];
    } else if (newQuantity > item.maxQty) {
        showNotification(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.maxQty} —à—Ç.`, 'warning');
        return;
    } else {
        item.quantity = newQuantity;
    }

    localStorage.setItem('tundra_cart', JSON.stringify(cart));
    updateCartBadge();
    showCart(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
function calculateCartTotal() {
    const subtotal = Object.values(cart).reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const delivery = subtotal >= 5000 ? 0 : 500;
    const total = subtotal + delivery;
    
    return { subtotal, delivery, total };
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
function proceedToOrder() {
    const { subtotal } = calculateCartTotal();
    if (subtotal < 3500) {
        showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: 3,500‚ÇΩ', 'warning');
        return;
    }
    showScreen('order-form-screen');
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
function showProfile() {
    showScreen('profile-screen');
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤
function showMyOrders() {
    showScreen('my-orders-screen');
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
function isWorkingHours() {
    const now = new Date();
    const hour = now.getHours();
    return hour >= 10 && hour < 21;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã
function updateWorkStatus() {
    const statusEl = document.getElementById('work-status');
    if (isWorkingHours()) {
        statusEl.textContent = '–†–∞–±–æ—Ç–∞–µ–º';
        statusEl.style.color = '#27ae60';
    } else {
        statusEl.textContent = '–ó–∞–∫—Ä—ã—Ç–æ';
        statusEl.style.color = '#e74c3c';
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `notification ${type}`;
    
    setTimeout(() => {
        notification.style.opacity = '0';
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
function startFromWelcome() {
    showScreen('main-screen');
    updateWorkStatus();
    setInterval(updateWorkStatus, 60000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
document.addEventListener('DOMContentLoaded', () => {
    const orderForm = document.getElementById('orderForm');
    if (orderForm) {
        orderForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                deliveryZone: document.getElementById('delivery-zone').value,
                address: {
                    street: document.getElementById('street').value.trim(),
                    house: document.getElementById('house').value.trim(),
                    apartment: document.getElementById('apartment').value.trim(),
                    floor: document.getElementById('floor').value.trim(),
                    intercom: document.getElementById('intercom').value.trim()
                },
                phone: document.getElementById('phone').value.trim(),
                comment: document.getElementById('comment').value.trim(),
                cartItems: Object.values(cart).filter(i => i.quantity > 0),
                totals: calculateCartTotal()
            };

            try {
                const response = await fetch(`${API_BASE}/api/orders`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) throw new Error('HTTP ' + response.status);
            } catch (err) {
                console.warn('Order send failed, fallback to local success:', err);
            }

            // –õ–æ–∫–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (fallback/—É—Å–ø–µ—Ö)
            orderCounter++;
            localStorage.setItem('tundra_order_counter', orderCounter.toString());

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            cart = {};
            localStorage.setItem('tundra_cart', JSON.stringify(cart));
            updateCartBadge();

            document.getElementById('order-number').textContent = `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${orderCounter}`;
            showScreen('order-success-screen');
            showNotification('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!', 'success');
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderCategories() {
    const grid = document.getElementById('categories-grid');
    grid.innerHTML = '';

    categories.forEach(category => {
        const card = document.createElement('div');
        card.className = 'category-card';
        card.onclick = () => showCategory(category.id);

        card.innerHTML = `
            <div class="category-icon">${category.icon}</div>
            <div class="category-name">${category.name}</div>
            <div class="category-desc">${category.desc}</div>
            <div class="category-count">${category.count} —Ç–æ–≤–∞—Ä–æ–≤</div>
        `;

        grid.appendChild(card);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    showScreen('welcome-screen');

    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    renderCategories();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
    updateCartBadge();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
    if (window.Telegram?.WebApp) {
        const user = window.Telegram.WebApp.initDataUnsafe?.user;
        if (user) {
            const profileName = document.querySelector('.profile-name');
            if (profileName) {
                profileName.textContent = user.first_name + (user.last_name ? ` ${user.last_name}` : '');
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);
