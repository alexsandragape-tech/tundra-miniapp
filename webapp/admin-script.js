let products = [];
let currentFilter = 'all';
let hasUnsavedChanges = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    initializeApp();
});

async function initializeApp() {
    try {
        await loadProducts();
        setupEventListeners();
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const filter = this.textContent.trim();
            let filterType;
            
            if (filter === '–í—Å–µ') filterType = 'all';
            else if (filter === '–í –Ω–∞–ª–∏—á–∏–∏') filterType = 'available';
            else if (filter === '–°–∫—Ä—ã—Ç–æ') filterType = 'hidden';
            
            setActiveFilter(this);
            filterProducts(filterType);
        });
    });

    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const saveButton = document.querySelector('.save-btn');
    if (saveButton) {
        saveButton.addEventListener('click', function(e) {
            e.preventDefault();
            saveAllChanges();
        });
    }

    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const searchInput = document.querySelector('.search-input');
    if (searchInput) {
        let searchTimeout;
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                searchProducts(this.value);
            }, 300);
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function loadProducts() {
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');
        
        const response = await fetch('/api/admin/products', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            },
            credentials: 'same-origin'
        });

        console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
            throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ${response.status}: ${errorText}`);
        }

        const data = await response.json();
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);

        if (data && data.success && Array.isArray(data.products)) {
            products = data.products;
            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
            
            renderProducts();
            updateStatistics();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification('–¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'success');
            
        } else {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ' + error.message, 'error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const container = document.querySelector('.products-container');
        if (container) {
            container.innerHTML = `
                <div class="error-state">
                    <h3>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</h3>
                    <p>${error.message}</p>
                    <button onclick="loadProducts()" class="retry-btn">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            `;
        }
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
function renderProducts(productsToRender = products) {
    const container = document.querySelector('.products-container');
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    if (!productsToRender || productsToRender.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
            </div>
        `;
        return;
    }

    const html = productsToRender.map(product => createProductCard(product)).join('');
    container.innerHTML = html;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    attachProductEventListeners();
    
    console.log(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productsToRender.length}`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function createProductCard(product) {
    const isAvailable = product.available !== false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    const statusClass = isAvailable ? 'available' : 'hidden';
    const statusText = isAvailable ? '–í –Ω–∞–ª–∏—á–∏–∏' : '–°–∫—Ä—ã—Ç–æ';
    const buttonText = isAvailable ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å';
    const buttonClass = isAvailable ? 'hide-btn' : 'show-btn';

    return `
        <div class="product-card" data-product-id="${product.id || ''}">
            <div class="product-header">
                <div class="product-status">
                    <span class="status-indicator ${statusClass}"></span>
                    <span class="status-text">${statusText}</span>
                </div>
                <div class="product-actions">
                    <button class="toggle-btn ${buttonClass}" onclick="toggleProductVisibility('${product.id}')">
                        ${buttonText}
                    </button>
                </div>
            </div>
            
            <div class="product-content">
                <div class="product-main-info">
                    <input type="text" 
                           class="product-name-input" 
                           value="${product.name || ''}" 
                           data-field="name"
                           placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞">
                    
                    <div class="price-container">
                        <input type="number" 
                               class="price-input" 
                               value="${product.price || 0}" 
                               data-field="price"
                               min="0"
                               step="1">
                        <span class="currency">‚ÇΩ</span>
                    </div>
                </div>
                
                <div class="product-details">
                    <div class="detail-group">
                        <label>–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                        <input type="number" 
                               class="max-quantity-input" 
                               value="${product.max_quantity || 0}" 
                               data-field="max_quantity"
                               min="0">
                        <span>—à—Ç.</span>
                    </div>
                    
                    <div class="detail-group">
                        <label>–≠–º–æ–¥–∑–∏:</label>
                        <input type="text" 
                               class="emoji-input" 
                               value="${product.emoji || ''}" 
                               data-field="emoji"
                               maxlength="10"
                               placeholder="üçï">
                    </div>
                    
                    <div class="detail-group full-width">
                        <label>–°–æ—Å—Ç–∞–≤:</label>
                        <textarea class="composition-input" 
                                  data-field="composition" 
                                  rows="3"
                                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Ç–æ–≤–∞—Ä–∞...">${product.composition || ''}</textarea>
                    </div>
                    
                    <div class="detail-group full-width">
                        <label>–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è:</label>
                        <input type="text" 
                               class="storage-input" 
                               value="${product.storage || ''}" 
                               data-field="storage"
                               placeholder="180 —Å—É—Ç–æ–∫">
                    </div>
                </div>
            </div>
            
            <div class="product-footer">
                <button class="save-product-btn" onclick="saveProduct('${product.id}')">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button class="edit-product-btn" onclick="editProduct('${product.id}')">
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        </div>
    `;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
function attachProductEventListeners() {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
    document.querySelectorAll('.product-card input, .product-card textarea').forEach(input => {
        input.addEventListener('input', function() {
            markProductAsChanged(this.closest('.product-card'));
        });
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        input.addEventListener('blur', function() {
            const card = this.closest('.product-card');
            if (card && card.classList.contains('changed')) {
                const productId = card.dataset.productId;
                if (productId) {
                    debounceAutoSave(productId);
                }
            }
        });
    });
}

// –û—Ç–º–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ
function markProductAsChanged(productCard) {
    if (productCard) {
        productCard.classList.add('changed');
        hasUnsavedChanges = true;
        updateSaveButtonState();
    }
}

// Debounce –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
let autoSaveTimeouts = {};
function debounceAutoSave(productId) {
    if (autoSaveTimeouts[productId]) {
        clearTimeout(autoSaveTimeouts[productId]);
    }
    
    autoSaveTimeouts[productId] = setTimeout(() => {
        autoSaveProduct(productId);
        delete autoSaveTimeouts[productId];
    }, 1000);
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function autoSaveProduct(productId) {
    try {
        await saveProduct(productId, true); // true –æ–∑–Ω–∞—á–∞–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
async function saveProduct(productId, isAutoSave = false) {
    if (!productId) {
        console.error('–ù–µ —É–∫–∞–∑–∞–Ω ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return false;
    }

    try {
        const productCard = document.querySelector(`[data-product-id="${productId}"]`);
        if (!productCard) {
            throw new Error('–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        const productData = collectProductData(productCard);
        
        if (!isAutoSave) {
            console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä:', productId, productData);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const saveBtn = productCard.querySelector('.save-product-btn');
        const originalText = saveBtn.textContent;
        saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        saveBtn.disabled = true;

        const response = await fetch(`/api/admin/products/${productId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'same-origin',
            body: JSON.stringify(productData)
        });

        const result = await response.json();

        if (!response.ok) {
            throw new Error(result.message || result.error || `HTTP ${response.status}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        const productIndex = products.findIndex(p => p.id === productId);
        if (productIndex !== -1) {
            products[productIndex] = { ...products[productIndex], ...productData };
        }

        // –£–±–∏—Ä–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        productCard.classList.remove('changed');
        
        if (!isAutoSave) {
            showNotification(`–¢–æ–≤–∞—Ä "${productData.name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω`, 'success');
            console.log('–¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        saveBtn.textContent = originalText;
        saveBtn.disabled = false;

        updateHasUnsavedChanges();
        return true;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        
        if (!isAutoSave) {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'error');
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        const productCard = document.querySelector(`[data-product-id="${productId}"]`);
        if (productCard) {
            const saveBtn = productCard.querySelector('.save-product-btn');
            if (saveBtn) {
                saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                saveBtn.disabled = false;
            }
        }
        
        return false;
    }
}

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ñ–æ—Ä–º—ã
function collectProductData(productCard) {
    if (!productCard) {
        throw new Error('–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const data = {};
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å data-field
    productCard.querySelectorAll('[data-field]').forEach(element => {
        const fieldName = element.dataset.field;
        let value = element.value || '';
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
        if (element.type === 'number') {
            value = parseFloat(value) || 0;
        } else if (fieldName === 'name' || fieldName === 'composition' || fieldName === 'storage' || fieldName === 'emoji') {
            value = value.trim();
        }
        
        data[fieldName] = value;
    });

    return data;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
async function toggleProductVisibility(productId) {
    if (!productId) {
        console.error('–ù–µ —É–∫–∞–∑–∞–Ω ID —Ç–æ–≤–∞—Ä–∞');
        return;
    }

    try {
        const product = products.find(p => p.id === productId);
        if (!product) {
            throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const newAvailability = !product.available;
        console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ ${productId}: ${product.available} -> ${newAvailability}`);

        const response = await fetch(`/api/admin/products/${productId}/toggle`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'same-origin',
            body: JSON.stringify({ available: newAvailability })
        });

        const result = await response.json();

        if (!response.ok) {
            throw new Error(result.message || result.error || `HTTP ${response.status}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        product.available = newAvailability;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const productCard = document.querySelector(`[data-product-id="${productId}"]`);
        if (productCard) {
            updateProductCardStatus(productCard, newAvailability);
        }

        updateStatistics();

        const statusText = newAvailability ? '–ø–æ–∫–∞–∑–∞–Ω' : '—Å–∫—Ä—ã—Ç';
        showNotification(`–¢–æ–≤–∞—Ä "${product.name}" ${statusText}`, 'success');
        
        console.log('–í–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:', result);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + error.message, 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function updateProductCardStatus(productCard, isAvailable) {
    const statusIndicator = productCard.querySelector('.status-indicator');
    const statusText = productCard.querySelector('.status-text');
    const toggleBtn = productCard.querySelector('.toggle-btn');

    if (isAvailable) {
        statusIndicator.className = 'status-indicator available';
        statusText.textContent = '–í –Ω–∞–ª–∏—á–∏–∏';
        toggleBtn.textContent = '–°–∫—Ä—ã—Ç—å';
        toggleBtn.className = 'toggle-btn hide-btn';
    } else {
        statusIndicator.className = 'status-indicator hidden';
        statusText.textContent = '–°–∫—Ä—ã—Ç–æ';
        toggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å';
        toggleBtn.className = 'toggle-btn show-btn';
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
async function saveAllChanges() {
    try {
        const changedCards = document.querySelectorAll('.product-card.changed');
        
        if (changedCards.length === 0) {
            showNotification('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'info');
            return;
        }

        console.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º ${changedCards.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const saveButton = document.querySelector('.save-btn');
        if (saveButton) {
            saveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            saveButton.disabled = true;
        }

        let successCount = 0;
        let errorCount = 0;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞)
        for (const card of changedCards) {
            const productId = card.dataset.productId;
            if (productId) {
                const success = await saveProduct(productId, false);
                if (success) {
                    successCount++;
                } else {
                    errorCount++;
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (saveButton) {
            saveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
            saveButton.disabled = false;
        }

        updateHasUnsavedChanges();

        if (errorCount === 0) {
            showNotification(`–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${successCount} —Ç–æ–≤–∞—Ä–æ–≤)`, 'success');
        } else {
            showNotification(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${successCount} —Ç–æ–≤–∞—Ä–æ–≤, –æ—à–∏–±–æ–∫: ${errorCount}`, 'warning');
        }

        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —É—Å–ø–µ—à–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'error');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        const saveButton = document.querySelector('.save-btn');
        if (saveButton) {
            saveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
            saveButton.disabled = false;
        }
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
function filterProducts(filter) {
    currentFilter = filter;
    
    let filteredProducts;
    
    switch (filter) {
        case 'available':
            filteredProducts = products.filter(p => p.available !== false);
            break;
        case 'hidden':
            filteredProducts = products.filter(p => p.available === false);
            break;
        case 'all':
        default:
            filteredProducts = products;
            break;
    }
    
    console.log(`–§–∏–ª—å—Ç—Ä "${filter}": –ø–æ–∫–∞–∑–∞–Ω–æ ${filteredProducts.length} –∏–∑ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    renderProducts(filteredProducts);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
function setActiveFilter(activeButton) {
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    activeButton.classList.add('active');
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
function searchProducts(query) {
    if (!query || query.trim() === '') {
        filterProducts(currentFilter);
        return;
    }
    
    const searchQuery = query.toLowerCase().trim();
    const filteredProducts = products.filter(product => {
        return (product.name && product.name.toLowerCase().includes(searchQuery)) ||
               (product.composition && product.composition.toLowerCase().includes(searchQuery)) ||
               (product.emoji && product.emoji.includes(searchQuery));
    });
    
    console.log(`–ü–æ–∏—Å–∫ "${query}": –Ω–∞–π–¥–µ–Ω–æ ${filteredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    renderProducts(filteredProducts);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatistics() {
    const total = products.length;
    const available = products.filter(p => p.available !== false).length;
    const hidden = total - available;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ —à–∞–ø–∫–µ
    const totalElement = document.querySelector('.stat-total');
    const availableElement = document.querySelector('.stat-available');
    const hiddenElement = document.querySelector('.stat-hidden');
    
    if (totalElement) totalElement.textContent = total;
    if (availableElement) availableElement.textContent = available;
    if (hiddenElement) hiddenElement.textContent = hidden;
    
    console.log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ ${total}, –¥–æ—Å—Ç—É–ø–Ω–æ ${available}, —Å–∫—Ä—ã—Ç–æ ${hidden}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
function updateHasUnsavedChanges() {
    hasUnsavedChanges = document.querySelectorAll('.product-card.changed').length > 0;
    updateSaveButtonState();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function updateSaveButtonState() {
    const saveButton = document.querySelector('.save-btn');
    if (saveButton) {
        saveButton.disabled = !hasUnsavedChanges;
        saveButton.classList.toggle('has-changes', hasUnsavedChanges);
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
function editProduct(productId) {
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', productId);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    showNotification('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <span class="notification-message">${message}</span>
        <button class="notification-close" onclick="this.parentElement.remove()">√ó</button>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    let container = document.querySelector('.notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.className = 'notifications-container';
        document.body.appendChild(container);
    }
    
    container.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function(event) {
    if (hasUnsavedChanges) {
        event.preventDefault();
        event.returnValue = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
        return event.returnValue;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JavaScript
window.addEventListener('error', function(event) {
    console.error('JavaScript –æ—à–∏–±–∫–∞:', event.error);
    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'error');
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
window.toggleProductVisibility = toggleProductVisibility;
window.saveProduct = saveProduct;
window.editProduct = editProduct;
window.loadProducts = loadProducts;
