// üóÑÔ∏è –ú–û–î–£–õ–¨ –ë–ê–ó–´ –î–ê–ù–ù–´–• –î–õ–Ø TUNDRA GOURMET
const { Pool } = require('pg');
const config = require('./config');

// –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
const pool = new Pool({
    connectionString: config.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    max: 20, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    min: 5,  // –ú–∏–Ω–∏–º—É–º 5 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    idle: 5000, // 5 —Å–µ–∫—É–Ω–¥ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connectionTimeoutMillis: 5000, // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    idleTimeoutMillis: 20000, // 20 —Å–µ–∫—É–Ω–¥ –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    acquireTimeoutMillis: 10000, // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    createTimeoutMillis: 10000, // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    destroyTimeoutMillis: 5000, // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    reapIntervalMillis: 1000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    createRetryIntervalMillis: 200, // –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ 200–º—Å
});

// –ö—ç—à —É–±—Ä–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—Ç–µ —Å –ë–î

// üîÑ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö –ë–î –û–ü–ï–†–ê–¶–ò–ô
async function retryDbOperation(operation, maxRetries = 3, delay = 1000) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            return await operation();
        } catch (error) {
            console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:`, error.message);
            
            if (attempt === maxRetries) {
                throw error; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            }
            
            // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
            const waitTime = delay * Math.pow(2, attempt - 1);
            console.log(`‚è≥ –ñ–¥–µ–º ${waitTime}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
    }
}

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶
async function initializeDatabase() {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                order_id VARCHAR(50) UNIQUE NOT NULL,
                user_id VARCHAR(100) NOT NULL,
                user_name VARCHAR(255),
                phone VARCHAR(20),
                delivery_zone VARCHAR(50),
                address TEXT,
                items JSONB NOT NULL,
                total_amount INTEGER NOT NULL,
                status VARCHAR(50) DEFAULT 'pending',
                payment_status VARCHAR(50) DEFAULT 'pending',
                payment_id VARCHAR(100),
                payment_url TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É payment_status –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await pool.query(`
            DO $$ 
            BEGIN 
                IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = 'orders' AND column_name = 'payment_status'
                ) THEN
                    ALTER TABLE orders ADD COLUMN payment_status VARCHAR(50) DEFAULT 'pending';
                END IF;
            END $$;
        `);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await pool.query(`
            CREATE TABLE IF NOT EXISTS categories (
                id SERIAL PRIMARY KEY,
                category_id VARCHAR(50) UNIQUE NOT NULL,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                image_url TEXT,
                is_visible BOOLEAN DEFAULT true,
                sort_order INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const defaultCategories = [
            { id: 'kolbasy', name: '–ö–æ–ª–±–∞—Å—ã', desc: '–°—ã—Ä–æ–≤—è–ª–µ–Ω—ã–µ –¥–µ–ª–∏–∫–∞—Ç–µ—Å—ã –∏–∑ –æ–ª–µ–Ω–∏–Ω—ã', order: 1 },
            { id: 'pashtet', name: '–ü–∞—à—Ç–µ—Ç—ã', desc: '–†–∏–π–µ—Ç—ã —Å —Ç—Ä—é—Ñ–µ–ª–µ–º –∏ –≥—Ä–∏–±–∞–º–∏', order: 2 },
            { id: 'delikatesy', name: '–î–µ–ª–∏–∫–∞—Ç–µ—Å—ã', desc: '–ö–∞—Ä–ø–∞—á—á–æ, —Ö–∞–º–æ–Ω, —Å–Ω–µ–∫–∏ –ø—Ä–µ–º–∏—É–º', order: 3 },
            { id: 'gotovye', name: '–ì–æ—Ç–æ–≤—ã–µ –¥–µ–ª–∏–∫–∞—Ç–µ—Å—ã', desc: '–ó–∞–ø–µ—á—ë–Ω–Ω—ã–µ –∫–æ—Ä–µ–π–∫–∏ –∏ –æ–∫–æ—Ä–æ–∫', order: 4 },
            { id: 'zamorozhennye', name: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ', desc: '–ü–µ–ª—å–º–µ–Ω–∏ —Å –æ–ª–µ–Ω–∏–Ω–æ–π –∏ —Ç—Ä—é—Ñ–µ–ª–µ–º', order: 5 },
            { id: 'polufabrikaty', name: '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã', desc: '–ú—è—Å–æ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è', order: 6 },
            { id: 'pirogi-sytnye', name: '–ü–∏—Ä–æ–≥–∏ —Å—ã—Ç–Ω—ã–µ', desc: '–° –æ–ª–µ–Ω–∏–Ω–æ–π, –≥—Ä–∏–±–∞–º–∏, —Ç—Ä—é—Ñ–µ–ª–µ–º', order: 7 },
            { id: 'pirogi-sladkie', name: '–ü–∏—Ä–æ–≥–∏ —Å–ª–∞–¥–∫–∏–µ', desc: '–° —è–≥–æ–¥–∞–º–∏ –∏ —Ç–≤–æ—Ä–æ–≥–æ–º', order: 8 },
            { id: 'sousy-marinad', name: '–°–æ—É—Å—ã –∏ –º–∞—Ä–∏–Ω–∞–¥—ã', desc: '–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Å–æ—É—Å—ã –∏ –º–∞—Ä–∏–Ω–∞–¥—ã', order: 9 },
            { id: 'napitki', name: '–ù–∞–ø–∏—Ç–∫–∏', desc: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Å–æ–∫–∏ –∏ –∫–æ–º–ø–æ—Ç—ã', order: 10 },
            { id: 'deserty', name: '–î–µ—Å–µ—Ä—Ç—ã', desc: '–°–ª–∞–¥–∫–∏–µ –¥–µ–ª–∏–∫–∞—Ç–µ—Å—ã', order: 11 },
            { id: 'konditerka', name: '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è', desc: '–¢–æ—Ä—Ç—ã, –ø–∏—Ä–æ–∂–Ω—ã–µ, –ø–µ—á–µ–Ω—å–µ', order: 12 }
        ];
        
        for (const category of defaultCategories) {
            await pool.query(`
                INSERT INTO categories (category_id, name, description, sort_order, is_visible)
                VALUES ($1, $2, $3, $4, true)
                ON CONFLICT (category_id) DO NOTHING
            `, [category.id, category.name, category.desc, category.order]);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        await pool.query(`
            CREATE TABLE IF NOT EXISTS bot_users (
                id SERIAL PRIMARY KEY,
                telegram_user_id VARCHAR(50) UNIQUE NOT NULL,
                first_name VARCHAR(255),
                last_name VARCHAR(255),
                username VARCHAR(255),
                language_code VARCHAR(10),
                is_bot BOOLEAN DEFAULT false,
                first_interaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_interaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT true
            )
        `);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤ –∞–¥–º–∏–Ω–∫–∏
        await pool.query(`
            CREATE TABLE IF NOT EXISTS admin_products (
                id SERIAL PRIMARY KEY,
                category_id VARCHAR(50) NOT NULL,
                product_id VARCHAR(100) NOT NULL,
                product_data JSONB NOT NULL,
                is_available BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(category_id, product_id)
            )
        `);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        await pool.query(`
            CREATE TABLE IF NOT EXISTS purchase_history (
                id SERIAL PRIMARY KEY,
                user_id VARCHAR(100) NOT NULL,
                order_id VARCHAR(50) NOT NULL UNIQUE,
                customer_name VARCHAR(255),
                phone VARCHAR(20),
                amount INTEGER NOT NULL,
                items_count INTEGER DEFAULT 0,
                items_data TEXT,
                payment_id VARCHAR(100),
                purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                delivery_zone VARCHAR(20),
                address_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await pool.query(`
            DO $$ 
            BEGIN 
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='purchase_history' AND column_name='customer_name') THEN
                    ALTER TABLE purchase_history ADD COLUMN customer_name VARCHAR(255);
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='purchase_history' AND column_name='phone') THEN
                    ALTER TABLE purchase_history ADD COLUMN phone VARCHAR(20);
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='purchase_history' AND column_name='items_count') THEN
                    ALTER TABLE purchase_history ADD COLUMN items_count INTEGER DEFAULT 0;
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='purchase_history' AND column_name='items_data') THEN
                    ALTER TABLE purchase_history ADD COLUMN items_data TEXT;
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='purchase_history' AND column_name='payment_id') THEN
                    ALTER TABLE purchase_history ADD COLUMN payment_id VARCHAR(100);
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='purchase_history' AND column_name='delivery_zone') THEN
                    ALTER TABLE purchase_history ADD COLUMN delivery_zone VARCHAR(20);
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='purchase_history' AND column_name='address_data') THEN
                    ALTER TABLE purchase_history ADD COLUMN address_data TEXT;
                END IF;
            END $$;
        `);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await pool.query(`
            CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id);
            CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
            CREATE INDEX IF NOT EXISTS idx_purchase_history_user_id ON purchase_history(user_id);
            CREATE INDEX IF NOT EXISTS idx_admin_products_category ON admin_products(category_id);
        `);
        
        
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

// üìã –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–ö–ê–ó–ê–ú–ò
class OrdersDB {
    // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    static async create(orderData) {
        return await retryDbOperation(async () => {
            const query = `
                INSERT INTO orders (order_id, user_id, user_name, phone, delivery_zone, address, items, total_amount, status, payment_status, payment_id, payment_url)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
                RETURNING *
            `;
            const values = [
                orderData.orderId,
                orderData.userId,
                orderData.userName,
                orderData.phone,
                orderData.deliveryZone,
                orderData.address,
                JSON.stringify(orderData.items),
                orderData.totalAmount,
                orderData.status || 'pending',
                orderData.paymentStatus || 'pending',
                orderData.paymentId,
                orderData.paymentUrl
            ];
            
            const result = await pool.query(query, values);
            return result.rows[0];
        });
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
    static async getById(orderId) {
        const query = 'SELECT * FROM orders WHERE order_id = $1';
        const result = await pool.query(query, [orderId]);
        if (result.rows.length > 0) {
            const order = result.rows[0];
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ items
            try {
                order.items = typeof order.items === 'string' ? JSON.parse(order.items) : (order.items || []);
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ items –≤ getById:', e.message);
                order.items = [];
            }
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ address
            try {
                order.address = typeof order.address === 'string' ? JSON.parse(order.address) : (order.address || {});
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ address –≤ getById:', e.message);
                order.address = {};
            }
            
            return order;
        }
        return null;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    static async updateStatus(orderId, status) {
        const query = `
            UPDATE orders 
            SET status = $1, updated_at = CURRENT_TIMESTAMP 
            WHERE order_id = $2 
            RETURNING *
        `;
        const result = await pool.query(query, [status, orderId]);
        if (result.rows.length > 0) {
            const order = result.rows[0];
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ items
            try {
                order.items = typeof order.items === 'string' ? JSON.parse(order.items) : (order.items || []);
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ items –≤ updateStatus:', e.message);
                order.items = [];
            }
            
            return order;
        }
        return null;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
    static async update(orderId, updateData) {
        const fields = [];
        const values = [];
        let paramCounter = 1;
        
        // üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –û–ë–ù–û–í–õ–ï–ù–ò–Ø
        console.log(`üîç OrdersDB.update: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ${orderId} —Å –¥–∞–Ω–Ω—ã–º–∏:`, updateData);
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
        for (const [key, value] of Object.entries(updateData)) {
            if (key === 'paymentId') {
                fields.push(`payment_id = $${paramCounter}`);
            } else if (key === 'paymentUrl') {
                fields.push(`payment_url = $${paramCounter}`);
            } else if (key === 'paymentStatus') {
                fields.push(`payment_status = $${paramCounter}`);
            } else {
                fields.push(`${key} = $${paramCounter}`);
            }
            values.push(value);
            paramCounter++;
        }
        
        if (fields.length === 0) return null;
        
        fields.push(`updated_at = CURRENT_TIMESTAMP`);
        values.push(orderId);
        
        const query = `
            UPDATE orders 
            SET ${fields.join(', ')}
            WHERE order_id = $${paramCounter}
            RETURNING *
        `;
        
        const result = await pool.query(query, values);
        if (result.rows.length > 0) {
            const order = result.rows[0];
            if (order.items && typeof order.items === 'string') {
                try {
                    order.items = JSON.parse(order.items);
                } catch (e) {
                    order.items = [];
                }
            }
            
            // üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø
            console.log(`‚úÖ OrdersDB.update: –ó–∞–∫–∞–∑ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, {
                order_id: order.order_id,
                total_amount: order.total_amount,
                payment_status: order.payment_status,
                status: order.status
            });
            
            return order;
        }
        return null;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async getByUserId(userId) {
        const query = 'SELECT * FROM orders WHERE user_id = $1 ORDER BY created_at DESC';
        const result = await pool.query(query, [userId]);
        return result.rows.map(order => {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º items
            if (typeof order.items === 'string') {
                try {
                    order.items = JSON.parse(order.items);
                } catch (e) {
                    order.items = [];
                }
            }
            return order;
        });
    }
    
    // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    static async cleanupOldOrders() {
        const query = `
            DELETE FROM orders 
            WHERE created_at < NOW() - INTERVAL '30 days' 
            AND status IN ('cancelled', 'expired')
        `;
        const result = await pool.query(query);
        return result.rowCount;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
    static async getMaxOrderId() {
        const query = 'SELECT MAX(CAST(order_id AS INTEGER)) as max_id FROM orders';
        const result = await pool.query(query);
        return result.rows[0];
    }
}

// üõí –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–¢–û–†–ò–ò –ü–û–ö–£–ü–û–ö
class PurchaseHistoryDB {
    // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
    static async add(userId, orderId, amount) {
        const query = `
            INSERT INTO purchase_history (user_id, order_id, amount)
            VALUES ($1, $2, $3)
            RETURNING *
        `;
        const result = await pool.query(query, [userId, orderId, amount]);
        return result.rows[0];
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async getTotalAmount(userId) {
        const query = `
            SELECT COALESCE(SUM(amount), 0) as total_amount
            FROM purchase_history 
            WHERE user_id = $1
        `;
        const result = await pool.query(query, [userId]);
        return parseInt(result.rows[0].total_amount);
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async getOrdersCount(userId) {
        const query = `
            SELECT COUNT(*) as orders_count
            FROM purchase_history 
            WHERE user_id = $1
        `;
        const result = await pool.query(query, [userId]);
        return parseInt(result.rows[0].orders_count);
    }
    
    // üíæ –°–û–ó–î–ê–¢–¨ –ó–ê–ü–ò–°–¨ –û –ü–û–ö–£–ü–ö–ï (–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å server.js)
    static async create(purchaseData) {
        const {
            order_id,
            user_id,
            customer_name,
            phone,
            total_amount,
            items_count,
            items_data,
            payment_id,
            delivery_zone,
            address_data
        } = purchaseData;
        
        const query = `
            INSERT INTO purchase_history (
                order_id, user_id, customer_name, phone, amount, 
                items_count, items_data, payment_id, 
                delivery_zone, address_data
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
            RETURNING *
        `;
        
        const values = [
            order_id,
            user_id,
            customer_name,
            phone,
            total_amount, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª–µ amount –≤ –ë–î
            items_count,
            items_data,
            payment_id,
            delivery_zone,
            address_data
        ];
        
        const result = await pool.query(query, values);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log(`üîç PurchaseHistoryDB.create: –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å:`, {
            order_id: result.rows[0].order_id,
            user_id: result.rows[0].user_id,
            amount: result.rows[0].amount,
            total_amount_sent: total_amount
        });
        
        return result.rows[0];
    }
    
    // üìã –ü–û–õ–£–ß–ò–¢–¨ –í–°–ï –ü–û–ö–£–ü–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–¥–ª—è API)
    static async getByUserId(userId) {
        const query = `
            SELECT 
                order_id,
                customer_name,
                phone,
                amount,
                amount as totalAmount,
                items_count as itemsCount,
                items_data,
                payment_id,
                purchase_date,
                delivery_zone,
                address_data
            FROM purchase_history 
            WHERE user_id = $1 
            ORDER BY purchase_date DESC
        `;
        
        const result = await pool.query(query, [userId]);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log(`üîç PurchaseHistoryDB.getByUserId: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        if (result.rows.length > 0) {
            console.log(`üîç PurchaseHistoryDB.getByUserId: –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:`, {
                order_id: result.rows[0].order_id,
                amount: result.rows[0].amount,
                totalAmount: result.rows[0].totalAmount
            });
        }
        
        // –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        return result.rows.map(row => {
            try {
                row.items = JSON.parse(row.items_data);
                row.address = JSON.parse(row.address_data);
                delete row.items_data;
                delete row.address_data;
                return row;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∏:', error);
                row.items = [];
                row.address = {};
                return row;
            }
        });
    }

    // üî• –î–û–ë–ê–í–ò–¢–¨ –ü–û–ö–£–ü–ö–£ –í –°–ò–°–¢–ï–ú–£ –õ–û–Ø–õ–¨–ù–û–°–¢–ò (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—ä–µ–∫—Ç–∞)
    static async add(purchaseData) {
        let orderId, userId, amount;
        
        if (typeof purchaseData === 'object' && purchaseData.orderId) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ–±—ä–µ–∫—Ç–æ–º
            orderId = purchaseData.orderId;
            userId = purchaseData.userId;
            amount = purchaseData.amount;
        } else {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            userId = arguments[0];
            orderId = arguments[1];
            amount = arguments[2];
        }
        
        const query = `
            INSERT INTO purchase_history (user_id, order_id, amount)
            VALUES ($1, $2, $3)
            RETURNING *
        `;
        
        try {
            const result = await pool.query(query, [userId, orderId, amount]);
            console.log(`‚úÖ PurchaseHistoryDB.add: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ ${orderId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å—É–º–º–∞: ${amount}‚ÇΩ`);
            return result.rows[0];
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–∞
            if (error.message.includes('duplicate key') || error.message.includes('unique constraint')) {
                console.log(`‚ö†Ô∏è PurchaseHistoryDB.add: –ü–æ–∫—É–ø–∫–∞ ${orderId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                return null;
            }
            console.error('‚ùå PurchaseHistoryDB.add: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error.message);
            throw error;
        }
    }

    // üîç –ü–†–û–í–ï–†–ò–¢–¨ –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï –ü–û–ö–£–ü–ö–ò –ü–û ORDER_ID
    static async getByOrderId(orderId) {
        const query = `
            SELECT * FROM purchase_history 
            WHERE order_id = $1
        `;
        
        try {
            const result = await pool.query(query, [orderId]);
            return result.rows[0] || null;
        } catch (error) {
            console.error('‚ùå PurchaseHistoryDB.getByOrderId: –û—à–∏–±–∫–∞:', error.message);
            throw error;
        }
    }

    // üìä –ü–û–õ–£–ß–ò–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –õ–û–Ø–õ–¨–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    static async getUserStats(userId) {
        const query = `
            SELECT 
                COUNT(*) as totalPurchases,
                COALESCE(SUM(amount), 0) as totalSpent
            FROM purchase_history 
            WHERE user_id = $1
        `;
        
        try {
            const result = await pool.query(query, [userId]);
            const stats = result.rows[0];
            
            const totalSpent = parseFloat(stats.totalspent) || 0;
            const totalPurchases = parseInt(stats.totalpurchases) || 0;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–∏–¥–∫—É –ø–æ –ª–æ–≥–∏–∫–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            let currentDiscount = 0;
            if (totalSpent >= 50000) {
                currentDiscount = 10;
            } else if (totalSpent >= 25000) {
                currentDiscount = 5;
            } else if (totalSpent >= 10000) {
                currentDiscount = 3;
            }
            
            console.log(`üìä PurchaseHistoryDB.getUserStats –¥–ª—è ${userId}:`, {
                totalSpent,
                totalPurchases,
                currentDiscount
            });
            
            return {
                totalSpent,
                totalPurchases,
                currentDiscount
            };
        } catch (error) {
            console.error('‚ùå PurchaseHistoryDB.getUserStats: –û—à–∏–±–∫–∞:', error.message);
            throw error;
        }
    }

}

// üîß –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–û–í–ê–†–û–í –ê–î–ú–ò–ù–ö–ò
class AdminProductsDB {
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    static async saveAll(productsData) {
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        let totalProducts = 0;
        for (const [categoryId, products] of Object.entries(productsData)) {
            totalProducts += products.length;
        }
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º UPSERT (INSERT ... ON CONFLICT) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
            let savedCount = 0;
            for (const [categoryId, products] of Object.entries(productsData)) {
                for (const product of products) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
                    const isAvailable = product.available === true || product.available === undefined;
                    
                    console.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä ${product.name}: available=${product.available}, isAvailable=${isAvailable}`);
                    
                    await client.query(
                        `INSERT INTO admin_products (category_id, product_id, product_data, is_available, updated_at) 
                         VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
                         ON CONFLICT (category_id, product_id) 
                         DO UPDATE SET 
                             product_data = EXCLUDED.product_data,
                             is_available = EXCLUDED.is_available,
                             updated_at = CURRENT_TIMESTAMP`,
                        [categoryId, product.id, JSON.stringify(product), isAvailable]
                    );
                    savedCount++;
                }
            }
            
            // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const allProductIds = [];
            for (const [categoryId, products] of Object.entries(productsData)) {
                for (const product of products) {
                    allProductIds.push(`('${categoryId}', '${product.id}')`);
                }
            }
            
            if (allProductIds.length > 0) {
                await client.query(`
                    DELETE FROM admin_products 
                    WHERE (category_id, product_id) NOT IN (${allProductIds.join(', ')})
                `);
            }
            
            await client.query('COMMIT');
            console.log(`‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${savedCount} —à—Ç.`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    static async loadAll() {
        const query = 'SELECT * FROM admin_products ORDER BY category_id, product_id';
        const result = await pool.query(query);
        
        const products = {};
        for (const row of result.rows) {
            if (!products[row.category_id]) {
                products[row.category_id] = [];
            }
            
            try {
                let productData;
                if (typeof row.product_data === 'string') {
                    productData = JSON.parse(row.product_data);
                } else if (typeof row.product_data === 'object') {
                    productData = row.product_data;
                } else {
                    continue;
                }
                
                // –ú–∞–ø–ø–∏–º —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î, –µ—Å–ª–∏ is_available null/undefined - —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                productData.available = row.is_available !== false;
                products[row.category_id].push(productData);
            } catch (error) {
                continue;
            }
        }
        
        return products;
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
    static async toggleAvailability(categoryId, productId) {
        const query = `
            UPDATE admin_products 
            SET is_available = NOT is_available, updated_at = CURRENT_TIMESTAMP
            WHERE category_id = $1 AND product_id = $2
            RETURNING is_available
        `;
        const result = await pool.query(query, [categoryId, productId]);
        return result.rows.length > 0 ? result.rows[0].is_available : null;
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
class CategoriesDB {
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    static async getVisible() {
        const query = 'SELECT * FROM categories WHERE is_visible = true ORDER BY sort_order, name';
        const result = await pool.query(query);
        return result.rows;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
    static async getAll() {
        const query = 'SELECT * FROM categories ORDER BY sort_order, name';
        const result = await pool.query(query);
        return result.rows;
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    static async toggleVisibility(categoryId) {
        const query = `
            UPDATE categories 
            SET is_visible = NOT is_visible, updated_at = CURRENT_TIMESTAMP
            WHERE category_id = $1
            RETURNING is_visible
        `;
        const result = await pool.query(query, [categoryId]);
        return result.rows.length > 0 ? result.rows[0].is_visible : null;
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    static async upsert(categoryId, name, description = '', imageUrl = '') {
        const query = `
            INSERT INTO categories (category_id, name, description, image_url, updated_at) 
            VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
            ON CONFLICT (category_id) 
            DO UPDATE SET 
                name = EXCLUDED.name,
                description = COALESCE(NULLIF(EXCLUDED.description, ''), categories.description),
                image_url = COALESCE(NULLIF(EXCLUDED.image_url, ''), categories.image_url),
                updated_at = CURRENT_TIMESTAMP
            RETURNING *
        `;
        const result = await pool.query(query, [categoryId, name, description, imageUrl]);
        return result.rows[0];
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    static async updateName(categoryId, name) {
        const query = `
            UPDATE categories
            SET name = $2, updated_at = CURRENT_TIMESTAMP
            WHERE category_id = $1
            RETURNING *
        `;
        const result = await pool.query(query, [categoryId, name]);
        return result.rows[0];
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    static async getStats() {
        const query = `
            SELECT 
                c.category_id,
                c.name,
                c.sort_order,
                c.is_visible,
                COUNT(ap.id) as products_count,
                COUNT(CASE WHEN ap.is_available = true THEN 1 END) as available_products
            FROM categories c
            LEFT JOIN admin_products ap ON c.category_id = ap.category_id
            GROUP BY c.category_id, c.name, c.sort_order, c.is_visible
            ORDER BY c.sort_order, c.name
        `;
        const result = await pool.query(query);
        return result.rows;
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞
class BotUsersDB {
    // –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async upsert(userData) {
        const query = `
            INSERT INTO bot_users (
                telegram_user_id, first_name, last_name, username, 
                language_code, is_bot, last_interaction
            ) 
            VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP)
            ON CONFLICT (telegram_user_id) 
            DO UPDATE SET 
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name,
                username = EXCLUDED.username,
                language_code = EXCLUDED.language_code,
                last_interaction = CURRENT_TIMESTAMP,
                is_active = true
            RETURNING *
        `;
        
        const values = [
            userData.id?.toString(),
            userData.first_name || null,
            userData.last_name || null,
            userData.username || null,
            userData.language_code || null,
            userData.is_bot || false
        ];
        
        const result = await pool.query(query, values);
        return result.rows[0];
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    static async getAllActiveUsers() {
        const query = `
            SELECT telegram_user_id, first_name, last_name, username
            FROM bot_users 
            WHERE is_active = true 
            AND telegram_user_id IS NOT NULL 
            AND telegram_user_id != ''
            ORDER BY last_interaction DESC
        `;
        
        const result = await pool.query(query);
        return result.rows;
    }

    // –ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
    static async deactivate(telegramUserId) {
        const query = `
            UPDATE bot_users
            SET is_active = false, last_interaction = CURRENT_TIMESTAMP
            WHERE telegram_user_id = $1
        `;
        await pool.query(query, [telegramUserId?.toString()]);
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    static async getStats() {
        const query = `
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN is_active = true THEN 1 END) as active_users,
                COUNT(CASE WHEN last_interaction > NOW() - INTERVAL '7 days' THEN 1 END) as recent_users
            FROM bot_users
        `;
        
        const result = await pool.query(query);
        return result.rows[0];
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
    pool,
    initializeDatabase,
    OrdersDB,
    PurchaseHistoryDB,
    AdminProductsDB,
    CategoriesDB,
    BotUsersDB
};
