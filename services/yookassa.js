// üí≥ –ú–û–î–£–õ–¨ YOOKASSA: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏)
const crypto = require('crypto');
const axios = require('axios');
const config = require('../config');

// –õ–æ–≥–≥–µ—Ä –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ server.js. –ù–∞ —Å–ª—É—á–∞–π –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–æ–ª—å.
const log = global.logger || {
    error: console.error,
    warn: console.warn,
    info: console.log,
    debug: console.log,
};

class YooKassaAPI {
    constructor(shopId, secretKey) {
        this.shopId = shopId;
        this.secretKey = secretKey;
        this.baseURL = 'https://api.yookassa.ru/v3';
        log.info('üí≥ YooKassa API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    async createPayment(paymentData, idempotenceKey) {
        const headers = {
            'Idempotence-Key': idempotenceKey,
            'Content-Type': 'application/json'
        };
        const auth = {
            username: this.shopId,
            password: this.secretKey
        };
        const url = `${this.baseURL}/payments`;
        const response = await axios.post(url, paymentData, { headers, auth, timeout: 10000 });
        return response.data;
    }
}

let checkout = null;

function formatPhoneForYooKassa(phone) {
    if (!phone) return '+79000000000';
    const digits = phone.toString().replace(/\D/g, '');
    if (digits.startsWith('8')) return '+7' + digits.slice(1);
    if (digits.startsWith('7')) return '+7' + digits.slice(1);
    if (digits.length === 10) return '+7' + digits;
    return '+' + digits;
}

async function initYooKassa() {
    if (!config.YOOKASSA_SHOP_ID || !config.YOOKASSA_SECRET_KEY) {
        log.warn('‚ö†Ô∏è –ÆKassa –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
        return null;
    }
    checkout = new YooKassaAPI(config.YOOKASSA_SHOP_ID, config.YOOKASSA_SECRET_KEY);
    return checkout;
}

async function createYooKassaPayment(orderId, amount, description, customerInfo, returnUrl) {
    if (!checkout) await initYooKassa();
    // –ï—Å–ª–∏ URL –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!returnUrl) {
        const base = config.FRONTEND_URL || process.env.FRONTEND_URL || 'http://localhost:3000';
        returnUrl = `${base.replace(/\/$/, '')}/payment-success?orderId=${orderId}`;
    }
    const formattedPhone = formatPhoneForYooKassa(customerInfo.phone);
    const fullPaymentData = {
        amount: { value: amount.toFixed(2), currency: 'RUB' },
        confirmation: { type: 'redirect', return_url: returnUrl },
        capture: true,
        description,
        receipt: {
            customer: { email: customerInfo.email || 'customer@example.com', phone: formattedPhone },
            items: [{ description, quantity: '1', amount: { value: amount.toFixed(2), currency: 'RUB' }, vat_code: 1, payment_mode: 'full_payment', payment_subject: 'commodity' }]
        },
        metadata: { orderId, customerName: customerInfo.customerName || '–ö–ª–∏–µ–Ω—Ç', phone: customerInfo.phone || '' }
    };
    const minimalPaymentData = {
        amount: { value: amount.toFixed(2), currency: 'RUB' },
        confirmation: { type: 'redirect', return_url: returnUrl },
        capture: true,
        description,
        metadata: { orderId }
    };
    const idempotenceKey = crypto.randomUUID();
    try {
        const payment = await checkout.createPayment(fullPaymentData, idempotenceKey);
        return payment;
    } catch (error) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—É–Ω—à–∏—Ñ—Ç –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ payload
        if (error.response && [400, 403].includes(error.response.status)) {
            const payment = await checkout.createPayment(minimalPaymentData, crypto.randomUUID());
            return payment;
        }
        throw error;
    }
}

module.exports = {
    initYooKassa,
    createYooKassaPayment,
    formatPhoneForYooKassa,
};


