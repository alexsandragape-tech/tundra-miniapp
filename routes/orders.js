// üì¶ –†–æ—É—Ç—ã –∑–∞–∫–∞–∑–æ–≤. –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
const express = require('express');
const router = express.Router();

const { OrdersDB } = require('../database');
const { mapDbOrderToApi, mapDbOrderToList, isOrderCompletedOrPaid } = require('../services/order-utils');

module.exports = (logger) => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    router.get('/orders/:orderId', async (req, res) => {
        try {
            const { orderId } = req.params;
            logger.info('üîç API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ' + orderId);
            let order = await OrdersDB.getById(orderId);
            if (order) {
                order = mapDbOrderToApi(order);
            } else {
                return res.status(404).json({ ok: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            return res.json({ ok: true, order });
        } catch (error) {
            logger.error('‚ùå API /api/orders/:orderId –æ—à–∏–±–∫–∞:', error.message);
            return res.status(500).json({ ok: false, error: error.message });
        }
    });

    // –°–ø–∏—Å–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–≤–∞ —Å—Ç–∞—Ä—ã—Ö –ø—É—Ç–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã)
    router.get('/user-orders/:userId', async (req, res) => {
        try {
            const { userId } = req.params;
            const orders = await OrdersDB.getByUserId(userId);
            const formattedOrders = orders.filter(isOrderCompletedOrPaid).map(mapDbOrderToList);
            res.json({ ok: true, orders: formattedOrders });
        } catch (error) {
            res.status(500).json({ ok: false, error: error.message });
        }
    });

    router.get('/orders/user/:userId', async (req, res) => {
        try {
            const { userId } = req.params;
            const orders = await OrdersDB.getByUserId(userId);
            const formattedOrders = orders.filter(isOrderCompletedOrPaid).map(mapDbOrderToList);
            res.json({ ok: true, orders: formattedOrders });
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            res.status(500).json({ ok: false, error: error.message });
        }
    });

    return router;
};


